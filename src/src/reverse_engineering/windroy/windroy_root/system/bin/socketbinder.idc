//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-3FBD-7F04-2C                      |
// |                      Jiang Ying, Personal license                       |
// +-------------------------------------------------------------------------+
//
//
//      This file contains the user-defined type definitions.
//      To use it press F2 in IDA and enter the name of this file.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();
	set_inf_attr(INF_LOW_OFF, 0x3FFFFF);
	set_inf_attr(INF_HIGH_OFF, 0x426000);
}

static Enums_0(id) {

	id = add_enum(-1,"MACRO_ERROR",0x1100000);
	add_enum_member(id,"ERROR_SEVERITY_SUCCESS",	0,	-1);
	add_enum_member(id,"ERROR_SUCCESS",	0,	-1);
	add_enum_member(id,"NO_ERROR",	0,	-1);
	add_enum_member(id,"ERROR_INVALID_FUNCTION",	0X1,	-1);
	add_enum_member(id,"ERROR_FILE_NOT_FOUND",	0X2,	-1);
	add_enum_member(id,"ERROR_PATH_NOT_FOUND",	0X3,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_OPEN_FILES",	0X4,	-1);
	add_enum_member(id,"ERROR_ACCESS_DENIED",	0X5,	-1);
	add_enum_member(id,"ERROR_INVALID_HANDLE",	0X6,	-1);
	add_enum_member(id,"ERROR_ARENA_TRASHED",	0X7,	-1);
	add_enum_member(id,"ERROR_NOT_ENOUGH_MEMORY",	0X8,	-1);
	add_enum_member(id,"ERROR_INVALID_BLOCK",	0X9,	-1);
	add_enum_member(id,"ERROR_BAD_ENVIRONMENT",	0XA,	-1);
	add_enum_member(id,"ERROR_BAD_FORMAT",	0XB,	-1);
	add_enum_member(id,"ERROR_INVALID_ACCESS",	0XC,	-1);
	add_enum_member(id,"ERROR_INVALID_DATA",	0XD,	-1);
	add_enum_member(id,"ERROR_OUTOFMEMORY",	0XE,	-1);
	add_enum_member(id,"ERROR_INVALID_DRIVE",	0XF,	-1);
	add_enum_member(id,"ERROR_CURRENT_DIRECTORY",	0X10,	-1);
	add_enum_member(id,"ERROR_NOT_SAME_DEVICE",	0X11,	-1);
	add_enum_member(id,"ERROR_NO_MORE_FILES",	0X12,	-1);
	add_enum_member(id,"ERROR_WRITE_PROTECT",	0X13,	-1);
	add_enum_member(id,"ERROR_BAD_UNIT",	0X14,	-1);
	add_enum_member(id,"ERROR_NOT_READY",	0X15,	-1);
	add_enum_member(id,"ERROR_BAD_COMMAND",	0X16,	-1);
	add_enum_member(id,"ERROR_CRC",	0X17,	-1);
	add_enum_member(id,"ERROR_BAD_LENGTH",	0X18,	-1);
	add_enum_member(id,"ERROR_SEEK",	0X19,	-1);
	add_enum_member(id,"ERROR_NOT_DOS_DISK",	0X1A,	-1);
	add_enum_member(id,"ERROR_SECTOR_NOT_FOUND",	0X1B,	-1);
	add_enum_member(id,"ERROR_OUT_OF_PAPER",	0X1C,	-1);
	add_enum_member(id,"ERROR_WRITE_FAULT",	0X1D,	-1);
	add_enum_member(id,"ERROR_READ_FAULT",	0X1E,	-1);
	add_enum_member(id,"ERROR_GEN_FAILURE",	0X1F,	-1);
	add_enum_member(id,"ERROR_SHARING_VIOLATION",	0X20,	-1);
	add_enum_member(id,"ERROR_LOCK_VIOLATION",	0X21,	-1);
	add_enum_member(id,"ERROR_WRONG_DISK",	0X22,	-1);
	add_enum_member(id,"ERROR_SHARING_BUFFER_EXCEEDED",	0X24,	-1);
	add_enum_member(id,"ERROR_HANDLE_EOF",	0X26,	-1);
	add_enum_member(id,"ERROR_HANDLE_DISK_FULL",	0X27,	-1);
	add_enum_member(id,"ERROR_NOT_SUPPORTED",	0X32,	-1);
	add_enum_member(id,"ERROR_REM_NOT_LIST",	0X33,	-1);
	add_enum_member(id,"ERROR_DUP_NAME",	0X34,	-1);
	add_enum_member(id,"ERROR_BAD_NETPATH",	0X35,	-1);
	add_enum_member(id,"ERROR_NETWORK_BUSY",	0X36,	-1);
	add_enum_member(id,"ERROR_DEV_NOT_EXIST",	0X37,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_CMDS",	0X38,	-1);
	add_enum_member(id,"ERROR_ADAP_HDW_ERR",	0X39,	-1);
	add_enum_member(id,"ERROR_BAD_NET_RESP",	0X3A,	-1);
	add_enum_member(id,"ERROR_UNEXP_NET_ERR",	0X3B,	-1);
	add_enum_member(id,"ERROR_BAD_REM_ADAP",	0X3C,	-1);
	add_enum_member(id,"ERROR_PRINTQ_FULL",	0X3D,	-1);
	add_enum_member(id,"ERROR_NO_SPOOL_SPACE",	0X3E,	-1);
	add_enum_member(id,"ERROR_PRINT_CANCELLED",	0X3F,	-1);
	add_enum_member(id,"ERROR_NETNAME_DELETED",	0X40,	-1);
	add_enum_member(id,"ERROR_NETWORK_ACCESS_DENIED",	0X41,	-1);
	add_enum_member(id,"ERROR_BAD_DEV_TYPE",	0X42,	-1);
	add_enum_member(id,"ERROR_BAD_NET_NAME",	0X43,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_NAMES",	0X44,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_SESS",	0X45,	-1);
	add_enum_member(id,"ERROR_SHARING_PAUSED",	0X46,	-1);
	add_enum_member(id,"ERROR_REQ_NOT_ACCEP",	0X47,	-1);
	add_enum_member(id,"ERROR_REDIR_PAUSED",	0X48,	-1);
	add_enum_member(id,"ERROR_FILE_EXISTS",	0X50,	-1);
	add_enum_member(id,"ERROR_CANNOT_MAKE",	0X52,	-1);
	add_enum_member(id,"ERROR_FAIL_I24",	0X53,	-1);
	add_enum_member(id,"ERROR_OUT_OF_STRUCTURES",	0X54,	-1);
	add_enum_member(id,"ERROR_ALREADY_ASSIGNED",	0X55,	-1);
	add_enum_member(id,"ERROR_INVALID_PASSWORD",	0X56,	-1);
	add_enum_member(id,"ERROR_INVALID_PARAMETER",	0X57,	-1);
	add_enum_member(id,"ERROR_NET_WRITE_FAULT",	0X58,	-1);
	add_enum_member(id,"ERROR_NO_PROC_SLOTS",	0X59,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_SEMAPHORES",	0X64,	-1);
	add_enum_member(id,"ERROR_EXCL_SEM_ALREADY_OWNED",	0X65,	-1);
	add_enum_member(id,"ERROR_SEM_IS_SET",	0X66,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_SEM_REQUESTS",	0X67,	-1);
	add_enum_member(id,"ERROR_INVALID_AT_INTERRUPT_TIME",	0X68,	-1);
	add_enum_member(id,"ERROR_SEM_OWNER_DIED",	0X69,	-1);
	add_enum_member(id,"ERROR_SEM_USER_LIMIT",	0X6A,	-1);
	add_enum_member(id,"ERROR_DISK_CHANGE",	0X6B,	-1);
	add_enum_member(id,"ERROR_DRIVE_LOCKED",	0X6C,	-1);
	add_enum_member(id,"ERROR_BROKEN_PIPE",	0X6D,	-1);
	add_enum_member(id,"ERROR_OPEN_FAILED",	0X6E,	-1);
	add_enum_member(id,"ERROR_BUFFER_OVERFLOW",	0X6F,	-1);
	add_enum_member(id,"ERROR_DISK_FULL",	0X70,	-1);
	add_enum_member(id,"ERROR_NO_MORE_SEARCH_HANDLES",	0X71,	-1);
	add_enum_member(id,"ERROR_INVALID_TARGET_HANDLE",	0X72,	-1);
	add_enum_member(id,"ERROR_INVALID_CATEGORY",	0X75,	-1);
	add_enum_member(id,"ERROR_INVALID_VERIFY_SWITCH",	0X76,	-1);
	add_enum_member(id,"ERROR_BAD_DRIVER_LEVEL",	0X77,	-1);
	add_enum_member(id,"ERROR_CALL_NOT_IMPLEMENTED",	0X78,	-1);
	add_enum_member(id,"ERROR_SEM_TIMEOUT",	0X79,	-1);
	add_enum_member(id,"ERROR_INSUFFICIENT_BUFFER",	0X7A,	-1);
	add_enum_member(id,"ERROR_INVALID_NAME",	0X7B,	-1);
	add_enum_member(id,"ERROR_INVALID_LEVEL",	0X7C,	-1);
	add_enum_member(id,"ERROR_NO_VOLUME_LABEL",	0X7D,	-1);
	add_enum_member(id,"ERROR_MOD_NOT_FOUND",	0X7E,	-1);
	add_enum_member(id,"ERROR_PROC_NOT_FOUND",	0X7F,	-1);
	add_enum_member(id,"ERROR_WAIT_NO_CHILDREN",	0X80,	-1);
	add_enum_member(id,"ERROR_CHILD_NOT_COMPLETE",	0X81,	-1);
	add_enum_member(id,"ERROR_DIRECT_ACCESS_HANDLE",	0X82,	-1);
	add_enum_member(id,"ERROR_NEGATIVE_SEEK",	0X83,	-1);
	add_enum_member(id,"ERROR_SEEK_ON_DEVICE",	0X84,	-1);
	add_enum_member(id,"ERROR_IS_JOIN_TARGET",	0X85,	-1);
	add_enum_member(id,"ERROR_IS_JOINED",	0X86,	-1);
	add_enum_member(id,"ERROR_IS_SUBSTED",	0X87,	-1);
	add_enum_member(id,"ERROR_NOT_JOINED",	0X88,	-1);
	add_enum_member(id,"ERROR_NOT_SUBSTED",	0X89,	-1);
	add_enum_member(id,"ERROR_JOIN_TO_JOIN",	0X8A,	-1);
	add_enum_member(id,"ERROR_SUBST_TO_SUBST",	0X8B,	-1);
	add_enum_member(id,"ERROR_JOIN_TO_SUBST",	0X8C,	-1);
	add_enum_member(id,"ERROR_SUBST_TO_JOIN",	0X8D,	-1);
	add_enum_member(id,"ERROR_BUSY_DRIVE",	0X8E,	-1);
	add_enum_member(id,"ERROR_SAME_DRIVE",	0X8F,	-1);
	add_enum_member(id,"ERROR_DIR_NOT_ROOT",	0X90,	-1);
	add_enum_member(id,"ERROR_DIR_NOT_EMPTY",	0X91,	-1);
	add_enum_member(id,"ERROR_IS_SUBST_PATH",	0X92,	-1);
	add_enum_member(id,"ERROR_IS_JOIN_PATH",	0X93,	-1);
	add_enum_member(id,"ERROR_PATH_BUSY",	0X94,	-1);
	add_enum_member(id,"ERROR_IS_SUBST_TARGET",	0X95,	-1);
	add_enum_member(id,"ERROR_SYSTEM_TRACE",	0X96,	-1);
	add_enum_member(id,"ERROR_INVALID_EVENT_COUNT",	0X97,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_MUXWAITERS",	0X98,	-1);
	add_enum_member(id,"ERROR_INVALID_LIST_FORMAT",	0X99,	-1);
	add_enum_member(id,"ERROR_LABEL_TOO_LONG",	0X9A,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_TCBS",	0X9B,	-1);
	add_enum_member(id,"ERROR_SIGNAL_REFUSED",	0X9C,	-1);
	add_enum_member(id,"ERROR_DISCARDED",	0X9D,	-1);
	add_enum_member(id,"ERROR_NOT_LOCKED",	0X9E,	-1);
	add_enum_member(id,"ERROR_BAD_THREADID_ADDR",	0X9F,	-1);
	add_enum_member(id,"ERROR_BAD_ARGUMENTS",	0XA0,	-1);
	add_enum_member(id,"ERROR_BAD_PATHNAME",	0XA1,	-1);
	add_enum_member(id,"ERROR_SIGNAL_PENDING",	0XA2,	-1);
	add_enum_member(id,"ERROR_MAX_THRDS_REACHED",	0XA4,	-1);
	add_enum_member(id,"ERROR_LOCK_FAILED",	0XA7,	-1);
	add_enum_member(id,"ERROR_BUSY",	0XAA,	-1);
	add_enum_member(id,"ERROR_CANCEL_VIOLATION",	0XAD,	-1);
	add_enum_member(id,"ERROR_ATOMIC_LOCKS_NOT_SUPPORTED",	0XAE,	-1);
	add_enum_member(id,"ERROR_INVALID_SEGMENT_NUMBER",	0XB4,	-1);
	add_enum_member(id,"ERROR_INVALID_ORDINAL",	0XB6,	-1);
	add_enum_member(id,"ERROR_ALREADY_EXISTS",	0XB7,	-1);
	add_enum_member(id,"ERROR_INVALID_FLAG_NUMBER",	0XBA,	-1);
	add_enum_member(id,"ERROR_SEM_NOT_FOUND",	0XBB,	-1);
	add_enum_member(id,"ERROR_INVALID_STARTING_CODESEG",	0XBC,	-1);
	add_enum_member(id,"ERROR_INVALID_STACKSEG",	0XBD,	-1);
	add_enum_member(id,"ERROR_INVALID_MODULETYPE",	0XBE,	-1);
	add_enum_member(id,"ERROR_INVALID_EXE_SIGNATURE",	0XBF,	-1);
	add_enum_member(id,"ERROR_EXE_MARKED_INVALID",	0XC0,	-1);
	add_enum_member(id,"ERROR_BAD_EXE_FORMAT",	0XC1,	-1);
	add_enum_member(id,"ERROR_ITERATED_DATA_EXCEEDS_64k",	0XC2,	-1);
	add_enum_member(id,"ERROR_INVALID_MINALLOCSIZE",	0XC3,	-1);
	add_enum_member(id,"ERROR_DYNLINK_FROM_INVALID_RING",	0XC4,	-1);
	add_enum_member(id,"ERROR_IOPL_NOT_ENABLED",	0XC5,	-1);
	add_enum_member(id,"ERROR_INVALID_SEGDPL",	0XC6,	-1);
	add_enum_member(id,"ERROR_AUTODATASEG_EXCEEDS_64k",	0XC7,	-1);
	add_enum_member(id,"ERROR_RING2SEG_MUST_BE_MOVABLE",	0XC8,	-1);
	add_enum_member(id,"ERROR_RELOC_CHAIN_XEEDS_SEGLIM",	0XC9,	-1);
	add_enum_member(id,"ERROR_INFLOOP_IN_RELOC_CHAIN",	0XCA,	-1);
	add_enum_member(id,"ERROR_ENVVAR_NOT_FOUND",	0XCB,	-1);
	add_enum_member(id,"ERROR_NO_SIGNAL_SENT",	0XCD,	-1);
	add_enum_member(id,"ERROR_FILENAME_EXCED_RANGE",	0XCE,	-1);
	add_enum_member(id,"ERROR_RING2_STACK_IN_USE",	0XCF,	-1);
	add_enum_member(id,"ERROR_META_EXPANSION_TOO_LONG",	0XD0,	-1);
	add_enum_member(id,"ERROR_INVALID_SIGNAL_NUMBER",	0XD1,	-1);
	add_enum_member(id,"ERROR_THREAD_1_INACTIVE",	0XD2,	-1);
	add_enum_member(id,"ERROR_LOCKED",	0XD4,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_MODULES",	0XD6,	-1);
	add_enum_member(id,"ERROR_NESTING_NOT_ALLOWED",	0XD7,	-1);
	add_enum_member(id,"ERROR_EXE_MACHINE_TYPE_MISMATCH",	0XD8,	-1);
	add_enum_member(id,"ERROR_BAD_PIPE",	0XE6,	-1);
	add_enum_member(id,"ERROR_PIPE_BUSY",	0XE7,	-1);
	add_enum_member(id,"ERROR_NO_DATA",	0XE8,	-1);
	add_enum_member(id,"ERROR_PIPE_NOT_CONNECTED",	0XE9,	-1);
	add_enum_member(id,"ERROR_MORE_DATA",	0XEA,	-1);
	add_enum_member(id,"ERROR_VC_DISCONNECTED",	0XF0,	-1);
	add_enum_member(id,"ERROR_INVALID_EA_NAME",	0XFE,	-1);
	add_enum_member(id,"ERROR_EA_LIST_INCONSISTENT",	0XFF,	-1);
	add_enum_member(id,"ERROR_NO_MORE_ITEMS",	0X103,	-1);
	add_enum_member(id,"ERROR_CANNOT_COPY",	0X10A,	-1);
	add_enum_member(id,"ERROR_DIRECTORY",	0X10B,	-1);
	add_enum_member(id,"ERROR_EAS_DIDNT_FIT",	0X113,	-1);
	add_enum_member(id,"ERROR_EA_FILE_CORRUPT",	0X114,	-1);
	add_enum_member(id,"ERROR_EA_TABLE_FULL",	0X115,	-1);
	add_enum_member(id,"ERROR_INVALID_EA_HANDLE",	0X116,	-1);
	add_enum_member(id,"ERROR_EAS_NOT_SUPPORTED",	0X11A,	-1);
	add_enum_member(id,"ERROR_NOT_OWNER",	0X120,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_POSTS",	0X12A,	-1);
	add_enum_member(id,"ERROR_PARTIAL_COPY",	0X12B,	-1);
	add_enum_member(id,"ERROR_OPLOCK_NOT_GRANTED",	0X12C,	-1);
	add_enum_member(id,"ERROR_INVALID_OPLOCK_PROTOCOL",	0X12D,	-1);
	add_enum_member(id,"ERROR_MR_MID_NOT_FOUND",	0X13D,	-1);
	add_enum_member(id,"ERROR_INVALID_ADDRESS",	0X1E7,	-1);
	add_enum_member(id,"ERROR_ARITHMETIC_OVERFLOW",	0X216,	-1);
	add_enum_member(id,"ERROR_PIPE_CONNECTED",	0X217,	-1);
	add_enum_member(id,"ERROR_PIPE_LISTENING",	0X218,	-1);
	add_enum_member(id,"ERROR_EA_ACCESS_DENIED",	0X3E2,	-1);
	add_enum_member(id,"ERROR_OPERATION_ABORTED",	0X3E3,	-1);
	add_enum_member(id,"ERROR_IO_INCOMPLETE",	0X3E4,	-1);
	add_enum_member(id,"ERROR_IO_PENDING",	0X3E5,	-1);
	add_enum_member(id,"ERROR_NOACCESS",	0X3E6,	-1);
	add_enum_member(id,"ERROR_SWAPERROR",	0X3E7,	-1);
	add_enum_member(id,"ERROR_STACK_OVERFLOW",	0X3E9,	-1);
	add_enum_member(id,"ERROR_INVALID_MESSAGE",	0X3EA,	-1);
	add_enum_member(id,"ERROR_CAN_NOT_COMPLETE",	0X3EB,	-1);
	add_enum_member(id,"ERROR_INVALID_FLAGS",	0X3EC,	-1);
	add_enum_member(id,"ERROR_UNRECOGNIZED_VOLUME",	0X3ED,	-1);
	add_enum_member(id,"ERROR_FILE_INVALID",	0X3EE,	-1);
	add_enum_member(id,"ERROR_FULLSCREEN_MODE",	0X3EF,	-1);
	add_enum_member(id,"ERROR_NO_TOKEN",	0X3F0,	-1);
	add_enum_member(id,"ERROR_BADDB",	0X3F1,	-1);
	add_enum_member(id,"ERROR_BADKEY",	0X3F2,	-1);
	add_enum_member(id,"ERROR_CANTOPEN",	0X3F3,	-1);
	add_enum_member(id,"ERROR_CANTREAD",	0X3F4,	-1);
	add_enum_member(id,"ERROR_CANTWRITE",	0X3F5,	-1);
	add_enum_member(id,"ERROR_REGISTRY_RECOVERED",	0X3F6,	-1);
	add_enum_member(id,"ERROR_REGISTRY_CORRUPT",	0X3F7,	-1);
	add_enum_member(id,"ERROR_REGISTRY_IO_FAILED",	0X3F8,	-1);
	add_enum_member(id,"ERROR_NOT_REGISTRY_FILE",	0X3F9,	-1);
	add_enum_member(id,"ERROR_KEY_DELETED",	0X3FA,	-1);
	add_enum_member(id,"ERROR_NO_LOG_SPACE",	0X3FB,	-1);
	add_enum_member(id,"ERROR_KEY_HAS_CHILDREN",	0X3FC,	-1);
	add_enum_member(id,"ERROR_CHILD_MUST_BE_VOLATILE",	0X3FD,	-1);
	add_enum_member(id,"ERROR_NOTIFY_ENUM_DIR",	0X3FE,	-1);
	add_enum_member(id,"ERROR_DEPENDENT_SERVICES_RUNNING",	0X41B,	-1);
	add_enum_member(id,"ERROR_INVALID_SERVICE_CONTROL",	0X41C,	-1);
	add_enum_member(id,"ERROR_SERVICE_REQUEST_TIMEOUT",	0X41D,	-1);
	add_enum_member(id,"ERROR_SERVICE_NO_THREAD",	0X41E,	-1);
	add_enum_member(id,"ERROR_SERVICE_DATABASE_LOCKED",	0X41F,	-1);
	add_enum_member(id,"ERROR_SERVICE_ALREADY_RUNNING",	0X420,	-1);
	add_enum_member(id,"ERROR_INVALID_SERVICE_ACCOUNT",	0X421,	-1);
	add_enum_member(id,"ERROR_SERVICE_DISABLED",	0X422,	-1);
	add_enum_member(id,"ERROR_CIRCULAR_DEPENDENCY",	0X423,	-1);
	add_enum_member(id,"ERROR_SERVICE_DOES_NOT_EXIST",	0X424,	-1);
	add_enum_member(id,"ERROR_SERVICE_CANNOT_ACCEPT_CTRL",	0X425,	-1);
	add_enum_member(id,"ERROR_SERVICE_NOT_ACTIVE",	0X426,	-1);
	add_enum_member(id,"ERROR_FAILED_SERVICE_CONTROLLER_CONNECT",	0X427,	-1);
	add_enum_member(id,"ERROR_EXCEPTION_IN_SERVICE",	0X428,	-1);
	add_enum_member(id,"ERROR_DATABASE_DOES_NOT_EXIST",	0X429,	-1);
	add_enum_member(id,"ERROR_SERVICE_SPECIFIC_ERROR",	0X42A,	-1);
	add_enum_member(id,"ERROR_PROCESS_ABORTED",	0X42B,	-1);
	add_enum_member(id,"ERROR_SERVICE_DEPENDENCY_FAIL",	0X42C,	-1);
	add_enum_member(id,"ERROR_SERVICE_LOGON_FAILED",	0X42D,	-1);
	add_enum_member(id,"ERROR_SERVICE_START_HANG",	0X42E,	-1);
	add_enum_member(id,"ERROR_INVALID_SERVICE_LOCK",	0X42F,	-1);
	add_enum_member(id,"ERROR_SERVICE_MARKED_FOR_DELETE",	0X430,	-1);
	add_enum_member(id,"ERROR_SERVICE_EXISTS",	0X431,	-1);
	add_enum_member(id,"ERROR_ALREADY_RUNNING_LKG",	0X432,	-1);
	add_enum_member(id,"ERROR_SERVICE_DEPENDENCY_DELETED",	0X433,	-1);
	add_enum_member(id,"ERROR_BOOT_ALREADY_ACCEPTED",	0X434,	-1);
	add_enum_member(id,"ERROR_SERVICE_NEVER_STARTED",	0X435,	-1);
	add_enum_member(id,"ERROR_DUPLICATE_SERVICE_NAME",	0X436,	-1);
	add_enum_member(id,"ERROR_DIFFERENT_SERVICE_ACCOUNT",	0X437,	-1);
	add_enum_member(id,"ERROR_CANNOT_DETECT_DRIVER_FAILURE",	0X438,	-1);
	add_enum_member(id,"ERROR_CANNOT_DETECT_PROCESS_ABORT",	0X439,	-1);
	add_enum_member(id,"ERROR_NO_RECOVERY_PROGRAM",	0X43A,	-1);
	add_enum_member(id,"ERROR_END_OF_MEDIA",	0X44C,	-1);
	add_enum_member(id,"ERROR_FILEMARK_DETECTED",	0X44D,	-1);
	add_enum_member(id,"ERROR_BEGINNING_OF_MEDIA",	0X44E,	-1);
	add_enum_member(id,"ERROR_SETMARK_DETECTED",	0X44F,	-1);
	add_enum_member(id,"ERROR_NO_DATA_DETECTED",	0X450,	-1);
	add_enum_member(id,"ERROR_PARTITION_FAILURE",	0X451,	-1);
	add_enum_member(id,"ERROR_INVALID_BLOCK_LENGTH",	0X452,	-1);
	add_enum_member(id,"ERROR_DEVICE_NOT_PARTITIONED",	0X453,	-1);
	add_enum_member(id,"ERROR_UNABLE_TO_LOCK_MEDIA",	0X454,	-1);
	add_enum_member(id,"ERROR_UNABLE_TO_UNLOAD_MEDIA",	0X455,	-1);
	add_enum_member(id,"ERROR_MEDIA_CHANGED",	0X456,	-1);
	add_enum_member(id,"ERROR_BUS_RESET",	0X457,	-1);
	add_enum_member(id,"ERROR_NO_MEDIA_IN_DRIVE",	0X458,	-1);
	add_enum_member(id,"ERROR_NO_UNICODE_TRANSLATION",	0X459,	-1);
	add_enum_member(id,"ERROR_DLL_INIT_FAILED",	0X45A,	-1);
	add_enum_member(id,"ERROR_SHUTDOWN_IN_PROGRESS",	0X45B,	-1);
	add_enum_member(id,"ERROR_NO_SHUTDOWN_IN_PROGRESS",	0X45C,	-1);
	add_enum_member(id,"ERROR_IO_DEVICE",	0X45D,	-1);
	add_enum_member(id,"ERROR_SERIAL_NO_DEVICE",	0X45E,	-1);
	add_enum_member(id,"ERROR_IRQ_BUSY",	0X45F,	-1);
	add_enum_member(id,"ERROR_MORE_WRITES",	0X460,	-1);
	add_enum_member(id,"ERROR_COUNTER_TIMEOUT",	0X461,	-1);
	add_enum_member(id,"ERROR_FLOPPY_ID_MARK_NOT_FOUND",	0X462,	-1);
	add_enum_member(id,"ERROR_FLOPPY_WRONG_CYLINDER",	0X463,	-1);
	add_enum_member(id,"ERROR_FLOPPY_UNKNOWN_ERROR",	0X464,	-1);
	add_enum_member(id,"ERROR_FLOPPY_BAD_REGISTERS",	0X465,	-1);
	add_enum_member(id,"ERROR_DISK_RECALIBRATE_FAILED",	0X466,	-1);
	add_enum_member(id,"ERROR_DISK_OPERATION_FAILED",	0X467,	-1);
	add_enum_member(id,"ERROR_DISK_RESET_FAILED",	0X468,	-1);
	add_enum_member(id,"ERROR_EOM_OVERFLOW",	0X469,	-1);
	add_enum_member(id,"ERROR_NOT_ENOUGH_SERVER_MEMORY",	0X46A,	-1);
	add_enum_member(id,"ERROR_POSSIBLE_DEADLOCK",	0X46B,	-1);
	add_enum_member(id,"ERROR_MAPPED_ALIGNMENT",	0X46C,	-1);
	add_enum_member(id,"ERROR_SET_POWER_STATE_VETOED",	0X474,	-1);
	add_enum_member(id,"ERROR_SET_POWER_STATE_FAILED",	0X475,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_LINKS",	0X476,	-1);
	add_enum_member(id,"ERROR_OLD_WIN_VERSION",	0X47E,	-1);
	add_enum_member(id,"ERROR_APP_WRONG_OS",	0X47F,	-1);
	add_enum_member(id,"ERROR_SINGLE_INSTANCE_APP",	0X480,	-1);
	add_enum_member(id,"ERROR_RMODE_APP",	0X481,	-1);
	add_enum_member(id,"ERROR_INVALID_DLL",	0X482,	-1);
	add_enum_member(id,"ERROR_NO_ASSOCIATION",	0X483,	-1);
	add_enum_member(id,"ERROR_DDE_FAIL",	0X484,	-1);
	add_enum_member(id,"ERROR_DLL_NOT_FOUND",	0X485,	-1);
	add_enum_member(id,"ERROR_NO_MORE_USER_HANDLES",	0X486,	-1);
	add_enum_member(id,"ERROR_MESSAGE_SYNC_ONLY",	0X487,	-1);
	add_enum_member(id,"ERROR_SOURCE_ELEMENT_EMPTY",	0X488,	-1);
	add_enum_member(id,"ERROR_DESTINATION_ELEMENT_FULL",	0X489,	-1);
	add_enum_member(id,"ERROR_ILLEGAL_ELEMENT_ADDRESS",	0X48A,	-1);
	add_enum_member(id,"ERROR_MAGAZINE_NOT_PRESENT",	0X48B,	-1);
	add_enum_member(id,"ERROR_DEVICE_REINITIALIZATION_NEEDED",	0X48C,	-1);
	add_enum_member(id,"ERROR_DEVICE_REQUIRES_CLEANING",	0X48D,	-1);
	add_enum_member(id,"ERROR_DEVICE_DOOR_OPEN",	0X48E,	-1);
	add_enum_member(id,"ERROR_DEVICE_NOT_CONNECTED",	0X48F,	-1);
	add_enum_member(id,"ERROR_NOT_FOUND",	0X490,	-1);
	add_enum_member(id,"ERROR_NO_MATCH",	0X491,	-1);
	add_enum_member(id,"ERROR_SET_NOT_FOUND",	0X492,	-1);
	add_enum_member(id,"ERROR_POINT_NOT_FOUND",	0X493,	-1);
	add_enum_member(id,"ERROR_NO_TRACKING_SERVICE",	0X494,	-1);
	add_enum_member(id,"ERROR_NO_VOLUME_ID",	0X495,	-1);
	add_enum_member(id,"ERROR_BAD_DEVICE",	0X4B0,	-1);
	add_enum_member(id,"ERROR_CONNECTION_UNAVAIL",	0X4B1,	-1);
	add_enum_member(id,"ERROR_DEVICE_ALREADY_REMEMBERED",	0X4B2,	-1);
	add_enum_member(id,"ERROR_NO_NET_OR_BAD_PATH",	0X4B3,	-1);
	add_enum_member(id,"ERROR_BAD_PROVIDER",	0X4B4,	-1);
	add_enum_member(id,"ERROR_CANNOT_OPEN_PROFILE",	0X4B5,	-1);
	add_enum_member(id,"ERROR_BAD_PROFILE",	0X4B6,	-1);
	add_enum_member(id,"ERROR_NOT_CONTAINER",	0X4B7,	-1);
	add_enum_member(id,"ERROR_EXTENDED_ERROR",	0X4B8,	-1);
	add_enum_member(id,"ERROR_INVALID_GROUPNAME",	0X4B9,	-1);
	add_enum_member(id,"ERROR_INVALID_COMPUTERNAME",	0X4BA,	-1);
	add_enum_member(id,"ERROR_INVALID_EVENTNAME",	0X4BB,	-1);
	add_enum_member(id,"ERROR_INVALID_DOMAINNAME",	0X4BC,	-1);
	add_enum_member(id,"ERROR_INVALID_SERVICENAME",	0X4BD,	-1);
	add_enum_member(id,"ERROR_INVALID_NETNAME",	0X4BE,	-1);
	add_enum_member(id,"ERROR_INVALID_SHARENAME",	0X4BF,	-1);
	add_enum_member(id,"ERROR_INVALID_PASSWORDNAME",	0X4C0,	-1);
	add_enum_member(id,"ERROR_INVALID_MESSAGENAME",	0X4C1,	-1);
	add_enum_member(id,"ERROR_INVALID_MESSAGEDEST",	0X4C2,	-1);
	add_enum_member(id,"ERROR_SESSION_CREDENTIAL_CONFLICT",	0X4C3,	-1);
	add_enum_member(id,"ERROR_REMOTE_SESSION_LIMIT_EXCEEDED",	0X4C4,	-1);
	add_enum_member(id,"ERROR_DUP_DOMAINNAME",	0X4C5,	-1);
	add_enum_member(id,"ERROR_NO_NETWORK",	0X4C6,	-1);
	add_enum_member(id,"ERROR_CANCELLED",	0X4C7,	-1);
	add_enum_member(id,"ERROR_USER_MAPPED_FILE",	0X4C8,	-1);
	add_enum_member(id,"ERROR_CONNECTION_REFUSED",	0X4C9,	-1);
	add_enum_member(id,"ERROR_GRACEFUL_DISCONNECT",	0X4CA,	-1);
	add_enum_member(id,"ERROR_ADDRESS_ALREADY_ASSOCIATED",	0X4CB,	-1);
	add_enum_member(id,"ERROR_ADDRESS_NOT_ASSOCIATED",	0X4CC,	-1);
	add_enum_member(id,"ERROR_CONNECTION_INVALID",	0X4CD,	-1);
	add_enum_member(id,"ERROR_CONNECTION_ACTIVE",	0X4CE,	-1);
	add_enum_member(id,"ERROR_NETWORK_UNREACHABLE",	0X4CF,	-1);
	add_enum_member(id,"ERROR_HOST_UNREACHABLE",	0X4D0,	-1);
	add_enum_member(id,"ERROR_PROTOCOL_UNREACHABLE",	0X4D1,	-1);
	add_enum_member(id,"ERROR_PORT_UNREACHABLE",	0X4D2,	-1);
	add_enum_member(id,"ERROR_REQUEST_ABORTED",	0X4D3,	-1);
	add_enum_member(id,"ERROR_CONNECTION_ABORTED",	0X4D4,	-1);
	add_enum_member(id,"ERROR_RETRY",	0X4D5,	-1);
	add_enum_member(id,"ERROR_CONNECTION_COUNT_LIMIT",	0X4D6,	-1);
	add_enum_member(id,"ERROR_LOGIN_TIME_RESTRICTION",	0X4D7,	-1);
	add_enum_member(id,"ERROR_LOGIN_WKSTA_RESTRICTION",	0X4D8,	-1);
	add_enum_member(id,"ERROR_INCORRECT_ADDRESS",	0X4D9,	-1);
	add_enum_member(id,"ERROR_ALREADY_REGISTERED",	0X4DA,	-1);
	add_enum_member(id,"ERROR_SERVICE_NOT_FOUND",	0X4DB,	-1);
	add_enum_member(id,"ERROR_NOT_AUTHENTICATED",	0X4DC,	-1);
	add_enum_member(id,"ERROR_NOT_LOGGED_ON",	0X4DD,	-1);
	add_enum_member(id,"ERROR_CONTINUE",	0X4DE,	-1);
	add_enum_member(id,"ERROR_ALREADY_INITIALIZED",	0X4DF,	-1);
	add_enum_member(id,"ERROR_NO_MORE_DEVICES",	0X4E0,	-1);
	add_enum_member(id,"ERROR_NO_SUCH_SITE",	0X4E1,	-1);
	add_enum_member(id,"ERROR_DOMAIN_CONTROLLER_EXISTS",	0X4E2,	-1);
	add_enum_member(id,"ERROR_DS_NOT_INSTALLED",	0X4E3,	-1);
	add_enum_member(id,"ERROR_NOT_ALL_ASSIGNED",	0X514,	-1);
	add_enum_member(id,"ERROR_SOME_NOT_MAPPED",	0X515,	-1);
	add_enum_member(id,"ERROR_NO_QUOTAS_FOR_ACCOUNT",	0X516,	-1);
	add_enum_member(id,"ERROR_LOCAL_USER_SESSION_KEY",	0X517,	-1);
	add_enum_member(id,"ERROR_NULL_LM_PASSWORD",	0X518,	-1);
	add_enum_member(id,"ERROR_UNKNOWN_REVISION",	0X519,	-1);
	add_enum_member(id,"ERROR_REVISION_MISMATCH",	0X51A,	-1);
	add_enum_member(id,"ERROR_INVALID_OWNER",	0X51B,	-1);
	add_enum_member(id,"ERROR_INVALID_PRIMARY_GROUP",	0X51C,	-1);
	add_enum_member(id,"ERROR_NO_IMPERSONATION_TOKEN",	0X51D,	-1);
	add_enum_member(id,"ERROR_CANT_DISABLE_MANDATORY",	0X51E,	-1);
	add_enum_member(id,"ERROR_NO_LOGON_SERVERS",	0X51F,	-1);
	add_enum_member(id,"ERROR_NO_SUCH_LOGON_SESSION",	0X520,	-1);
	add_enum_member(id,"ERROR_NO_SUCH_PRIVILEGE",	0X521,	-1);
	add_enum_member(id,"ERROR_PRIVILEGE_NOT_HELD",	0X522,	-1);
	add_enum_member(id,"ERROR_INVALID_ACCOUNT_NAME",	0X523,	-1);
	add_enum_member(id,"ERROR_USER_EXISTS",	0X524,	-1);
	add_enum_member(id,"ERROR_NO_SUCH_USER",	0X525,	-1);
	add_enum_member(id,"ERROR_GROUP_EXISTS",	0X526,	-1);
	add_enum_member(id,"ERROR_NO_SUCH_GROUP",	0X527,	-1);
	add_enum_member(id,"ERROR_MEMBER_IN_GROUP",	0X528,	-1);
	add_enum_member(id,"ERROR_MEMBER_NOT_IN_GROUP",	0X529,	-1);
	add_enum_member(id,"ERROR_LAST_ADMIN",	0X52A,	-1);
	add_enum_member(id,"ERROR_WRONG_PASSWORD",	0X52B,	-1);
	add_enum_member(id,"ERROR_ILL_FORMED_PASSWORD",	0X52C,	-1);
	add_enum_member(id,"ERROR_PASSWORD_RESTRICTION",	0X52D,	-1);
	add_enum_member(id,"ERROR_LOGON_FAILURE",	0X52E,	-1);
	add_enum_member(id,"ERROR_ACCOUNT_RESTRICTION",	0X52F,	-1);
	add_enum_member(id,"ERROR_INVALID_LOGON_HOURS",	0X530,	-1);
	add_enum_member(id,"ERROR_INVALID_WORKSTATION",	0X531,	-1);
	add_enum_member(id,"ERROR_PASSWORD_EXPIRED",	0X532,	-1);
	add_enum_member(id,"ERROR_ACCOUNT_DISABLED",	0X533,	-1);
	add_enum_member(id,"ERROR_NONE_MAPPED",	0X534,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_LUIDS_REQUESTED",	0X535,	-1);
	add_enum_member(id,"ERROR_LUIDS_EXHAUSTED",	0X536,	-1);
	add_enum_member(id,"ERROR_INVALID_SUB_AUTHORITY",	0X537,	-1);
	add_enum_member(id,"ERROR_INVALID_ACL",	0X538,	-1);
	add_enum_member(id,"ERROR_INVALID_SID",	0X539,	-1);
	add_enum_member(id,"ERROR_INVALID_SECURITY_DESCR",	0X53A,	-1);
	add_enum_member(id,"ERROR_BAD_INHERITANCE_ACL",	0X53C,	-1);
	add_enum_member(id,"ERROR_SERVER_DISABLED",	0X53D,	-1);
	add_enum_member(id,"ERROR_SERVER_NOT_DISABLED",	0X53E,	-1);
	add_enum_member(id,"ERROR_INVALID_ID_AUTHORITY",	0X53F,	-1);
	add_enum_member(id,"ERROR_ALLOTTED_SPACE_EXCEEDED",	0X540,	-1);
	add_enum_member(id,"ERROR_INVALID_GROUP_ATTRIBUTES",	0X541,	-1);
	add_enum_member(id,"ERROR_BAD_IMPERSONATION_LEVEL",	0X542,	-1);
	add_enum_member(id,"ERROR_CANT_OPEN_ANONYMOUS",	0X543,	-1);
	add_enum_member(id,"ERROR_BAD_VALIDATION_CLASS",	0X544,	-1);
	add_enum_member(id,"ERROR_BAD_TOKEN_TYPE",	0X545,	-1);
	add_enum_member(id,"ERROR_NO_SECURITY_ON_OBJECT",	0X546,	-1);
	add_enum_member(id,"ERROR_CANT_ACCESS_DOMAIN_INFO",	0X547,	-1);
	add_enum_member(id,"ERROR_INVALID_SERVER_STATE",	0X548,	-1);
	add_enum_member(id,"ERROR_INVALID_DOMAIN_STATE",	0X549,	-1);
	add_enum_member(id,"ERROR_INVALID_DOMAIN_ROLE",	0X54A,	-1);
	add_enum_member(id,"ERROR_NO_SUCH_DOMAIN",	0X54B,	-1);
	add_enum_member(id,"ERROR_DOMAIN_EXISTS",	0X54C,	-1);
	add_enum_member(id,"ERROR_DOMAIN_LIMIT_EXCEEDED",	0X54D,	-1);
	add_enum_member(id,"ERROR_INTERNAL_DB_CORRUPTION",	0X54E,	-1);
	add_enum_member(id,"ERROR_INTERNAL_ERROR",	0X54F,	-1);
	add_enum_member(id,"ERROR_GENERIC_NOT_MAPPED",	0X550,	-1);
	add_enum_member(id,"ERROR_BAD_DESCRIPTOR_FORMAT",	0X551,	-1);
	add_enum_member(id,"ERROR_NOT_LOGON_PROCESS",	0X552,	-1);
	add_enum_member(id,"ERROR_LOGON_SESSION_EXISTS",	0X553,	-1);
	add_enum_member(id,"ERROR_NO_SUCH_PACKAGE",	0X554,	-1);
	add_enum_member(id,"ERROR_BAD_LOGON_SESSION_STATE",	0X555,	-1);
	add_enum_member(id,"ERROR_LOGON_SESSION_COLLISION",	0X556,	-1);
	add_enum_member(id,"ERROR_INVALID_LOGON_TYPE",	0X557,	-1);
	add_enum_member(id,"ERROR_CANNOT_IMPERSONATE",	0X558,	-1);
	add_enum_member(id,"ERROR_RXACT_INVALID_STATE",	0X559,	-1);
	add_enum_member(id,"ERROR_RXACT_COMMIT_FAILURE",	0X55A,	-1);
	add_enum_member(id,"ERROR_SPECIAL_ACCOUNT",	0X55B,	-1);
	add_enum_member(id,"ERROR_SPECIAL_GROUP",	0X55C,	-1);
	add_enum_member(id,"ERROR_SPECIAL_USER",	0X55D,	-1);
	add_enum_member(id,"ERROR_MEMBERS_PRIMARY_GROUP",	0X55E,	-1);
	add_enum_member(id,"ERROR_TOKEN_ALREADY_IN_USE",	0X55F,	-1);
	add_enum_member(id,"ERROR_NO_SUCH_ALIAS",	0X560,	-1);
	add_enum_member(id,"ERROR_MEMBER_NOT_IN_ALIAS",	0X561,	-1);
	add_enum_member(id,"ERROR_MEMBER_IN_ALIAS",	0X562,	-1);
	add_enum_member(id,"ERROR_ALIAS_EXISTS",	0X563,	-1);
	add_enum_member(id,"ERROR_LOGON_NOT_GRANTED",	0X564,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_SECRETS",	0X565,	-1);
	add_enum_member(id,"ERROR_SECRET_TOO_LONG",	0X566,	-1);
	add_enum_member(id,"ERROR_INTERNAL_DB_ERROR",	0X567,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_CONTEXT_IDS",	0X568,	-1);
	add_enum_member(id,"ERROR_LOGON_TYPE_NOT_GRANTED",	0X569,	-1);
	add_enum_member(id,"ERROR_NT_CROSS_ENCRYPTION_REQUIRED",	0X56A,	-1);
	add_enum_member(id,"ERROR_NO_SUCH_MEMBER",	0X56B,	-1);
	add_enum_member(id,"ERROR_INVALID_MEMBER",	0X56C,	-1);
	add_enum_member(id,"ERROR_TOO_MANY_SIDS",	0X56D,	-1);
	add_enum_member(id,"ERROR_LM_CROSS_ENCRYPTION_REQUIRED",	0X56E,	-1);
	add_enum_member(id,"ERROR_NO_INHERITANCE",	0X56F,	-1);
	add_enum_member(id,"ERROR_FILE_CORRUPT",	0X570,	-1);
	add_enum_member(id,"ERROR_DISK_CORRUPT",	0X571,	-1);
	add_enum_member(id,"ERROR_NO_USER_SESSION_KEY",	0X572,	-1);
	add_enum_member(id,"ERROR_LICENSE_QUOTA_EXCEEDED",	0X573,	-1);
	add_enum_member(id,"ERROR_INVALID_WINDOW_HANDLE",	0X578,	-1);
	add_enum_member(id,"ERROR_INVALID_MENU_HANDLE",	0X579,	-1);
	add_enum_member(id,"ERROR_INVALID_CURSOR_HANDLE",	0X57A,	-1);
	add_enum_member(id,"ERROR_INVALID_ACCEL_HANDLE",	0X57B,	-1);
	add_enum_member(id,"ERROR_INVALID_HOOK_HANDLE",	0X57C,	-1);
	add_enum_member(id,"ERROR_INVALID_DWP_HANDLE",	0X57D,	-1);
	add_enum_member(id,"ERROR_TLW_WITH_WSCHILD",	0X57E,	-1);
	add_enum_member(id,"ERROR_CANNOT_FIND_WND_CLASS",	0X57F,	-1);
	add_enum_member(id,"ERROR_WINDOW_OF_OTHER_THREAD",	0X580,	-1);
	add_enum_member(id,"ERROR_HOTKEY_ALREADY_REGISTERED",	0X581,	-1);
	add_enum_member(id,"ERROR_CLASS_ALREADY_EXISTS",	0X582,	-1);
	add_enum_member(id,"ERROR_CLASS_DOES_NOT_EXIST",	0X583,	-1);
	add_enum_member(id,"ERROR_CLASS_HAS_WINDOWS",	0X584,	-1);
	add_enum_member(id,"ERROR_INVALID_INDEX",	0X585,	-1);
	add_enum_member(id,"ERROR_INVALID_ICON_HANDLE",	0X586,	-1);
	add_enum_member(id,"ERROR_PRIVATE_DIALOG_INDEX",	0X587,	-1);
	add_enum_member(id,"ERROR_LISTBOX_ID_NOT_FOUND",	0X588,	-1);
	add_enum_member(id,"ERROR_NO_WILDCARD_CHARACTERS",	0X589,	-1);
	add_enum_member(id,"ERROR_CLIPBOARD_NOT_OPEN",	0X58A,	-1);
	add_enum_member(id,"ERROR_HOTKEY_NOT_REGISTERED",	0X58B,	-1);
	add_enum_member(id,"ERROR_WINDOW_NOT_DIALOG",	0X58C,	-1);
	add_enum_member(id,"ERROR_CONTROL_ID_NOT_FOUND",	0X58D,	-1);
	add_enum_member(id,"ERROR_INVALID_COMBOBOX_MESSAGE",	0X58E,	-1);
	add_enum_member(id,"ERROR_WINDOW_NOT_COMBOBOX",	0X58F,	-1);
	add_enum_member(id,"ERROR_INVALID_EDIT_HEIGHT",	0X590,	-1);
	add_enum_member(id,"ERROR_DC_NOT_FOUND",	0X591,	-1);
	add_enum_member(id,"ERROR_INVALID_HOOK_FILTER",	0X592,	-1);
	add_enum_member(id,"ERROR_INVALID_FILTER_PROC",	0X593,	-1);
	add_enum_member(id,"ERROR_HOOK_NEEDS_HMOD",	0X594,	-1);
	add_enum_member(id,"ERROR_GLOBAL_ONLY_HOOK",	0X595,	-1);
	add_enum_member(id,"ERROR_JOURNAL_HOOK_SET",	0X596,	-1);
	add_enum_member(id,"ERROR_HOOK_NOT_INSTALLED",	0X597,	-1);
	add_enum_member(id,"ERROR_INVALID_LB_MESSAGE",	0X598,	-1);
	add_enum_member(id,"ERROR_SETCOUNT_ON_BAD_LB",	0X599,	-1);
	add_enum_member(id,"ERROR_LB_WITHOUT_TABSTOPS",	0X59A,	-1);
	add_enum_member(id,"ERROR_DESTROY_OBJECT_OF_OTHER_THREAD",	0X59B,	-1);
	add_enum_member(id,"ERROR_CHILD_WINDOW_MENU",	0X59C,	-1);
	add_enum_member(id,"ERROR_NO_SYSTEM_MENU",	0X59D,	-1);
	add_enum_member(id,"ERROR_INVALID_MSGBOX_STYLE",	0X59E,	-1);
	add_enum_member(id,"ERROR_INVALID_SPI_VALUE",	0X59F,	-1);
	add_enum_member(id,"ERROR_SCREEN_ALREADY_LOCKED",	0X5A0,	-1);
	add_enum_member(id,"ERROR_HWNDS_HAVE_DIFF_PARENT",	0X5A1,	-1);
	add_enum_member(id,"ERROR_NOT_CHILD_WINDOW",	0X5A2,	-1);
	add_enum_member(id,"ERROR_INVALID_GW_COMMAND",	0X5A3,	-1);
	add_enum_member(id,"ERROR_INVALID_THREAD_ID",	0X5A4,	-1);
	add_enum_member(id,"ERROR_NON_MDICHILD_WINDOW",	0X5A5,	-1);
	add_enum_member(id,"ERROR_POPUP_ALREADY_ACTIVE",	0X5A6,	-1);
	add_enum_member(id,"ERROR_NO_SCROLLBARS",	0X5A7,	-1);
	add_enum_member(id,"ERROR_INVALID_SCROLLBAR_RANGE",	0X5A8,	-1);
	add_enum_member(id,"ERROR_INVALID_SHOWWIN_COMMAND",	0X5A9,	-1);
	add_enum_member(id,"ERROR_NO_SYSTEM_RESOURCES",	0X5AA,	-1);
	add_enum_member(id,"ERROR_NONPAGED_SYSTEM_RESOURCES",	0X5AB,	-1);
	add_enum_member(id,"ERROR_PAGED_SYSTEM_RESOURCES",	0X5AC,	-1);
	add_enum_member(id,"ERROR_WORKING_SET_QUOTA",	0X5AD,	-1);
	add_enum_member(id,"ERROR_PAGEFILE_QUOTA",	0X5AE,	-1);
	add_enum_member(id,"ERROR_COMMITMENT_LIMIT",	0X5AF,	-1);
	add_enum_member(id,"ERROR_MENU_ITEM_NOT_FOUND",	0X5B0,	-1);
	add_enum_member(id,"ERROR_INVALID_KEYBOARD_HANDLE",	0X5B1,	-1);
	add_enum_member(id,"ERROR_HOOK_TYPE_NOT_ALLOWED",	0X5B2,	-1);
	add_enum_member(id,"ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION",	0X5B3,	-1);
	add_enum_member(id,"ERROR_TIMEOUT",	0X5B4,	-1);
	add_enum_member(id,"ERROR_INVALID_MONITOR_HANDLE",	0X5B5,	-1);
	add_enum_member(id,"ERROR_EVENTLOG_FILE_CORRUPT",	0X5DC,	-1);
	add_enum_member(id,"ERROR_EVENTLOG_CANT_START",	0X5DD,	-1);
	add_enum_member(id,"ERROR_LOG_FILE_FULL",	0X5DE,	-1);
	add_enum_member(id,"ERROR_EVENTLOG_FILE_CHANGED",	0X5DF,	-1);
	add_enum_member(id,"ERROR_INSTALL_SERVICE",	0X641,	-1);
	add_enum_member(id,"ERROR_INSTALL_USEREXIT",	0X642,	-1);
	add_enum_member(id,"ERROR_INSTALL_FAILURE",	0X643,	-1);
	add_enum_member(id,"ERROR_INSTALL_SUSPEND",	0X644,	-1);
	add_enum_member(id,"ERROR_UNKNOWN_PRODUCT",	0X645,	-1);
	add_enum_member(id,"ERROR_UNKNOWN_FEATURE",	0X646,	-1);
	add_enum_member(id,"ERROR_UNKNOWN_COMPONENT",	0X647,	-1);
	add_enum_member(id,"ERROR_UNKNOWN_PROPERTY",	0X648,	-1);
	add_enum_member(id,"ERROR_INVALID_HANDLE_STATE",	0X649,	-1);
	add_enum_member(id,"ERROR_BAD_CONFIGURATION",	0X64A,	-1);
	add_enum_member(id,"ERROR_INDEX_ABSENT",	0X64B,	-1);
	add_enum_member(id,"ERROR_INSTALL_SOURCE_ABSENT",	0X64C,	-1);
	add_enum_member(id,"ERROR_BAD_DATABASE_VERSION",	0X64D,	-1);
	add_enum_member(id,"ERROR_PRODUCT_UNINSTALLED",	0X64E,	-1);
	add_enum_member(id,"ERROR_BAD_QUERY_SYNTAX",	0X64F,	-1);
	add_enum_member(id,"ERROR_INVALID_FIELD",	0X650,	-1);
	add_enum_member(id,"RPC_S_INVALID_STRING_BINDING",	0X6A4,	-1);
	add_enum_member(id,"RPC_S_WRONG_KIND_OF_BINDING",	0X6A5,	-1);
	add_enum_member(id,"RPC_S_INVALID_BINDING",	0X6A6,	-1);
	add_enum_member(id,"RPC_S_PROTSEQ_NOT_SUPPORTED",	0X6A7,	-1);
	add_enum_member(id,"RPC_S_INVALID_RPC_PROTSEQ",	0X6A8,	-1);
	add_enum_member(id,"RPC_S_INVALID_STRING_UUID",	0X6A9,	-1);
	add_enum_member(id,"RPC_S_INVALID_ENDPOINT_FORMAT",	0X6AA,	-1);
	add_enum_member(id,"RPC_S_INVALID_NET_ADDR",	0X6AB,	-1);
	add_enum_member(id,"RPC_S_NO_ENDPOINT_FOUND",	0X6AC,	-1);
	add_enum_member(id,"RPC_S_INVALID_TIMEOUT",	0X6AD,	-1);
	add_enum_member(id,"RPC_S_OBJECT_NOT_FOUND",	0X6AE,	-1);
	add_enum_member(id,"RPC_S_ALREADY_REGISTERED",	0X6AF,	-1);
	add_enum_member(id,"RPC_S_TYPE_ALREADY_REGISTERED",	0X6B0,	-1);
	add_enum_member(id,"RPC_S_ALREADY_LISTENING",	0X6B1,	-1);
	add_enum_member(id,"RPC_S_NO_PROTSEQS_REGISTERED",	0X6B2,	-1);
	add_enum_member(id,"RPC_S_NOT_LISTENING",	0X6B3,	-1);
	add_enum_member(id,"RPC_S_UNKNOWN_MGR_TYPE",	0X6B4,	-1);
	add_enum_member(id,"RPC_S_UNKNOWN_IF",	0X6B5,	-1);
	add_enum_member(id,"RPC_S_NO_BINDINGS",	0X6B6,	-1);
	add_enum_member(id,"RPC_S_NO_PROTSEQS",	0X6B7,	-1);
	add_enum_member(id,"RPC_S_CANT_CREATE_ENDPOINT",	0X6B8,	-1);
	add_enum_member(id,"RPC_S_OUT_OF_RESOURCES",	0X6B9,	-1);
	add_enum_member(id,"RPC_S_SERVER_UNAVAILABLE",	0X6BA,	-1);
	add_enum_member(id,"RPC_S_SERVER_TOO_BUSY",	0X6BB,	-1);
	add_enum_member(id,"RPC_S_INVALID_NETWORK_OPTIONS",	0X6BC,	-1);
	add_enum_member(id,"RPC_S_NO_CALL_ACTIVE",	0X6BD,	-1);
	add_enum_member(id,"RPC_S_CALL_FAILED",	0X6BE,	-1);
	add_enum_member(id,"RPC_S_CALL_FAILED_DNE",	0X6BF,	-1);
	add_enum_member(id,"RPC_S_PROTOCOL_ERROR",	0X6C0,	-1);
	add_enum_member(id,"RPC_S_UNSUPPORTED_TRANS_SYN",	0X6C2,	-1);
	add_enum_member(id,"RPC_S_UNSUPPORTED_TYPE",	0X6C4,	-1);
	add_enum_member(id,"RPC_S_INVALID_TAG",	0X6C5,	-1);
	add_enum_member(id,"RPC_S_INVALID_BOUND",	0X6C6,	-1);
	add_enum_member(id,"RPC_S_NO_ENTRY_NAME",	0X6C7,	-1);
	add_enum_member(id,"RPC_S_INVALID_NAME_SYNTAX",	0X6C8,	-1);
	add_enum_member(id,"RPC_S_UNSUPPORTED_NAME_SYNTAX",	0X6C9,	-1);
	add_enum_member(id,"RPC_S_UUID_NO_ADDRESS",	0X6CB,	-1);
	add_enum_member(id,"RPC_S_DUPLICATE_ENDPOINT",	0X6CC,	-1);
	add_enum_member(id,"RPC_S_UNKNOWN_AUTHN_TYPE",	0X6CD,	-1);
	add_enum_member(id,"RPC_S_MAX_CALLS_TOO_SMALL",	0X6CE,	-1);
	add_enum_member(id,"RPC_S_STRING_TOO_LONG",	0X6CF,	-1);
	add_enum_member(id,"RPC_S_PROTSEQ_NOT_FOUND",	0X6D0,	-1);
	add_enum_member(id,"RPC_S_PROCNUM_OUT_OF_RANGE",	0X6D1,	-1);
	add_enum_member(id,"RPC_S_BINDING_HAS_NO_AUTH",	0X6D2,	-1);
	add_enum_member(id,"RPC_S_UNKNOWN_AUTHN_SERVICE",	0X6D3,	-1);
	add_enum_member(id,"RPC_S_UNKNOWN_AUTHN_LEVEL",	0X6D4,	-1);
	add_enum_member(id,"RPC_S_INVALID_AUTH_IDENTITY",	0X6D5,	-1);
	add_enum_member(id,"RPC_S_UNKNOWN_AUTHZ_SERVICE",	0X6D6,	-1);
	add_enum_member(id,"EPT_S_INVALID_ENTRY",	0X6D7,	-1);
	add_enum_member(id,"EPT_S_CANT_PERFORM_OP",	0X6D8,	-1);
	add_enum_member(id,"EPT_S_NOT_REGISTERED",	0X6D9,	-1);
	add_enum_member(id,"RPC_S_NOTHING_TO_EXPORT",	0X6DA,	-1);
	add_enum_member(id,"RPC_S_INCOMPLETE_NAME",	0X6DB,	-1);
	add_enum_member(id,"RPC_S_INVALID_VERS_OPTION",	0X6DC,	-1);
	add_enum_member(id,"RPC_S_NO_MORE_MEMBERS",	0X6DD,	-1);
	add_enum_member(id,"RPC_S_NOT_ALL_OBJS_UNEXPORTED",	0X6DE,	-1);
	add_enum_member(id,"RPC_S_INTERFACE_NOT_FOUND",	0X6DF,	-1);
	add_enum_member(id,"RPC_S_ENTRY_ALREADY_EXISTS",	0X6E0,	-1);
	add_enum_member(id,"RPC_S_ENTRY_NOT_FOUND",	0X6E1,	-1);
	add_enum_member(id,"RPC_S_NAME_SERVICE_UNAVAILABLE",	0X6E2,	-1);
	add_enum_member(id,"RPC_S_INVALID_NAF_ID",	0X6E3,	-1);
	add_enum_member(id,"RPC_S_CANNOT_SUPPORT",	0X6E4,	-1);
	add_enum_member(id,"RPC_S_NO_CONTEXT_AVAILABLE",	0X6E5,	-1);
	add_enum_member(id,"RPC_S_INTERNAL_ERROR",	0X6E6,	-1);
	add_enum_member(id,"RPC_S_ZERO_DIVIDE",	0X6E7,	-1);
	add_enum_member(id,"RPC_S_ADDRESS_ERROR",	0X6E8,	-1);
	add_enum_member(id,"RPC_S_FP_DIV_ZERO",	0X6E9,	-1);
	add_enum_member(id,"RPC_S_FP_UNDERFLOW",	0X6EA,	-1);
	add_enum_member(id,"RPC_S_FP_OVERFLOW",	0X6EB,	-1);
	add_enum_member(id,"RPC_X_NO_MORE_ENTRIES",	0X6EC,	-1);
	add_enum_member(id,"RPC_X_SS_CHAR_TRANS_OPEN_FAIL",	0X6ED,	-1);
	add_enum_member(id,"RPC_X_SS_CHAR_TRANS_SHORT_FILE",	0X6EE,	-1);
	add_enum_member(id,"RPC_X_SS_IN_NULL_CONTEXT",	0X6EF,	-1);
	add_enum_member(id,"RPC_X_SS_CONTEXT_DAMAGED",	0X6F1,	-1);
	add_enum_member(id,"RPC_X_SS_HANDLES_MISMATCH",	0X6F2,	-1);
	add_enum_member(id,"RPC_X_SS_CANNOT_GET_CALL_HANDLE",	0X6F3,	-1);
	add_enum_member(id,"RPC_X_NULL_REF_POINTER",	0X6F4,	-1);
	add_enum_member(id,"RPC_X_ENUM_VALUE_OUT_OF_RANGE",	0X6F5,	-1);
	add_enum_member(id,"RPC_X_BYTE_COUNT_TOO_SMALL",	0X6F6,	-1);
	add_enum_member(id,"RPC_X_BAD_STUB_DATA",	0X6F7,	-1);
	add_enum_member(id,"ERROR_INVALID_USER_BUFFER",	0X6F8,	-1);
	add_enum_member(id,"ERROR_UNRECOGNIZED_MEDIA",	0X6F9,	-1);
	add_enum_member(id,"ERROR_NO_TRUST_LSA_SECRET",	0X6FA,	-1);
	add_enum_member(id,"ERROR_NO_TRUST_SAM_ACCOUNT",	0X6FB,	-1);
	add_enum_member(id,"ERROR_TRUSTED_DOMAIN_FAILURE",	0X6FC,	-1);
	add_enum_member(id,"ERROR_TRUSTED_RELATIONSHIP_FAILURE",	0X6FD,	-1);
	add_enum_member(id,"ERROR_TRUST_FAILURE",	0X6FE,	-1);
	add_enum_member(id,"RPC_S_CALL_IN_PROGRESS",	0X6FF,	-1);
	add_enum_member(id,"ERROR_NETLOGON_NOT_STARTED",	0X700,	-1);
	add_enum_member(id,"ERROR_ACCOUNT_EXPIRED",	0X701,	-1);
	add_enum_member(id,"ERROR_REDIRECTOR_HAS_OPEN_HANDLES",	0X702,	-1);
	add_enum_member(id,"ERROR_PRINTER_DRIVER_ALREADY_INSTALLED",	0X703,	-1);
	add_enum_member(id,"ERROR_UNKNOWN_PORT",	0X704,	-1);
	add_enum_member(id,"ERROR_UNKNOWN_PRINTER_DRIVER",	0X705,	-1);
	add_enum_member(id,"ERROR_UNKNOWN_PRINTPROCESSOR",	0X706,	-1);
	add_enum_member(id,"ERROR_INVALID_SEPARATOR_FILE",	0X707,	-1);
	add_enum_member(id,"ERROR_INVALID_PRIORITY",	0X708,	-1);
	add_enum_member(id,"ERROR_INVALID_PRINTER_NAME",	0X709,	-1);
	add_enum_member(id,"ERROR_PRINTER_ALREADY_EXISTS",	0X70A,	-1);
	add_enum_member(id,"ERROR_INVALID_PRINTER_COMMAND",	0X70B,	-1);
	add_enum_member(id,"ERROR_INVALID_DATATYPE",	0X70C,	-1);
	add_enum_member(id,"ERROR_INVALID_ENVIRONMENT",	0X70D,	-1);
	add_enum_member(id,"RPC_S_NO_MORE_BINDINGS",	0X70E,	-1);
	add_enum_member(id,"ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT",	0X70F,	-1);
	add_enum_member(id,"ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT",	0X710,	-1);
	add_enum_member(id,"ERROR_NOLOGON_SERVER_TRUST_ACCOUNT",	0X711,	-1);
	add_enum_member(id,"ERROR_DOMAIN_TRUST_INCONSISTENT",	0X712,	-1);
	add_enum_member(id,"ERROR_SERVER_HAS_OPEN_HANDLES",	0X713,	-1);
	add_enum_member(id,"ERROR_RESOURCE_DATA_NOT_FOUND",	0X714,	-1);
	add_enum_member(id,"ERROR_RESOURCE_TYPE_NOT_FOUND",	0X715,	-1);
	add_enum_member(id,"ERROR_RESOURCE_NAME_NOT_FOUND",	0X716,	-1);
	add_enum_member(id,"ERROR_RESOURCE_LANG_NOT_FOUND",	0X717,	-1);
	add_enum_member(id,"ERROR_NOT_ENOUGH_QUOTA",	0X718,	-1);
	add_enum_member(id,"RPC_S_NO_INTERFACES",	0X719,	-1);
	add_enum_member(id,"RPC_S_CALL_CANCELLED",	0X71A,	-1);
	add_enum_member(id,"RPC_S_BINDING_INCOMPLETE",	0X71B,	-1);
	add_enum_member(id,"RPC_S_COMM_FAILURE",	0X71C,	-1);
	add_enum_member(id,"RPC_S_UNSUPPORTED_AUTHN_LEVEL",	0X71D,	-1);
	add_enum_member(id,"RPC_S_NO_PRINC_NAME",	0X71E,	-1);
	add_enum_member(id,"RPC_S_NOT_RPC_ERROR",	0X71F,	-1);
	add_enum_member(id,"RPC_S_UUID_LOCAL_ONLY",	0X720,	-1);
	add_enum_member(id,"RPC_S_SEC_PKG_ERROR",	0X721,	-1);
	add_enum_member(id,"RPC_S_NOT_CANCELLED",	0X722,	-1);
	add_enum_member(id,"RPC_X_INVALID_ES_ACTION",	0X723,	-1);
	add_enum_member(id,"RPC_X_WRONG_ES_VERSION",	0X724,	-1);
	add_enum_member(id,"RPC_X_WRONG_STUB_VERSION",	0X725,	-1);
	add_enum_member(id,"RPC_X_INVALID_PIPE_OBJECT",	0X726,	-1);
	add_enum_member(id,"RPC_X_WRONG_PIPE_ORDER",	0X727,	-1);
	add_enum_member(id,"RPC_X_WRONG_PIPE_VERSION",	0X728,	-1);
	add_enum_member(id,"RPC_S_GROUP_MEMBER_NOT_FOUND",	0X76A,	-1);
	add_enum_member(id,"EPT_S_CANT_CREATE",	0X76B,	-1);
	add_enum_member(id,"RPC_S_INVALID_OBJECT",	0X76C,	-1);
	add_enum_member(id,"ERROR_INVALID_TIME",	0X76D,	-1);
	add_enum_member(id,"ERROR_INVALID_FORM_NAME",	0X76E,	-1);
	add_enum_member(id,"ERROR_INVALID_FORM_SIZE",	0X76F,	-1);
	add_enum_member(id,"ERROR_ALREADY_WAITING",	0X770,	-1);
	add_enum_member(id,"ERROR_PRINTER_DELETED",	0X771,	-1);
	add_enum_member(id,"ERROR_INVALID_PRINTER_STATE",	0X772,	-1);
	add_enum_member(id,"ERROR_PASSWORD_MUST_CHANGE",	0X773,	-1);
	add_enum_member(id,"ERROR_DOMAIN_CONTROLLER_NOT_FOUND",	0X774,	-1);
	add_enum_member(id,"ERROR_ACCOUNT_LOCKED_OUT",	0X775,	-1);
	add_enum_member(id,"OR_INVALID_OXID",	0X776,	-1);
	add_enum_member(id,"OR_INVALID_OID",	0X777,	-1);
	add_enum_member(id,"OR_INVALID_SET",	0X778,	-1);
	add_enum_member(id,"RPC_S_SEND_INCOMPLETE",	0X779,	-1);
	add_enum_member(id,"RPC_S_INVALID_ASYNC_HANDLE",	0X77A,	-1);
	add_enum_member(id,"RPC_S_INVALID_ASYNC_CALL",	0X77B,	-1);
	add_enum_member(id,"RPC_X_PIPE_CLOSED",	0X77C,	-1);
	add_enum_member(id,"RPC_X_PIPE_DISCIPLINE_ERROR",	0X77D,	-1);
	add_enum_member(id,"RPC_X_PIPE_EMPTY",	0X77E,	-1);
	add_enum_member(id,"ERROR_NO_SITENAME",	0X77F,	-1);
	add_enum_member(id,"ERROR_CANT_ACCESS_FILE",	0X780,	-1);
	add_enum_member(id,"ERROR_CANT_RESOLVE_FILENAME",	0X781,	-1);
	add_enum_member(id,"ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY",	0X782,	-1);
	add_enum_member(id,"ERROR_DS_NO_ATTRIBUTE_OR_VALUE",	0X783,	-1);
	add_enum_member(id,"ERROR_DS_INVALID_ATTRIBUTE_SYNTAX",	0X784,	-1);
	add_enum_member(id,"ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED",	0X785,	-1);
	add_enum_member(id,"ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS",	0X786,	-1);
	add_enum_member(id,"ERROR_DS_BUSY",	0X787,	-1);
	add_enum_member(id,"ERROR_DS_UNAVAILABLE",	0X788,	-1);
	add_enum_member(id,"ERROR_DS_NO_RIDS_ALLOCATED",	0X789,	-1);
	add_enum_member(id,"ERROR_DS_NO_MORE_RIDS",	0X78A,	-1);
	add_enum_member(id,"ERROR_DS_INCORRECT_ROLE_OWNER",	0X78B,	-1);
	add_enum_member(id,"ERROR_DS_RIDMGR_INIT_ERROR",	0X78C,	-1);
	add_enum_member(id,"ERROR_DS_OBJ_CLASS_VIOLATION",	0X78D,	-1);
	add_enum_member(id,"ERROR_DS_CANT_ON_NON_LEAF",	0X78E,	-1);
	add_enum_member(id,"ERROR_DS_CANT_ON_RDN",	0X78F,	-1);
	add_enum_member(id,"ERROR_DS_CANT_MOD_OBJ_CLASS",	0X790,	-1);
	add_enum_member(id,"ERROR_DS_CROSS_DOM_MOVE_ERROR",	0X791,	-1);
	add_enum_member(id,"ERROR_DS_GC_NOT_AVAILABLE",	0X792,	-1);
	add_enum_member(id,"ERROR_INVALID_PIXEL_FORMAT",	0X7D0,	-1);
	add_enum_member(id,"ERROR_BAD_DRIVER",	0X7D1,	-1);
	add_enum_member(id,"ERROR_INVALID_WINDOW_STYLE",	0X7D2,	-1);
	add_enum_member(id,"ERROR_METAFILE_NOT_SUPPORTED",	0X7D3,	-1);
	add_enum_member(id,"ERROR_TRANSFORM_NOT_SUPPORTED",	0X7D4,	-1);
	add_enum_member(id,"ERROR_CLIPPING_NOT_SUPPORTED",	0X7D5,	-1);
	add_enum_member(id,"ERROR_CONNECTED_OTHER_PASSWORD",	0X83C,	-1);
	add_enum_member(id,"ERROR_BAD_USERNAME",	0X89A,	-1);
	add_enum_member(id,"ERROR_NOT_CONNECTED",	0X8CA,	-1);
	add_enum_member(id,"ERROR_INVALID_CMM",	0X8FC,	-1);
	add_enum_member(id,"ERROR_INVALID_PROFILE",	0X8FD,	-1);
	add_enum_member(id,"ERROR_TAG_NOT_FOUND",	0X8FE,	-1);
	add_enum_member(id,"ERROR_TAG_NOT_PRESENT",	0X8FF,	-1);
	add_enum_member(id,"ERROR_DUPLICATE_TAG",	0X900,	-1);
	add_enum_member(id,"ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE",	0X901,	-1);
	add_enum_member(id,"ERROR_PROFILE_NOT_FOUND",	0X902,	-1);
	add_enum_member(id,"ERROR_INVALID_COLORSPACE",	0X903,	-1);
	add_enum_member(id,"ERROR_ICM_NOT_ENABLED",	0X904,	-1);
	add_enum_member(id,"ERROR_DELETING_ICM_XFORM",	0X905,	-1);
	add_enum_member(id,"ERROR_INVALID_TRANSFORM",	0X906,	-1);
	add_enum_member(id,"ERROR_OPEN_FILES",	0X961,	-1);
	add_enum_member(id,"ERROR_ACTIVE_CONNECTIONS",	0X962,	-1);
	add_enum_member(id,"ERROR_DEVICE_IN_USE",	0X964,	-1);
	add_enum_member(id,"ERROR_UNKNOWN_PRINT_MONITOR",	0XBB8,	-1);
	add_enum_member(id,"ERROR_PRINTER_DRIVER_IN_USE",	0XBB9,	-1);
	add_enum_member(id,"ERROR_SPOOL_FILE_NOT_FOUND",	0XBBA,	-1);
	add_enum_member(id,"ERROR_SPL_NO_STARTDOC",	0XBBB,	-1);
	add_enum_member(id,"ERROR_SPL_NO_ADDJOB",	0XBBC,	-1);
	add_enum_member(id,"ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED",	0XBBD,	-1);
	add_enum_member(id,"ERROR_PRINT_MONITOR_ALREADY_INSTALLED",	0XBBE,	-1);
	add_enum_member(id,"ERROR_INVALID_PRINT_MONITOR",	0XBBF,	-1);
	add_enum_member(id,"ERROR_PRINT_MONITOR_IN_USE",	0XBC0,	-1);
	add_enum_member(id,"ERROR_PRINTER_HAS_JOBS_QUEUED",	0XBC1,	-1);
	add_enum_member(id,"ERROR_SUCCESS_REBOOT_REQUIRED",	0XBC2,	-1);
	add_enum_member(id,"ERROR_SUCCESS_RESTART_REQUIRED",	0XBC3,	-1);
	add_enum_member(id,"ERROR_WINS_INTERNAL",	0XFA0,	-1);
	add_enum_member(id,"ERROR_CAN_NOT_DEL_LOCAL_WINS",	0XFA1,	-1);
	add_enum_member(id,"ERROR_STATIC_INIT",	0XFA2,	-1);
	add_enum_member(id,"ERROR_INC_BACKUP",	0XFA3,	-1);
	add_enum_member(id,"ERROR_FULL_BACKUP",	0XFA4,	-1);
	add_enum_member(id,"ERROR_REC_NON_EXISTENT",	0XFA5,	-1);
	add_enum_member(id,"ERROR_RPL_NOT_ALLOWED",	0XFA6,	-1);
	add_enum_member(id,"ERROR_DHCP_ADDRESS_CONFLICT",	0X1004,	-1);
	add_enum_member(id,"ERROR_WMI_GUID_NOT_FOUND",	0X1068,	-1);
	add_enum_member(id,"ERROR_WMI_INSTANCE_NOT_FOUND",	0X1069,	-1);
	add_enum_member(id,"ERROR_WMI_ITEMID_NOT_FOUND",	0X106A,	-1);
	add_enum_member(id,"ERROR_WMI_TRY_AGAIN",	0X106B,	-1);
	add_enum_member(id,"ERROR_WMI_DP_NOT_FOUND",	0X106C,	-1);
	add_enum_member(id,"ERROR_WMI_UNRESOLVED_INSTANCE_REF",	0X106D,	-1);
	add_enum_member(id,"ERROR_WMI_ALREADY_ENABLED",	0X106E,	-1);
	add_enum_member(id,"ERROR_WMI_GUID_DISCONNECTED",	0X106F,	-1);
	add_enum_member(id,"ERROR_WMI_SERVER_UNAVAILABLE",	0X1070,	-1);
	add_enum_member(id,"ERROR_WMI_DP_FAILED",	0X1071,	-1);
	add_enum_member(id,"ERROR_WMI_INVALID_MOF",	0X1072,	-1);
	add_enum_member(id,"ERROR_WMI_INVALID_REGINFO",	0X1073,	-1);
	add_enum_member(id,"ERROR_INVALID_MEDIA",	0X10CC,	-1);
	add_enum_member(id,"ERROR_INVALID_LIBRARY",	0X10CD,	-1);
	add_enum_member(id,"ERROR_INVALID_MEDIA_POOL",	0X10CE,	-1);
	add_enum_member(id,"ERROR_DRIVE_MEDIA_MISMATCH",	0X10CF,	-1);
	add_enum_member(id,"ERROR_MEDIA_OFFLINE",	0X10D0,	-1);
	add_enum_member(id,"ERROR_LIBRARY_OFFLINE",	0X10D1,	-1);
	add_enum_member(id,"ERROR_EMPTY",	0X10D2,	-1);
	add_enum_member(id,"ERROR_NOT_EMPTY",	0X10D3,	-1);
	add_enum_member(id,"ERROR_MEDIA_UNAVAILABLE",	0X10D4,	-1);
	add_enum_member(id,"ERROR_RESOURCE_DISABLED",	0X10D5,	-1);
	add_enum_member(id,"ERROR_INVALID_CLEANER",	0X10D6,	-1);
	add_enum_member(id,"ERROR_UNABLE_TO_CLEAN",	0X10D7,	-1);
	add_enum_member(id,"ERROR_OBJECT_NOT_FOUND",	0X10D8,	-1);
	add_enum_member(id,"ERROR_DATABASE_FAILURE",	0X10D9,	-1);
	add_enum_member(id,"ERROR_DATABASE_FULL",	0X10DA,	-1);
	add_enum_member(id,"ERROR_MEDIA_INCOMPATIBLE",	0X10DB,	-1);
	add_enum_member(id,"ERROR_RESOURCE_NOT_PRESENT",	0X10DC,	-1);
	add_enum_member(id,"ERROR_INVALID_OPERATION",	0X10DD,	-1);
	add_enum_member(id,"ERROR_MEDIA_NOT_AVAILABLE",	0X10DE,	-1);
	add_enum_member(id,"ERROR_DEVICE_NOT_AVAILABLE",	0X10DF,	-1);
	add_enum_member(id,"ERROR_REQUEST_REFUSED",	0X10E0,	-1);
	add_enum_member(id,"ERROR_FILE_OFFLINE",	0X10FE,	-1);
	add_enum_member(id,"ERROR_REMOTE_STORAGE_NOT_ACTIVE",	0X10FF,	-1);
	add_enum_member(id,"ERROR_REMOTE_STORAGE_MEDIA_ERROR",	0X1100,	-1);
	add_enum_member(id,"ERROR_NOT_A_REPARSE_POINT",	0X1126,	-1);
	add_enum_member(id,"ERROR_REPARSE_ATTRIBUTE_CONFLICT",	0X1127,	-1);
	add_enum_member(id,"ERROR_DEPENDENT_RESOURCE_EXISTS",	0X1389,	-1);
	add_enum_member(id,"ERROR_DEPENDENCY_NOT_FOUND",	0X138A,	-1);
	add_enum_member(id,"ERROR_DEPENDENCY_ALREADY_EXISTS",	0X138B,	-1);
	add_enum_member(id,"ERROR_RESOURCE_NOT_ONLINE",	0X138C,	-1);
	add_enum_member(id,"ERROR_HOST_NODE_NOT_AVAILABLE",	0X138D,	-1);
	add_enum_member(id,"ERROR_RESOURCE_NOT_AVAILABLE",	0X138E,	-1);
	add_enum_member(id,"ERROR_RESOURCE_NOT_FOUND",	0X138F,	-1);
	add_enum_member(id,"ERROR_SHUTDOWN_CLUSTER",	0X1390,	-1);
	add_enum_member(id,"ERROR_CANT_EVICT_ACTIVE_NODE",	0X1391,	-1);
	add_enum_member(id,"ERROR_OBJECT_ALREADY_EXISTS",	0X1392,	-1);
	add_enum_member(id,"ERROR_OBJECT_IN_LIST",	0X1393,	-1);
	add_enum_member(id,"ERROR_GROUP_NOT_AVAILABLE",	0X1394,	-1);
	add_enum_member(id,"ERROR_GROUP_NOT_FOUND",	0X1395,	-1);
	add_enum_member(id,"ERROR_GROUP_NOT_ONLINE",	0X1396,	-1);
	add_enum_member(id,"ERROR_HOST_NODE_NOT_RESOURCE_OWNER",	0X1397,	-1);
	add_enum_member(id,"ERROR_HOST_NODE_NOT_GROUP_OWNER",	0X1398,	-1);
	add_enum_member(id,"ERROR_RESMON_CREATE_FAILED",	0X1399,	-1);
	add_enum_member(id,"ERROR_RESMON_ONLINE_FAILED",	0X139A,	-1);
	add_enum_member(id,"ERROR_RESOURCE_ONLINE",	0X139B,	-1);
	add_enum_member(id,"ERROR_QUORUM_RESOURCE",	0X139C,	-1);
	add_enum_member(id,"ERROR_NOT_QUORUM_CAPABLE",	0X139D,	-1);
	add_enum_member(id,"ERROR_CLUSTER_SHUTTING_DOWN",	0X139E,	-1);
	add_enum_member(id,"ERROR_INVALID_STATE",	0X139F,	-1);
	add_enum_member(id,"ERROR_RESOURCE_PROPERTIES_STORED",	0X13A0,	-1);
	add_enum_member(id,"ERROR_NOT_QUORUM_CLASS",	0X13A1,	-1);
	add_enum_member(id,"ERROR_CORE_RESOURCE",	0X13A2,	-1);
	add_enum_member(id,"ERROR_QUORUM_RESOURCE_ONLINE_FAILED",	0X13A3,	-1);
	add_enum_member(id,"ERROR_QUORUMLOG_OPEN_FAILED",	0X13A4,	-1);
	add_enum_member(id,"ERROR_CLUSTERLOG_CORRUPT",	0X13A5,	-1);
	add_enum_member(id,"ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE",	0X13A6,	-1);
	add_enum_member(id,"ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE",	0X13A7,	-1);
	add_enum_member(id,"ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND",	0X13A8,	-1);
	add_enum_member(id,"ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE",	0X13A9,	-1);
	add_enum_member(id,"ERROR_ENCRYPTION_FAILED",	0X1770,	-1);
	add_enum_member(id,"ERROR_DECRYPTION_FAILED",	0X1771,	-1);
	add_enum_member(id,"ERROR_FILE_ENCRYPTED",	0X1772,	-1);
	add_enum_member(id,"ERROR_NO_RECOVERY_POLICY",	0X1773,	-1);
	add_enum_member(id,"ERROR_NO_EFS",	0X1774,	-1);
	add_enum_member(id,"ERROR_WRONG_EFS",	0X1775,	-1);
	add_enum_member(id,"ERROR_NO_USER_KEYS",	0X1776,	-1);
	add_enum_member(id,"ERROR_FILE_NOT_ENCRYPTED",	0X1777,	-1);
	add_enum_member(id,"ERROR_NOT_EXPORT_FORMAT",	0X1778,	-1);
	add_enum_member(id,"ERROR_NO_BROWSER_SERVERS_FOUND",	0X17E6,	-1);
	add_enum_member(id,"ERROR_SEVERITY_INFORMATIONAL",	0X40000000,	-1);
	add_enum_member(id,"ERROR_SEVERITY_WARNING",	0X80000000,	-1);
	add_enum_member(id,"ERROR_SEVERITY_ERROR",	0XC0000000,	-1);
	id = add_enum(-1,"MACRO_DUPLICATE",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"DUPLICATE_CLOSE_SOURCE",	0X1,	0x1);
	add_enum_member(id,"DUPLICATE_SAME_ACCESS",	0X2,	0x2);
	id = add_enum(-1,"ArmVM::ENUM_CALL_TYPE",0x1100000);
	add_enum_member(id,"kSockBinderOpen",	0,	-1);
	add_enum_member(id,"kSockBinderMMap",	0X1,	-1);
	add_enum_member(id,"kSockBinderIoctl",	0X2,	-1);
	add_enum_member(id,"kSockBinderMunmap",	0X2,	-1);
	add_enum_member(id,"kSockBinderClose",	0X3,	-1);
	add_enum_member(id,"kSockBinderKill",	0X3,	-1);
	add_enum_member(id,"kSockBinderInit",	0XFFFFFFFF,	-1);
	id = add_enum(-1,"__TI_flags",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"TI_IsConst",	0X1,	0x1);
	add_enum_member(id,"TI_IsVolatile",	0X2,	0x2);
	add_enum_member(id,"TI_IsUnaligned",	0X4,	0x4);
	add_enum_member(id,"TI_IsPure",	0X8,	0x8);
	add_enum_member(id,"TI_IsWinRT",	0X10,	0x10);
	id = add_enum(-1,"enum_1",0x1100000);
	add_enum_member(id,"BINDER_LOOPER_STATE_REGISTERED",	0X1,	-1);
	add_enum_member(id,"BINDER_LOOPER_STATE_ENTERED",	0X2,	-1);
	add_enum_member(id,"BINDER_LOOPER_STATE_EXITED",	0X4,	-1);
	add_enum_member(id,"BINDER_LOOPER_STATE_INVALID",	0X8,	-1);
	add_enum_member(id,"BINDER_LOOPER_STATE_WAITING",	0X10,	-1);
	id = add_enum(-1,"__CT_flags",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"CT_IsSimpleType",	0X1,	0x1);
	add_enum_member(id,"CT_ByReferenceOnly",	0X2,	0x2);
	add_enum_member(id,"CT_HasVirtualBase",	0X4,	0x4);
	add_enum_member(id,"CT_IsWinRTHandle",	0X8,	0x8);
	add_enum_member(id,"CT_IsStdBadAlloc",	0X10,	0x10);
	id = add_enum(-1,"__scrt_module_type",0x1100000);
	add_enum_member(id,"dll",	0X1,	-1);
	add_enum_member(id,"exe",	0X2,	-1);
	add_enum_member(id,"EXE",	0X2,	-1);
	add_enum_member(id,"service",	0X3,	-1);
	add_enum_member(id,"SERVICE",	0X3,	-1);
	add_enum_member(id,"unspecified",	0X4,	-1);
	id = add_enum(-1,"function_id",0x1100000);
	add_enum_member(id,"EventRegister_id",	0,	-1);
	add_enum_member(id,"EventSetInformation_id",	0X1,	-1);
	add_enum_member(id,"EventUnregister_id",	0X2,	-1);
	add_enum_member(id,"EventWriteTransfer_id",	0X3,	-1);
	add_enum_member(id,"FlsAlloc_id",	0X4,	-1);
	add_enum_member(id,"FlsFree_id",	0X5,	-1);
	add_enum_member(id,"FlsGetValue_id",	0X6,	-1);
	add_enum_member(id,"FlsSetValue_id",	0X7,	-1);
	add_enum_member(id,"InitializeCriticalSectionEx_id",	0X8,	-1);
	add_enum_member(id,"function_id_count",	0X9,	-1);
	id = add_enum(-1,"module_id",0x1100000);
	add_enum_member(id,"advapi32",	0,	-1);
	add_enum_member(id,"api_ms_win_core_fibers_l1_1_1",	0X1,	-1);
	add_enum_member(id,"api_ms_win_core_synch_l1_2_0",	0X2,	-1);
	add_enum_member(id,"kernel32",	0X3,	-1);
	add_enum_member(id,"module_id_count",	0X4,	-1);
	id = add_enum(-1,"_EXCEPTION_DISPOSITION",0x1100000);
	add_enum_member(id,"ExceptionContinueExecution",	0,	-1);
	add_enum_member(id,"ExceptionContinueSearch",	0X1,	-1);
	add_enum_member(id,"ExceptionNestedException",	0X2,	-1);
	add_enum_member(id,"ExceptionCollidedUnwind",	0X3,	-1);
	id = add_enum(-1,"error_types",0x1100000);
	add_enum_member(id,"logl_zero",	0,	-1);
	add_enum_member(id,"logl_negative",	0X1,	-1);
	add_enum_member(id,"log_zero",	0X2,	-1);
	add_enum_member(id,"log_negative",	0X3,	-1);
	add_enum_member(id,"logf_zero",	0X4,	-1);
	add_enum_member(id,"logf_negative",	0X5,	-1);
	add_enum_member(id,"log10l_zero",	0X6,	-1);
	add_enum_member(id,"log10l_negative",	0X7,	-1);
	add_enum_member(id,"log10_zero",	0X8,	-1);
	add_enum_member(id,"log10_negative",	0X9,	-1);
	add_enum_member(id,"log10f_zero",	0XA,	-1);
	add_enum_member(id,"log10f_negative",	0XB,	-1);
	add_enum_member(id,"expl_overflow",	0XC,	-1);
	add_enum_member(id,"expl_underflow",	0XD,	-1);
	add_enum_member(id,"exp_overflow",	0XE,	-1);
	add_enum_member(id,"exp_underflow",	0XF,	-1);
	add_enum_member(id,"expf_overflow",	0X10,	-1);
	add_enum_member(id,"expf_underflow",	0X11,	-1);
	add_enum_member(id,"powl_overflow",	0X12,	-1);
	add_enum_member(id,"powl_underflow",	0X13,	-1);
	add_enum_member(id,"powl_zero_to_zero",	0X14,	-1);
	add_enum_member(id,"powl_zero_to_negative",	0X15,	-1);
	add_enum_member(id,"powl_neg_to_non_integer",	0X16,	-1);
	add_enum_member(id,"powl_nan_to_zero",	0X17,	-1);
	add_enum_member(id,"pow_overflow",	0X18,	-1);
	add_enum_member(id,"pow_underflow",	0X19,	-1);
	add_enum_member(id,"pow_zero_to_zero",	0X1A,	-1);
	add_enum_member(id,"pow_zero_to_negative",	0X1B,	-1);
	add_enum_member(id,"pow_neg_to_non_integer",	0X1C,	-1);
	add_enum_member(id,"pow_nan_to_zero",	0X1D,	-1);
	add_enum_member(id,"powf_overflow",	0X1E,	-1);
	add_enum_member(id,"powf_underflow",	0X1F,	-1);
	add_enum_member(id,"powf_zero_to_zero",	0X20,	-1);
	add_enum_member(id,"powf_zero_to_negative",	0X21,	-1);
	add_enum_member(id,"powf_neg_to_non_integer",	0X22,	-1);
	add_enum_member(id,"powf_nan_to_zero",	0X23,	-1);
	add_enum_member(id,"atan2l_zero",	0X24,	-1);
	add_enum_member(id,"atan2_zero",	0X25,	-1);
	add_enum_member(id,"atan2f_zero",	0X26,	-1);
	add_enum_member(id,"expm1l_overflow",	0X27,	-1);
	add_enum_member(id,"expm1l_underflow",	0X28,	-1);
	add_enum_member(id,"expm1_overflow",	0X29,	-1);
	add_enum_member(id,"expm1_underflow",	0X2A,	-1);
	add_enum_member(id,"expm1f_overflow",	0X2B,	-1);
	add_enum_member(id,"expm1f_underflow",	0X2C,	-1);
	add_enum_member(id,"hypotl_overflow",	0X2D,	-1);
	add_enum_member(id,"hypot_overflow",	0X2E,	-1);
	add_enum_member(id,"hypotf_overflow",	0X2F,	-1);
	add_enum_member(id,"sqrtl_negative",	0X30,	-1);
	add_enum_member(id,"sqrt_negative",	0X31,	-1);
	add_enum_member(id,"sqrtf_negative",	0X32,	-1);
	add_enum_member(id,"scalbl_overflow",	0X33,	-1);
	add_enum_member(id,"scalbl_underflow",	0X34,	-1);
	add_enum_member(id,"scalb_overflow",	0X35,	-1);
	add_enum_member(id,"scalb_underflow",	0X36,	-1);
	add_enum_member(id,"scalbf_overflow",	0X37,	-1);
	add_enum_member(id,"scalbf_underflow",	0X38,	-1);
	add_enum_member(id,"acosl_gt_one",	0X39,	-1);
	add_enum_member(id,"acos_gt_one",	0X3A,	-1);
	add_enum_member(id,"acosf_gt_one",	0X3B,	-1);
	add_enum_member(id,"asinl_gt_one",	0X3C,	-1);
	add_enum_member(id,"asin_gt_one",	0X3D,	-1);
	add_enum_member(id,"asinf_gt_one",	0X3E,	-1);
	add_enum_member(id,"coshl_overflow",	0X3F,	-1);
	add_enum_member(id,"cosh_overflow",	0X40,	-1);
	add_enum_member(id,"coshf_overflow",	0X41,	-1);
	add_enum_member(id,"y0l_zero",	0X42,	-1);
	add_enum_member(id,"y0l_negative",	0X43,	-1);
	add_enum_member(id,"y0l_gt_loss",	0X44,	-1);
	add_enum_member(id,"y0_zero",	0X45,	-1);
	add_enum_member(id,"y0_negative",	0X46,	-1);
	add_enum_member(id,"y0_gt_loss",	0X47,	-1);
	add_enum_member(id,"y0f_zero",	0X48,	-1);
	add_enum_member(id,"y0f_negative",	0X49,	-1);
	add_enum_member(id,"y0f_gt_loss",	0X4A,	-1);
	add_enum_member(id,"y1l_zero",	0X4B,	-1);
	add_enum_member(id,"y1l_negative",	0X4C,	-1);
	add_enum_member(id,"y1l_gt_loss",	0X4D,	-1);
	add_enum_member(id,"y1_zero",	0X4E,	-1);
	add_enum_member(id,"y1_negative",	0X4F,	-1);
	add_enum_member(id,"y1_gt_loss",	0X50,	-1);
	add_enum_member(id,"y1f_zero",	0X51,	-1);
	add_enum_member(id,"y1f_negative",	0X52,	-1);
	add_enum_member(id,"y1f_gt_loss",	0X53,	-1);
	add_enum_member(id,"ynl_zero",	0X54,	-1);
	add_enum_member(id,"ynl_negative",	0X55,	-1);
	add_enum_member(id,"ynl_gt_loss",	0X56,	-1);
	add_enum_member(id,"yn_zero",	0X57,	-1);
	add_enum_member(id,"yn_negative",	0X58,	-1);
	add_enum_member(id,"yn_gt_loss",	0X59,	-1);
	add_enum_member(id,"ynf_zero",	0X5A,	-1);
	add_enum_member(id,"ynf_negative",	0X5B,	-1);
	add_enum_member(id,"ynf_gt_loss",	0X5C,	-1);
	add_enum_member(id,"j0l_gt_loss",	0X5D,	-1);
	add_enum_member(id,"j0_gt_loss",	0X5E,	-1);
	add_enum_member(id,"j0f_gt_loss",	0X5F,	-1);
	add_enum_member(id,"j1l_gt_loss",	0X60,	-1);
	add_enum_member(id,"j1_gt_loss",	0X61,	-1);
	add_enum_member(id,"j1f_gt_loss",	0X62,	-1);
	add_enum_member(id,"jnl_gt_loss",	0X63,	-1);
	add_enum_member(id,"jn_gt_loss",	0X64,	-1);
	add_enum_member(id,"jnf_gt_loss",	0X65,	-1);
	add_enum_member(id,"lgammal_overflow",	0X66,	-1);
	add_enum_member(id,"lgammal_negative",	0X67,	-1);
	add_enum_member(id,"lgammal_reserve",	0X68,	-1);
	add_enum_member(id,"lgamma_overflow",	0X69,	-1);
	add_enum_member(id,"lgamma_negative",	0X6A,	-1);
	add_enum_member(id,"lgamma_reserve",	0X6B,	-1);
	add_enum_member(id,"lgammaf_overflow",	0X6C,	-1);
	add_enum_member(id,"lgammaf_negative",	0X6D,	-1);
	add_enum_member(id,"lgammaf_reserve",	0X6E,	-1);
	add_enum_member(id,"gammal_overflow",	0X6F,	-1);
	add_enum_member(id,"gammal_negative",	0X70,	-1);
	add_enum_member(id,"gammal_reserve",	0X71,	-1);
	add_enum_member(id,"gamma_overflow",	0X72,	-1);
	add_enum_member(id,"gamma_negative",	0X73,	-1);
	add_enum_member(id,"gamma_reserve",	0X74,	-1);
	add_enum_member(id,"gammaf_overflow",	0X75,	-1);
	add_enum_member(id,"gammaf_negative",	0X76,	-1);
	add_enum_member(id,"gammaf_reserve",	0X77,	-1);
	add_enum_member(id,"fmodl_by_zero",	0X78,	-1);
	add_enum_member(id,"fmod_by_zero",	0X79,	-1);
	add_enum_member(id,"fmodf_by_zero",	0X7A,	-1);
	add_enum_member(id,"remainderl_by_zero",	0X7B,	-1);
	add_enum_member(id,"remainder_by_zero",	0X7C,	-1);
	add_enum_member(id,"remainderf_by_zero",	0X7D,	-1);
	add_enum_member(id,"sinhl_overflow",	0X7E,	-1);
	add_enum_member(id,"sinh_overflow",	0X7F,	-1);
	add_enum_member(id,"sinhf_overflow",	0X80,	-1);
	add_enum_member(id,"atanhl_gt_one",	0X81,	-1);
	add_enum_member(id,"atanhl_eq_one",	0X82,	-1);
	add_enum_member(id,"atanh_gt_one",	0X83,	-1);
	add_enum_member(id,"atanh_eq_one",	0X84,	-1);
	add_enum_member(id,"atanhf_gt_one",	0X85,	-1);
	add_enum_member(id,"atanhf_eq_one",	0X86,	-1);
	add_enum_member(id,"acoshl_lt_one",	0X87,	-1);
	add_enum_member(id,"acosh_lt_one",	0X88,	-1);
	add_enum_member(id,"acoshf_lt_one",	0X89,	-1);
	add_enum_member(id,"log1pl_zero",	0X8A,	-1);
	add_enum_member(id,"log1pl_negative",	0X8B,	-1);
	add_enum_member(id,"log1p_zero",	0X8C,	-1);
	add_enum_member(id,"log1p_negative",	0X8D,	-1);
	add_enum_member(id,"log1pf_zero",	0X8E,	-1);
	add_enum_member(id,"log1pf_negative",	0X8F,	-1);
	add_enum_member(id,"ldexpl_overflow",	0X90,	-1);
	add_enum_member(id,"ldexpl_underflow",	0X91,	-1);
	add_enum_member(id,"ldexp_overflow",	0X92,	-1);
	add_enum_member(id,"ldexp_underflow",	0X93,	-1);
	add_enum_member(id,"ldexpf_overflow",	0X94,	-1);
	add_enum_member(id,"ldexpf_underflow",	0X95,	-1);
	add_enum_member(id,"logbl_zero",	0X96,	-1);
	add_enum_member(id,"logb_zero",	0X97,	-1);
	add_enum_member(id,"logbf_zero",	0X98,	-1);
	add_enum_member(id,"nextafterl_overflow",	0X99,	-1);
	add_enum_member(id,"nextafter_overflow",	0X9A,	-1);
	add_enum_member(id,"nextafterf_overflow",	0X9B,	-1);
	add_enum_member(id,"ilogbl_zero",	0X9C,	-1);
	add_enum_member(id,"ilogb_zero",	0X9D,	-1);
	add_enum_member(id,"ilogbf_zero",	0X9E,	-1);
	add_enum_member(id,"exp2l_overflow",	0X9F,	-1);
	add_enum_member(id,"exp2l_underflow",	0XA0,	-1);
	add_enum_member(id,"exp2_overflow",	0XA1,	-1);
	add_enum_member(id,"exp2_underflow",	0XA2,	-1);
	add_enum_member(id,"exp2f_overflow",	0XA3,	-1);
	add_enum_member(id,"exp2f_underflow",	0XA4,	-1);
	add_enum_member(id,"exp10l_overflow",	0XA5,	-1);
	add_enum_member(id,"exp10_overflow",	0XA6,	-1);
	add_enum_member(id,"exp10f_overflow",	0XA7,	-1);
	add_enum_member(id,"log2l_zero",	0XA8,	-1);
	add_enum_member(id,"log2l_negative",	0XA9,	-1);
	add_enum_member(id,"log2_zero",	0XAA,	-1);
	add_enum_member(id,"log2_negative",	0XAB,	-1);
	add_enum_member(id,"log2f_zero",	0XAC,	-1);
	add_enum_member(id,"log2f_negative",	0XAD,	-1);
	add_enum_member(id,"log_nan",	0X3E8,	-1);
	add_enum_member(id,"log10_nan",	0X3E9,	-1);
	add_enum_member(id,"exp_nan",	0X3EA,	-1);
	add_enum_member(id,"atan_nan",	0X3EB,	-1);
	add_enum_member(id,"ceil_nan",	0X3EC,	-1);
	add_enum_member(id,"floor_nan",	0X3ED,	-1);
	add_enum_member(id,"pow_nan",	0X3EE,	-1);
	add_enum_member(id,"modf_nan",	0X3EF,	-1);
	add_enum_member(id,"acos_nan",	0X3F0,	-1);
	add_enum_member(id,"asin_nan",	0X3F1,	-1);
	add_enum_member(id,"sin_naninf",	0X3F2,	-1);
	add_enum_member(id,"cos_naninf",	0X3F3,	-1);
	add_enum_member(id,"tan_naninf",	0X3F4,	-1);
	add_enum_member(id,"sqrt_nan",	0X3F5,	-1);
	id = add_enum(-1,"__crt_stdio_output::length_modifier",0x1100000);
	add_enum_member(id,"none",	0,	-1);
	add_enum_member(id,"hh",	0X1,	-1);
	add_enum_member(id,"h",	0X2,	-1);
	add_enum_member(id,"l",	0X3,	-1);
	add_enum_member(id,"ll",	0X4,	-1);
	add_enum_member(id,"j",	0X5,	-1);
	add_enum_member(id,"z",	0X6,	-1);
	add_enum_member(id,"t",	0X7,	-1);
	add_enum_member(id,"L",	0X8,	-1);
	add_enum_member(id,"I",	0X9,	-1);
	add_enum_member(id,"I32",	0XA,	-1);
	add_enum_member(id,"I64",	0XB,	-1);
	add_enum_member(id,"w",	0XC,	-1);
	add_enum_member(id,"T",	0XD,	-1);
	add_enum_member(id,"enumerator_count",	0XE,	-1);
	id = add_enum(-1,"__crt_stdio_output::state",0x1100000);
	add_enum_member(id,"speed",	0,	-1);
	add_enum_member(id,"size",	0X1,	-1);
	id = add_enum(-1,"__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> >::pass",0x1100000);
	add_enum_member(id,"not_started",	0,	-1);
	add_enum_member(id,"position_scan",	0X1,	-1);
	add_enum_member(id,"output",	0X2,	-1);
	add_enum_member(id,"finished",	0X3,	-1);
	id = add_enum(-1,"__acrt_lock_id",0x1100000);
	add_enum_member(id,"__acrt_heap_lock",	0,	-1);
	add_enum_member(id,"__acrt_debug_lock",	0X1,	-1);
	add_enum_member(id,"__acrt_exit_lock",	0X2,	-1);
	add_enum_member(id,"__acrt_signal_lock",	0X3,	-1);
	add_enum_member(id,"__acrt_locale_lock",	0X4,	-1);
	add_enum_member(id,"__acrt_multibyte_cp_lock",	0X5,	-1);
	add_enum_member(id,"__acrt_time_lock",	0X6,	-1);
	add_enum_member(id,"__acrt_lowio_index_lock",	0X7,	-1);
	add_enum_member(id,"__acrt_stdio_index_lock",	0X8,	-1);
	add_enum_member(id,"__acrt_conio_lock",	0X9,	-1);
	add_enum_member(id,"__acrt_popen_lock",	0XA,	-1);
	add_enum_member(id,"__acrt_environment_lock",	0XB,	-1);
	add_enum_member(id,"__acrt_tempnam_lock",	0XC,	-1);
	add_enum_member(id,"__acrt_lock_count",	0XD,	-1);
	id = add_enum(-1,"_crt_exit_cleanup_mode",0x1100000);
	add_enum_member(id,"_crt_exit_full_cleanup",	0,	-1);
	add_enum_member(id,"_crt_exit_quick_cleanup",	0X1,	-1);
	add_enum_member(id,"_crt_exit_no_cleanup",	0X2,	-1);
	id = add_enum(-1,"_crt_exit_return_mode",0x1100000);
	add_enum_member(id,"_crt_exit_terminate_process",	0,	-1);
	add_enum_member(id,"_crt_exit_return_to_caller",	0X1,	-1);
	id = add_enum(-1,"_crt_argv_mode",0x1100000);
	add_enum_member(id,"_crt_argv_no_arguments",	0,	-1);
	add_enum_member(id,"_crt_argv_unexpanded_arguments",	0X1,	-1);
	add_enum_member(id,"_crt_argv_expanded_arguments",	0X2,	-1);
	id = add_enum(-1,"_crt_app_type",0x1100000);
	add_enum_member(id,"_crt_unknown_app",	0,	-1);
	add_enum_member(id,"_crt_console_app",	0X1,	-1);
	add_enum_member(id,"_crt_gui_app",	0X2,	-1);
	id = add_enum(-1,"__acrt_fp_class",0x1100000);
	add_enum_member(id,"finite",	0,	-1);
	add_enum_member(id,"infinity",	0X1,	-1);
	add_enum_member(id,"quiet_nan",	0X2,	-1);
	add_enum_member(id,"signaling_nan",	0X3,	-1);
	add_enum_member(id,"indeterminate",	0X4,	-1);
	id = add_enum(-1,"__scrt_native_startup_state",0x1100000);
	add_enum_member(id,"uninitialized",	0,	-1);
	add_enum_member(id,"initializing",	0X1,	-1);
	add_enum_member(id,"initialized",	0X2,	-1);
	id = add_enum(-1,"_RTC_ErrorNumber",0x1100000);
	add_enum_member(id,"_RTC_CHKSTK",	0,	-1);
	add_enum_member(id,"_RTC_CVRT_LOSS_INFO",	0X1,	-1);
	add_enum_member(id,"_RTC_CORRUPT_STACK",	0X2,	-1);
	add_enum_member(id,"_RTC_UNINIT_LOCAL_USE",	0X3,	-1);
	add_enum_member(id,"_RTC_CORRUPTED_ALLOCA",	0X4,	-1);
	add_enum_member(id,"_RTC_ILLEGAL",	0X5,	-1);
	id = add_enum(-1,"std::regex_constants::error_type",0x1100000);
	add_enum_member(id,"error_collate",	0,	-1);
	add_enum_member(id,"error_ctype",	0X1,	-1);
	add_enum_member(id,"error_escape",	0X2,	-1);
	add_enum_member(id,"error_backref",	0X3,	-1);
	add_enum_member(id,"error_brack",	0X4,	-1);
	add_enum_member(id,"error_paren",	0X5,	-1);
	add_enum_member(id,"error_brace",	0X6,	-1);
	add_enum_member(id,"error_badbrace",	0X7,	-1);
	add_enum_member(id,"error_range",	0X8,	-1);
	add_enum_member(id,"error_space",	0X9,	-1);
	add_enum_member(id,"error_badrepeat",	0XA,	-1);
	add_enum_member(id,"error_complexity",	0XB,	-1);
	add_enum_member(id,"error_stack",	0XC,	-1);
	add_enum_member(id,"error_parse",	0XD,	-1);
	add_enum_member(id,"error_syntax",	0XE,	-1);
	id = add_enum(-1,"_FILE_INFO_BY_HANDLE_CLASS",0x1100000);
	add_enum_member(id,"FileBasicInfo",	0,	-1);
	add_enum_member(id,"FileStandardInfo",	0X1,	-1);
	add_enum_member(id,"FileNameInfo",	0X2,	-1);
	add_enum_member(id,"FileRenameInfo",	0X3,	-1);
	add_enum_member(id,"FileDispositionInfo",	0X4,	-1);
	add_enum_member(id,"FileAllocationInfo",	0X5,	-1);
	add_enum_member(id,"FileEndOfFileInfo",	0X6,	-1);
	add_enum_member(id,"FileStreamInfo",	0X7,	-1);
	add_enum_member(id,"FileCompressionInfo",	0X8,	-1);
	add_enum_member(id,"FileAttributeTagInfo",	0X9,	-1);
	add_enum_member(id,"FileIdBothDirectoryInfo",	0XA,	-1);
	add_enum_member(id,"FileIdBothDirectoryRestartInfo",	0XB,	-1);
	add_enum_member(id,"FileIoPriorityHintInfo",	0XC,	-1);
	add_enum_member(id,"FileRemoteProtocolInfo",	0XD,	-1);
	add_enum_member(id,"FileFullDirectoryInfo",	0XE,	-1);
	add_enum_member(id,"FileFullDirectoryRestartInfo",	0XF,	-1);
	add_enum_member(id,"FileStorageInfo",	0X10,	-1);
	add_enum_member(id,"FileAlignmentInfo",	0X11,	-1);
	add_enum_member(id,"FileIdInfo",	0X12,	-1);
	add_enum_member(id,"FileIdExtdDirectoryInfo",	0X13,	-1);
	add_enum_member(id,"FileIdExtdDirectoryRestartInfo",	0X14,	-1);
	add_enum_member(id,"MaximumFileInfoByHandleClass",	0X15,	-1);
	id = add_enum(-1,"__vcrt_lock_id",0x1100000);
	add_enum_member(id,"__vcrt_undname_lock",	0,	-1);
	add_enum_member(id,"__vcrt_lock_count",	0X1,	-1);
	id = add_enum(-1,"_EVENT_INFO_CLASS",0x1100000);
	add_enum_member(id,"EventProviderBinaryTrackInfo",	0,	-1);
	add_enum_member(id,"MaxEventInfo",	0X1,	-1);
	id = add_enum(-1,"DNameStatus",0x1100000);
	add_enum_member(id,"DN_valid",	0,	-1);
	add_enum_member(id,"DN_truncated",	0X1,	-1);
	add_enum_member(id,"DN_invalid",	0X2,	-1);
	add_enum_member(id,"DN_error",	0X3,	-1);
	id = add_enum(-1,"Tokens",0x1100000);
	add_enum_member(id,"TOK_basedLp",	0,	-1);
	add_enum_member(id,"TOK_cdecl",	0X1,	-1);
	add_enum_member(id,"TOK_pascal",	0X2,	-1);
	add_enum_member(id,"TOK_stdcall",	0X3,	-1);
	add_enum_member(id,"TOK_thiscall",	0X4,	-1);
	add_enum_member(id,"TOK_fastcall",	0X5,	-1);
	add_enum_member(id,"TOK_vectorcall",	0X6,	-1);
	add_enum_member(id,"TOK_cocall",	0X7,	-1);
	add_enum_member(id,"TOK_eabi",	0X8,	-1);
	add_enum_member(id,"TOK_ptr64",	0X9,	-1);
	add_enum_member(id,"TOK_restrict",	0XA,	-1);
	add_enum_member(id,"TOK_unaligned",	0XB,	-1);
	add_enum_member(id,"TOK_restrictSpecLp",	0XC,	-1);
	add_enum_member(id,"TOK__last",	0XD,	-1);
	id = add_enum(-1,"__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> >::pass",0x1100000);
	id = add_enum(-1,"__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::pass",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::pass",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::mode",0x1100000);
	add_enum_member(id,"unknown",	0,	-1);
	add_enum_member(id,"nonpositional",	0X1,	-1);
	add_enum_member(id,"positional",	0X2,	-1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::parameter_type",0x1100000);
	add_enum_member(id,"unused",	0,	-1);
	add_enum_member(id,"int32",	0X1,	-1);
	add_enum_member(id,"int64",	0X2,	-1);
	add_enum_member(id,"pointer",	0X3,	-1);
	add_enum_member(id,"real64",	0X4,	-1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::pass",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::mode",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::parameter_type",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::pass",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::pass",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::mode",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::parameter_type",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::pass",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::mode",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::parameter_type",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"__crt_lowio_text_mode",0x1100000);
	add_enum_member(id,"ansi",	0,	-1);
	add_enum_member(id,"utf8",	0X1,	-1);
	add_enum_member(id,"utf16le",	0X2,	-1);
	id = add_enum(-1,"RO_INIT_TYPE",0x1100000);
	add_enum_member(id,"RO_INIT_SINGLETHREADED",	0,	-1);
	add_enum_member(id,"RO_INIT_MULTITHREADED",	0X1,	-1);
	id = add_enum(-1,"HEAP_INFORMATION_CLASS",0x1100000);
	add_enum_member(id,"HeapCompatibilityInformation",	0,	-1);
	add_enum_member(id,"HeapEnableTerminationOnCorruption",	0X1,	-1);
	id = add_enum(-1,"FINDEX_INFO_LEVELS",0x1100000);
	add_enum_member(id,"FindExInfoStandard",	0,	-1);
	add_enum_member(id,"FindExInfoMaxInfoLevel",	0X1,	-1);
	id = add_enum(-1,"FINDEX_SEARCH_OPS",0x1100000);
	add_enum_member(id,"FindExSearchNameMatch",	0,	-1);
	add_enum_member(id,"FindExSearchLimitToDirectories",	0X1,	-1);
	add_enum_member(id,"FindExSearchLimitToDevices",	0X2,	-1);
	add_enum_member(id,"FindExSearchMaxSearchOp",	0X3,	-1);
	id = add_enum(-1,"_FINDEX_INFO_LEVELS",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"_FINDEX_SEARCH_OPS",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"$959501DAFB7196048D4C26FFB5C708FD",0x1100000);
	add_enum_member(id,"BINDER_WORK_TRANSACTION",	0X1,	-1);
	add_enum_member(id,"BINDER_WORK_TRANSACTION_COMPLETE",	0X2,	-1);
	add_enum_member(id,"BINDER_WORK_NODE",	0X3,	-1);
	add_enum_member(id,"BINDER_WORK_DEAD_BINDER",	0X4,	-1);
	add_enum_member(id,"BINDER_WORK_DEAD_BINDER_AND_CLEAR",	0X5,	-1);
	id = add_enum(-1,"BC_ENUM_TABLE",0x1100000);
	add_enum_member(id,"BC_INCREFS",	0X40046304,	-1);
	add_enum_member(id,"BC_ACQUIRE",	0X40046305,	-1);
	add_enum_member(id,"BC_RELEASE",	0X40046306,	-1);
	add_enum_member(id,"BC_DECREFS",	0X40046307,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("_MEMORY_BASIC_INFORMATION");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "unsigned int");
	id = get_struc_id("rb_node");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "rb_node *");
	SetType(get_member_id(id, 0x8), "rb_node *");
	id = get_struc_id("rb_root");
	SetType(get_member_id(id, 0x0), "rb_node *");
	id = get_struc_id("_FILETIME");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	id = get_struc_id("LARGE_INTEGER");
	SetType(get_member_id(id, 0x2), "__int64");
	id = get_struc_id("_LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "LONG");
	id = get_struc_id("_RTL_CRITICAL_SECTION");
	SetType(get_member_id(id, 0x0), "_RTL_CRITICAL_SECTION_DEBUG *");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "int");
	SetType(get_member_id(id, 0xC), "void *");
	SetType(get_member_id(id, 0x10), "void *");
	SetType(get_member_id(id, 0x14), "unsigned int");
	id = get_struc_id("struc_open");
	id = get_struc_id("struc_base");
	id = get_struc_id("struc_mmap");
	id = get_struc_id("binder_write_read");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0x10), "int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	id = get_struc_id("struc_11");
	SetType(get_member_id(id, 0x8), "binder_write_read");
	id = get_struc_id("struc_10");
	SetType(get_member_id(id, 0x8), "binder_write_read");
	id = get_struc_id("binder_thread");
	SetType(get_member_id(id, 0x0), "binder_proc *");
	SetType(get_member_id(id, 0x4), "rb_node");
	SetType(get_member_id(id, 0x10), "int");
	SetType(get_member_id(id, 0x14), "int");
	SetType(get_member_id(id, 0x18), "binder_transaction *");
	SetType(get_member_id(id, 0x1C), "list_head");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "unsigned int");
	SetType(get_member_id(id, 0x2C), "struct pthread_cond_t_ *");
	SetType(get_member_id(id, 0x30), "binder_stats");
	id = get_struc_id("list_head");
	SetType(get_member_id(id, 0x0), "list_head *");
	SetType(get_member_id(id, 0x4), "list_head *");
	id = get_struc_id("binder_transaction_data::$D994BC419564A2309B07BE823C2EC040::$76E49E73D22C7EB97CD59DFF8F6549A8");
	SetType(get_member_id(id, 0x0), "const void *");
	SetType(get_member_id(id, 0x4), "const void *");
	id = get_struc_id("binder_transaction_data::$D079491E8577E084BD162F03C2F595EB");
	SetType(get_member_id(id, 0x0), "size_t");
	SetType(get_member_id(id, 0x1), "void *");
	id = get_struc_id("binder_transaction_data");
	SetType(get_member_id(id, 0x0), "union binder_transaction_data::$D079491E8577E084BD162F03C2F595EB");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "size_t");
	SetType(get_member_id(id, 0x1C), "size_t");
	SetType(get_member_id(id, 0x20), "union binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993");
	id = get_struc_id("binder_transaction_data::$D994BC419564A2309B07BE823C2EC040");
	SetType(get_member_id(id, 0x0), "struct binder_transaction_data::$D994BC419564A2309B07BE823C2EC040::$76E49E73D22C7EB97CD59DFF8F6549A8");
	SetType(get_member_id(id, 0x1), "unsigned __int8[8]");
	id = get_struc_id("hlist_head");
	SetType(get_member_id(id, 0x0), "hlist_node *");
	id = get_struc_id("$2F9EC58EC9314F6C9AF43E98CF85E2FF");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x1), "void *");
	id = get_struc_id("$0FAE717D548792FBF476D9B78C010AEF");
	SetType(get_member_id(id, 0x0), "$76E49E73D22C7EB97CD59DFF8F6549A8");
	SetType(get_member_id(id, 0x1), "char[8]");
	id = get_struc_id("$76E49E73D22C7EB97CD59DFF8F6549A8");
	SetType(get_member_id(id, 0x0), "const void *");
	SetType(get_member_id(id, 0x4), "const void *");
	id = get_struc_id("std::_Nil");
	id = get_struc_id("FuncInfo");
	id = get_struc_id("UnwindMapEntry");
	id = get_struc_id("TryBlockMapEntry");
	id = get_struc_id("HandlerType");
	id = get_struc_id("std::set<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *> >");
	id = get_struc_id("std::_Tree<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> >");
	id = get_struc_id("std::_Tree_comp_alloc<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> >");
	id = get_struc_id("std::_Compressed_pair<std::less<ArmVM::PipeThread *>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>,1>");
	id = get_struc_id("std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>");
	id = get_struc_id("std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >");
	SetType(get_member_id(id, 0x0), "std::_Container_base12");
	SetType(get_member_id(id, 0x4), "unsigned int");
	id = get_struc_id("std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > >");
	id = get_struc_id("std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,std::_Iterator_base0>");
	id = get_struc_id("std::basic_ostream<char,std::char_traits<char> >::sentry");
	SetType(get_member_id(id, 0x4), "bool");
	id = get_struc_id("std::basic_ostream<char,std::char_traits<char> >::_Sentry_base");
	id = get_struc_id("ArmVM::base_struct_msg");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "unsigned int");
	id = get_struc_id("google::CheckOpString");
	id = get_struc_id("ArmVM::struct_mmap_info");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "void *");
	id = get_struc_id("ArmVM::struct_ioctl_info");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	id = get_struc_id("ArmVM::binder_write_read");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0x10), "int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	id = get_struc_id("_EXCEPTION_RECORD");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "_EXCEPTION_RECORD *");
	SetType(get_member_id(id, 0xC), "void *");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int[15]");
	id = get_struc_id("_CONTEXT");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "unsigned int");
	SetType(get_member_id(id, 0x1C), "_FLOATING_SAVE_AREA");
	SetType(get_member_id(id, 0x8C), "unsigned int");
	SetType(get_member_id(id, 0x90), "unsigned int");
	SetType(get_member_id(id, 0x94), "unsigned int");
	SetType(get_member_id(id, 0x98), "unsigned int");
	SetType(get_member_id(id, 0x9C), "unsigned int");
	SetType(get_member_id(id, 0xA0), "unsigned int");
	SetType(get_member_id(id, 0xA4), "unsigned int");
	SetType(get_member_id(id, 0xA8), "unsigned int");
	SetType(get_member_id(id, 0xAC), "unsigned int");
	SetType(get_member_id(id, 0xB0), "unsigned int");
	SetType(get_member_id(id, 0xB4), "unsigned int");
	SetType(get_member_id(id, 0xB8), "unsigned int");
	SetType(get_member_id(id, 0xBC), "unsigned int");
	SetType(get_member_id(id, 0xC0), "unsigned int");
	SetType(get_member_id(id, 0xC4), "unsigned int");
	SetType(get_member_id(id, 0xC8), "unsigned int");
	SetType(get_member_id(id, 0xCC), "char[512]");
	id = get_struc_id("_FLOATING_SAVE_AREA");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "unsigned int");
	SetType(get_member_id(id, 0x1C), "char[80]");
	SetType(get_member_id(id, 0x6C), "unsigned int");
	id = get_struc_id("_EXCEPTION_POINTERS");
	SetType(get_member_id(id, 0x0), "_EXCEPTION_RECORD *");
	SetType(get_member_id(id, 0x4), "_CONTEXT *");
	id = get_struc_id("FT");
	SetType(get_member_id(id, 0x0), "unsigned __int64");
	SetType(get_member_id(id, 0x1), "_FILETIME[]");
	id = get_struc_id("_LARGE_INTEGER");
	SetType(get_member_id(id, 0x0), "$FAF74743FBE1C8632047CFB668F7028A");
	SetType(get_member_id(id, 0x1), "$FAF74743FBE1C8632047CFB668F7028A");
	SetType(get_member_id(id, 0x2), "__int64");
	id = get_struc_id("$FAF74743FBE1C8632047CFB668F7028A");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "int");
	id = get_struc_id("_onexit_table_t");
	SetType(get_member_id(id, 0x0), "void (__cdecl **)()");
	SetType(get_member_id(id, 0x4), "void (__cdecl **)()");
	SetType(get_member_id(id, 0x8), "void (__cdecl **)()");
	id = get_struc_id("CPPEH_RECORD");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "EXCEPTION_POINTERS *");
	SetType(get_member_id(id, 0x8), "struct _EH3_EXCEPTION_REGISTRATION");
	id = get_struc_id("_EH3_EXCEPTION_REGISTRATION");
	SetType(get_member_id(id, 0x0), "struct _EH3_EXCEPTION_REGISTRATION *");
	SetType(get_member_id(id, 0x4), "PVOID");
	SetType(get_member_id(id, 0xC), "DWORD");
	id = get_struc_id("__std_exception_data");
	SetType(get_member_id(id, 0x0), "const char *");
	SetType(get_member_id(id, 0x4), "bool");
	id = get_struc_id("FrameInfo");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "FrameInfo *");
	id = get_struc_id("EHExceptionRecord");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "_EXCEPTION_RECORD *");
	SetType(get_member_id(id, 0xC), "void *");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "EHExceptionRecord::EHParameters");
	id = get_struc_id("EHExceptionRecord::EHParameters");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "void *");
	id = get_struc_id("__vcrt_ptd");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "void (__cdecl *)()");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "void *");
	SetType(get_member_id(id, 0x10), "void *");
	SetType(get_member_id(id, 0x14), "void *");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "void *");
	SetType(get_member_id(id, 0x20), "int");
	SetType(get_member_id(id, 0x24), "void *");
	id = get_struc_id("_HeapManager");
	SetType(get_member_id(id, 0x0), "void *(__cdecl *)(unsigned int)");
	SetType(get_member_id(id, 0x4), "void (__cdecl *)(void *)");
	SetType(get_member_id(id, 0x10), "unsigned int");
	id = get_struc_id("CatchGuardRN");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0x14), "int");
	id = get_struc_id("TranslatorGuardRN");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0x14), "int");
	SetType(get_member_id(id, 0x1C), "void *");
	SetType(get_member_id(id, 0x20), "void *");
	SetType(get_member_id(id, 0x24), "int");
	id = get_struc_id("_exception");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "char *");
	SetType(get_member_id(id, 0x18), "long double");
	id = get_struc_id("_FPIEEE_RECORD");
	SetType(get_member_id(id, 0x0), "__int32");
	SetType(get_member_id(id, 0x4), "_FPIEEE_EXCEPTION_FLAGS");
	SetType(get_member_id(id, 0x8), "_FPIEEE_EXCEPTION_FLAGS");
	SetType(get_member_id(id, 0xC), "_FPIEEE_EXCEPTION_FLAGS");
	SetType(get_member_id(id, 0x10), "_FPIEEE_VALUE");
	SetType(get_member_id(id, 0x30), "_FPIEEE_VALUE");
	SetType(get_member_id(id, 0x50), "_FPIEEE_VALUE");
	id = get_struc_id("_FPIEEE_EXCEPTION_FLAGS");
	SetType(get_member_id(id, 0x0), "__int32");
	id = get_struc_id("_FPIEEE_VALUE");
	SetType(get_member_id(id, 0x0), "$98F0E3D4AB8DBDB62B135BC69E08813A");
	SetType(get_member_id(id, 0x10), "__int32");
	id = get_struc_id("$A29487D7856F9D52B62F7F0CCF38DDE9");
	SetType(get_member_id(id, 0x0), "float");
	SetType(get_member_id(id, 0x1), "long double");
	SetType(get_member_id(id, 0x2), "_FP80");
	SetType(get_member_id(id, 0x3), "_FP128");
	SetType(get_member_id(id, 0x4), "__int16");
	SetType(get_member_id(id, 0x5), "int");
	SetType(get_member_id(id, 0x6), "_I64");
	SetType(get_member_id(id, 0x7), "unsigned __int16");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0x9), "_U64");
	SetType(get_member_id(id, 0xA), "_BCD80");
	SetType(get_member_id(id, 0xB), "char *");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0xD), "_U32ARRAY");
	SetType(get_member_id(id, 0xE), "__int64");
	SetType(get_member_id(id, 0xF), "_FPQ64");
	id = get_struc_id("_FP80");
	SetType(get_member_id(id, 0x0), "unsigned __int16[5]");
	id = get_struc_id("_FP128");
	SetType(get_member_id(id, 0x0), "unsigned int[4]");
	id = get_struc_id("_I64");
	SetType(get_member_id(id, 0x0), "unsigned int[2]");
	id = get_struc_id("_U64");
	SetType(get_member_id(id, 0x0), "unsigned int[2]");
	id = get_struc_id("_BCD80");
	SetType(get_member_id(id, 0x0), "unsigned __int16[5]");
	id = get_struc_id("_U32ARRAY");
	SetType(get_member_id(id, 0x0), "unsigned int[4]");
	id = get_struc_id("_FPQ64");
	SetType(get_member_id(id, 0x0), "__int64[2]");
	id = get_struc_id("_LocaleUpdate");
	SetType(get_member_id(id, 0x4), "__crt_locale_pointers");
	SetType(get_member_id(id, 0xC), "bool");
	id = get_struc_id("__crt_locale_pointers");
	SetType(get_member_id(id, 0x0), "__crt_locale_data *");
	SetType(get_member_id(id, 0x4), "__crt_multibyte_data *");
	id = get_struc_id("fenv_get_set");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int[5]");
	id = get_struc_id("__crt_state_management::dual_state_global<int (__cdecl*)(_exception *)>");
	SetType(get_member_id(id, 0x0), "int (__cdecl *[1])(_exception *)");
	id = get_struc_id("fenv_t");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	id = get_struc_id("__crt_stdio_stream");
	SetType(get_member_id(id, 0x0), "__crt_stdio_stream_data *");
	id = get_struc_id("__crt_unique_heap_ptr<char,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "char *");
	id = get_struc_id("__acrt_stdio_temporary_buffering_guard");
	SetType(get_member_id(id, 0x0), "_iobuf *");
	SetType(get_member_id(id, 0x4), "bool");
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> > >");
	id = get_struc_id("__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> >");
	id = get_struc_id("__crt_stdio_output::output_adapter_data<char,__crt_stdio_output::stream_output_adapter<char> >");
	id = get_struc_id("__crt_stdio_output::common_data<char>");
	SetType(get_member_id(id, 0x0), "unsigned __int64");
	SetType(get_member_id(id, 0x8), "__crt_locale_pointers *");
	SetType(get_member_id(id, 0xC), "int *");
	SetType(get_member_id(id, 0x10), "const char *");
	SetType(get_member_id(id, 0x14), "char *");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "__crt_stdio_output::state");
	SetType(get_member_id(id, 0x20), "unsigned int");
	SetType(get_member_id(id, 0x24), "int");
	SetType(get_member_id(id, 0x28), "int");
	SetType(get_member_id(id, 0x2C), "__crt_stdio_output::length_modifier");
	SetType(get_member_id(id, 0x30), "bool");
	SetType(get_member_id(id, 0x31), "char");
	SetType(get_member_id(id, 0x34), "$147BBAAC6F057C74482616A6F88094DB");
	SetType(get_member_id(id, 0x38), "int");
	SetType(get_member_id(id, 0x3C), "bool");
	SetType(get_member_id(id, 0x40), "__crt_stdio_output::formatting_buffer");
	id = get_struc_id("$147BBAAC6F057C74482616A6F88094DB");
	SetType(get_member_id(id, 0x0), "char *");
	SetType(get_member_id(id, 0x1), "wchar_t *");
	id = get_struc_id("__crt_stdio_output::formatting_buffer");
	SetType(get_member_id(id, 0x0), "char[1024]");
	SetType(get_member_id(id, 0x400), "unsigned int");
	id = get_struc_id("__crt_stdio_output::stream_output_adapter<char>");
	SetType(get_member_id(id, 0x0), "__crt_stdio_stream");
	id = get_struc_id("_CRT_DOUBLE");
	SetType(get_member_id(id, 0x0), "long double");
	id = get_struc_id("__crt_unique_handle_t<__crt_hmodule_traits>");
	SetType(get_member_id(id, 0x0), "HINSTANCE__ *");
	id = get_struc_id("argument_list<char>");
	SetType(get_member_id(id, 0x0), "char **");
	SetType(get_member_id(id, 0x4), "char **");
	SetType(get_member_id(id, 0x8), "char **");
	id = get_struc_id("_WIN32_FIND_DATAA");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "_FILETIME");
	SetType(get_member_id(id, 0xC), "_FILETIME");
	SetType(get_member_id(id, 0x14), "_FILETIME");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	SetType(get_member_id(id, 0x20), "unsigned int");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "unsigned int");
	SetType(get_member_id(id, 0x2C), "char[260]");
	SetType(get_member_id(id, 0x130), "char[14]");
	id = get_struc_id("__crt_unique_heap_ptr<char *,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "char **");
	id = get_struc_id("__crt_state_management::dual_state_global<void (__cdecl*)(int)>");
	SetType(get_member_id(id, 0x0), "void (__cdecl *[1])(int)");
	id = get_struc_id("__crt_state_management::dual_state_global<void (__cdecl*)(wchar_t const *,wchar_t const *,wchar_t const *,unsigned int,unsigned int)>");
	SetType(get_member_id(id, 0x0), "void (__cdecl *[1])(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, unsigned int)");
	id = get_struc_id("_cpinfo");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "char[2]");
	SetType(get_member_id(id, 0x6), "char[12]");
	id = get_struc_id("write_result");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	id = get_struc_id("_STARTUPINFOW");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "wchar_t *");
	SetType(get_member_id(id, 0x8), "wchar_t *");
	SetType(get_member_id(id, 0xC), "wchar_t *");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "unsigned int");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	SetType(get_member_id(id, 0x20), "unsigned int");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "unsigned int");
	SetType(get_member_id(id, 0x2C), "unsigned int");
	SetType(get_member_id(id, 0x30), "unsigned __int16");
	SetType(get_member_id(id, 0x32), "unsigned __int16");
	SetType(get_member_id(id, 0x34), "char *");
	SetType(get_member_id(id, 0x38), "void *");
	SetType(get_member_id(id, 0x3C), "void *");
	SetType(get_member_id(id, 0x40), "void *");
	id = get_struc_id("__crt_state_management::dual_state_global<long>");
	SetType(get_member_id(id, 0x0), "int[1]");
	id = get_struc_id("__crt_state_management::dual_state_global<int (__cdecl*)(unsigned int)>");
	SetType(get_member_id(id, 0x0), "int (__cdecl *[1])(unsigned int)");
	id = get_struc_id("_strflt");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "char *");
	id = get_struc_id("scoped_fp_state_reset");
	SetType(get_member_id(id, 0x0), "fenv_t");
	SetType(get_member_id(id, 0x8), "bool");
	id = get_struc_id("__crt_strtox::c_string_character_source<char>");
	SetType(get_member_id(id, 0x0), "const char *");
	SetType(get_member_id(id, 0x4), "const char **");
	id = get_struc_id("lconv");
	SetType(get_member_id(id, 0x0), "char *");
	SetType(get_member_id(id, 0x4), "char *");
	SetType(get_member_id(id, 0x8), "char *");
	SetType(get_member_id(id, 0xC), "char *");
	SetType(get_member_id(id, 0x10), "char *");
	SetType(get_member_id(id, 0x14), "char *");
	SetType(get_member_id(id, 0x18), "char *");
	SetType(get_member_id(id, 0x1C), "char *");
	SetType(get_member_id(id, 0x20), "char *");
	SetType(get_member_id(id, 0x24), "char *");
	SetType(get_member_id(id, 0x28), "char");
	SetType(get_member_id(id, 0x29), "char");
	SetType(get_member_id(id, 0x2A), "char");
	SetType(get_member_id(id, 0x2B), "char");
	SetType(get_member_id(id, 0x2C), "char");
	SetType(get_member_id(id, 0x2D), "char");
	SetType(get_member_id(id, 0x2E), "char");
	SetType(get_member_id(id, 0x2F), "char");
	SetType(get_member_id(id, 0x30), "wchar_t *");
	SetType(get_member_id(id, 0x34), "wchar_t *");
	SetType(get_member_id(id, 0x38), "wchar_t *");
	SetType(get_member_id(id, 0x3C), "wchar_t *");
	SetType(get_member_id(id, 0x40), "wchar_t *");
	SetType(get_member_id(id, 0x44), "wchar_t *");
	SetType(get_member_id(id, 0x48), "wchar_t *");
	SetType(get_member_id(id, 0x4C), "wchar_t *");
	id = get_struc_id("__crt_state_management::dual_state_global<char * *>");
	SetType(get_member_id(id, 0x0), "char **[1]");
	id = get_struc_id("binder_transaction_log");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "binder_transaction_log_entry[32]");
	id = get_struc_id("binder_transaction_log_entry");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "int");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0x10), "int");
	SetType(get_member_id(id, 0x14), "int");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "int");
	SetType(get_member_id(id, 0x20), "int");
	SetType(get_member_id(id, 0x24), "int");
	id = get_struc_id("__crt_state_management::dual_state_global<wchar_t * *>");
	SetType(get_member_id(id, 0x0), "wchar_t **[1]");
	id = get_struc_id("_IMAGE_DOS_HEADER");
	SetType(get_member_id(id, 0x0), "unsigned __int16");
	SetType(get_member_id(id, 0x2), "unsigned __int16");
	SetType(get_member_id(id, 0x4), "unsigned __int16");
	SetType(get_member_id(id, 0x6), "unsigned __int16");
	SetType(get_member_id(id, 0x8), "unsigned __int16");
	SetType(get_member_id(id, 0xA), "unsigned __int16");
	SetType(get_member_id(id, 0xC), "unsigned __int16");
	SetType(get_member_id(id, 0xE), "unsigned __int16");
	SetType(get_member_id(id, 0x10), "unsigned __int16");
	SetType(get_member_id(id, 0x12), "unsigned __int16");
	SetType(get_member_id(id, 0x14), "unsigned __int16");
	SetType(get_member_id(id, 0x16), "unsigned __int16");
	SetType(get_member_id(id, 0x18), "unsigned __int16");
	SetType(get_member_id(id, 0x1A), "unsigned __int16");
	SetType(get_member_id(id, 0x1C), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x24), "unsigned __int16");
	SetType(get_member_id(id, 0x26), "unsigned __int16");
	SetType(get_member_id(id, 0x28), "unsigned __int16[10]");
	SetType(get_member_id(id, 0x3C), "int");
	id = get_struc_id("__crt_state_management::dual_state_global<__crt_locale_data *>");
	SetType(get_member_id(id, 0x0), "__crt_locale_data *[1]");
	id = get_struc_id("binder_stats");
	SetType(get_member_id(id, 0x0), "int[18]");
	SetType(get_member_id(id, 0x48), "int[17]");
	SetType(get_member_id(id, 0x8C), "int[7]");
	SetType(get_member_id(id, 0xA8), "int[7]");
	id = get_struc_id("_dbl");
	SetType(get_member_id(id, 0x0), "int[2]");
	SetType(get_member_id(id, 0x1), "long double");
	id = get_struc_id("__crt_stdio_stream_data");
	SetType(get_member_id(id, 0x0), "$203B8869A37B333161EE04A31AF8E2BE");
	SetType(get_member_id(id, 0x4), "char *");
	SetType(get_member_id(id, 0x8), "int");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0x10), "int");
	SetType(get_member_id(id, 0x14), "int");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "char *");
	SetType(get_member_id(id, 0x20), "_RTL_CRITICAL_SECTION");
	id = get_struc_id("$203B8869A37B333161EE04A31AF8E2BE");
	SetType(get_member_id(id, 0x0), "_iobuf");
	SetType(get_member_id(id, 0x1), "char *");
	id = get_struc_id("_iobuf");
	SetType(get_member_id(id, 0x0), "void *");
	id = get_struc_id("__crt_locale_data");
	SetType(get_member_id(id, 0x0), "__crt_locale_data_public");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "__crt_locale_refcount[6]");
	SetType(get_member_id(id, 0x7C), "int *");
	SetType(get_member_id(id, 0x80), "int *");
	SetType(get_member_id(id, 0x84), "int *");
	SetType(get_member_id(id, 0x88), "lconv *");
	SetType(get_member_id(id, 0x8C), "int *");
	SetType(get_member_id(id, 0x90), "unsigned __int16 *");
	SetType(get_member_id(id, 0x94), "const char *");
	SetType(get_member_id(id, 0x98), "const char *");
	SetType(get_member_id(id, 0x9C), "__crt_lc_time_data *");
	SetType(get_member_id(id, 0xA0), "wchar_t *[6]");
	id = get_struc_id("__crt_locale_data_public");
	SetType(get_member_id(id, 0x0), "const unsigned __int16 *");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	id = get_struc_id("__crt_locale_refcount");
	SetType(get_member_id(id, 0x0), "char *");
	SetType(get_member_id(id, 0x4), "wchar_t *");
	SetType(get_member_id(id, 0x8), "int *");
	SetType(get_member_id(id, 0xC), "int *");
	id = get_struc_id("__crt_multibyte_data");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "int");
	SetType(get_member_id(id, 0xC), "unsigned __int16[6]");
	SetType(get_member_id(id, 0x18), "char[257]");
	SetType(get_member_id(id, 0x119), "char[256]");
	SetType(get_member_id(id, 0x21C), "const wchar_t *");
	id = get_struc_id("std::locale::id");
	SetType(get_member_id(id, 0x0), "unsigned int");
	id = get_struc_id("_IMAGE_LOAD_CONFIG_DIRECTORY32");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned __int16");
	SetType(get_member_id(id, 0xA), "unsigned __int16");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "unsigned int");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	SetType(get_member_id(id, 0x20), "unsigned int");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "unsigned int");
	SetType(get_member_id(id, 0x2C), "unsigned int");
	SetType(get_member_id(id, 0x30), "unsigned int");
	SetType(get_member_id(id, 0x34), "unsigned __int16");
	SetType(get_member_id(id, 0x36), "unsigned __int16");
	SetType(get_member_id(id, 0x38), "unsigned int");
	SetType(get_member_id(id, 0x3C), "unsigned int");
	SetType(get_member_id(id, 0x40), "unsigned int");
	SetType(get_member_id(id, 0x44), "unsigned int");
	SetType(get_member_id(id, 0x48), "unsigned int");
	SetType(get_member_id(id, 0x4C), "unsigned int");
	SetType(get_member_id(id, 0x50), "unsigned int");
	SetType(get_member_id(id, 0x54), "unsigned int");
	SetType(get_member_id(id, 0x58), "unsigned int");
	id = get_struc_id("_NLG_INFO");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "unsigned int");
	id = get_struc_id("__crt_lowio_handle_data");
	SetType(get_member_id(id, 0x0), "_RTL_CRITICAL_SECTION");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x20), "__int64");
	SetType(get_member_id(id, 0x28), "char");
	SetType(get_member_id(id, 0x29), "_BYTE[1]");
	SetType(get_member_id(id, 0x2A), "char[3]");
	SetType(get_member_id(id, 0x2D), "__int8");
	SetType(get_member_id(id, 0x2E), "char");
	id = get_struc_id("__crt_signal_action_t");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "void (__cdecl *)(int)");
	id = get_struc_id("__crt_lc_time_data");
	SetType(get_member_id(id, 0x0), "char *[7]");
	SetType(get_member_id(id, 0x1C), "char *[7]");
	SetType(get_member_id(id, 0x38), "char *[12]");
	SetType(get_member_id(id, 0x68), "char *[12]");
	SetType(get_member_id(id, 0x98), "char *[2]");
	SetType(get_member_id(id, 0xA0), "char *");
	SetType(get_member_id(id, 0xA4), "char *");
	SetType(get_member_id(id, 0xA8), "char *");
	SetType(get_member_id(id, 0xAC), "int");
	SetType(get_member_id(id, 0xB0), "int");
	SetType(get_member_id(id, 0xB4), "wchar_t *[7]");
	SetType(get_member_id(id, 0xD0), "wchar_t *[7]");
	SetType(get_member_id(id, 0xEC), "wchar_t *[12]");
	SetType(get_member_id(id, 0x11C), "wchar_t *[12]");
	SetType(get_member_id(id, 0x14C), "wchar_t *[2]");
	SetType(get_member_id(id, 0x154), "wchar_t *");
	SetType(get_member_id(id, 0x158), "wchar_t *");
	SetType(get_member_id(id, 0x15C), "wchar_t *");
	SetType(get_member_id(id, 0x160), "wchar_t *");
	id = get_struc_id("__type_info_node");
	SetType(get_member_id(id, 0x0), "_SLIST_HEADER");
	id = get_struc_id("_SLIST_HEADER");
	SetType(get_member_id(id, 0x0), "unsigned __int64");
	SetType(get_member_id(id, 0x1), "$1394F7ADFE0FA40BE002A2F71F8DC39C");
	id = get_struc_id("$B4AD88E0C92B4EA31AC7984D1C6144B5");
	SetType(get_member_id(id, 0x0), "_SINGLE_LIST_ENTRY");
	SetType(get_member_id(id, 0x4), "unsigned __int16");
	SetType(get_member_id(id, 0x6), "unsigned __int16");
	id = get_struc_id("_SINGLE_LIST_ENTRY");
	SetType(get_member_id(id, 0x0), "_SINGLE_LIST_ENTRY *");
	id = get_struc_id("GUID");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned __int16");
	SetType(get_member_id(id, 0x6), "unsigned __int16");
	SetType(get_member_id(id, 0x8), "char[8]");
	id = get_struc_id("_EH4_SCOPETABLE");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "DWORD");
	SetType(get_member_id(id, 0x8), "DWORD");
	SetType(get_member_id(id, 0xC), "DWORD");
	SetType(get_member_id(id, 0x10), "struct _EH4_SCOPETABLE_RECORD[]");
	id = get_struc_id("_EH4_SCOPETABLE_RECORD");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "void *");
	id = get_struc_id("std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > >,bool>");
	SetType(get_member_id(id, 0x4), "bool");
	id = get_struc_id("std::bad_array_new_length");
	SetType(get_member_id(id, 0x0), "std::bad_alloc");
	id = get_struc_id("std::bad_alloc");
	SetType(get_member_id(id, 0x0), "std::exception");
	id = get_struc_id("std::exception");
	SetType(get_member_id(id, 0x0), "std::exceptionVtbl *");
	SetType(get_member_id(id, 0x4), "__std_exception_data");
	id = get_struc_id("_s__ThrowInfo");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "void (__cdecl *)(void *)");
	SetType(get_member_id(id, 0x8), "int (__cdecl *)()");
	id = get_struc_id("std::length_error");
	SetType(get_member_id(id, 0x0), "std::logic_error");
	id = get_struc_id("std::logic_error");
	SetType(get_member_id(id, 0x0), "std::exception");
	id = get_struc_id("std::out_of_range");
	SetType(get_member_id(id, 0x0), "std::logic_error");
	id = get_struc_id("std::bad_exception");
	SetType(get_member_id(id, 0x0), "std::exception");
	id = get_struc_id("__std_type_info_data");
	SetType(get_member_id(id, 0x0), "const char *");
	SetType(get_member_id(id, 0x4), "const char[1]");
	id = get_struc_id("__acrt_lock_stream_and_call::__l3::<lambda_db08b09ef7aa9d4f8620ce68402612bc>");
	SetType(get_member_id(id, 0x0), "_iobuf *const ");
	id = get_struc_id("__acrt_lock_stream_and_call::__l4::<lambda_3ae262bc35d4ba6a3825c4f6bcaaf95c>");
	SetType(get_member_id(id, 0x0), "_iobuf *const ");
	id = get_struc_id("__crt_seh_guarded_call<int>");
	id = get_struc_id("common_vfprintf::__l11::<lambda_4f2c1eaeead2a5fc776db5b62ea0fb9b>");
	SetType(get_member_id(id, 0x0), "_iobuf *const *");
	SetType(get_member_id(id, 0x4), "__crt_locale_pointers *const *");
	SetType(get_member_id(id, 0x8), "const unsigned __int64 *");
	SetType(get_member_id(id, 0xC), "const char *const *");
	SetType(get_member_id(id, 0x10), "char *const *");
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_995298e7d72eb4c2aab26c0585b3abe5>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_293819299cbf9a7022e18b56a874bb5c>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_800076c951b434888f4765a74a194fcc>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_6dbb1268764f43b569ce7b67e331d33a>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("_execute_onexit_table::__l22::<lambda_275893d493268fdec8709772e3fcec0e>");
	SetType(get_member_id(id, 0x0), "_onexit_table_t *const *");
	id = get_struc_id("_register_onexit_function::__l23::<lambda_4e60a939b0d047cfe11ddc22648dfba9>");
	SetType(get_member_id(id, 0x0), "_onexit_table_t *const *");
	SetType(get_member_id(id, 0x4), "int (__cdecl *const *)()");
	id = get_struc_id("__acrt_initializer");
	SetType(get_member_id(id, 0x0), "bool (__cdecl *)()");
	SetType(get_member_id(id, 0x4), "bool (__cdecl *)(bool)");
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_51b6e8b1eb166f2a3faf91f424b38130>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_0b5a4a3e68152e1d9b943535f5f47bed>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__crt_seh_guarded_call<void>");
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_3518db117f0e7cdb002338c5d3c47b6c>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_abdedf541bb04549bc734292b4a045d4>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_5b71d36f03204c0beab531769a5b5694>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_8f9ce462984622f9bf76b59e2aaaf805>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_9df27f884b057bc3edfc946cb5b7cf47>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_cc0d902bcbbeb830f749456577db4721>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("construct_ptd::__l3::<lambda_e69574bed617af4e071282c136b37893>");
	id = get_struc_id("construct_ptd::__l4::<lambda_b2ea41f6bbb362cd97d94c6828d90b61>");
	SetType(get_member_id(id, 0x4), "__crt_locale_data **const *");
	id = get_struc_id("destroy_ptd::__l15::<lambda_6250bd4b2a391816dd638c3bf72b0bcb>");
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_a048d3beccc847880fc8490e18b82769>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_f7496a158712204296dd6628a163878e>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__crt_seh_guarded_call<void (__cdecl*)(int)>");
	id = get_struc_id("__acrt_get_sigabrt_handler::__l3::<lambda_ec61778202f4f5fc7e7711acc23c3bca>");
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_978dc153c237d78434369da87b74ff60>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_4a8533e2866a575feecb8298ce776b0d>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lowio_lock_fh_and_call::__l3::<lambda_61cee617f5178ae960314fd4d05640a0>");
	SetType(get_member_id(id, 0x0), "const int");
	id = get_struc_id("__acrt_lowio_lock_fh_and_call::__l4::<lambda_9cd88cf8ad10232537feb2133f08c833>");
	SetType(get_member_id(id, 0x0), "const int");
	id = get_struc_id("_commit::__l20::<lambda_6978c1fb23f02e42e1d9e99668cc68aa>");
	SetType(get_member_id(id, 0x0), "const int *");
	id = get_struc_id("__crt_strtox::big_integer");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int[115]");
	id = get_struc_id("__acrt_lowio_lock_fh_and_call::__l3::<lambda_123407a5e2ac06da108355a851863b7a>");
	SetType(get_member_id(id, 0x0), "const int");
	id = get_struc_id("__acrt_lowio_lock_fh_and_call::__l4::<lambda_ae55bdf541ad94d75914d381c370e64d>");
	SetType(get_member_id(id, 0x0), "const int");
	id = get_struc_id("_close::__l20::<lambda_2fe9b910cf3cbf4a0ab98a02ba45b3ec>");
	SetType(get_member_id(id, 0x0), "const int *");
	id = get_struc_id("LONG_DOUBLE_12");
	id = get_struc_id("std::_Zero_then_variadic_args_t");
	id = get_struc_id("google::base::CheckOpMessageBuilder");
	id = get_struc_id("std::integral_constant<bool,1>");
	id = get_struc_id("std::_Really_trivial_ptr_iterator_tag");
	id = get_struc_id("std::_Trivially_copyable_ptr_iterator_tag");
	id = get_struc_id("std::_General_ptr_iterator_tag");
	id = get_struc_id("std::_Wrap_alloc<std::allocator<std::_Container_proxy> >");
	id = get_struc_id("std::allocator<std::_Container_proxy>");
	id = get_struc_id("std::_Lockit");
	SetType(get_member_id(id, 0x0), "int");
	id = get_struc_id("ArmVM::struct_open_msg");
	SetType(get_member_id(id, 0x0), "ArmVM::base_msg");
	SetType(get_member_id(id, 0x14), "unsigned int");
	id = get_struc_id("ArmVM::base_msg");
	SetType(get_member_id(id, 0x0), "ArmVM::ENUM_CALL_TYPE");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "unsigned int");
	id = get_struc_id("ArmVM::struct_close_msg");
	SetType(get_member_id(id, 0x0), "ArmVM::base_msg");
	id = get_struc_id("ArmVM::struct_mmap_msg");
	SetType(get_member_id(id, 0x0), "ArmVM::base_msg");
	SetType(get_member_id(id, 0x14), "ArmVM::struct_mmap_info");
	id = get_struc_id("std::vector<unsigned char,std::allocator<unsigned char> >");
	id = get_struc_id("std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >");
	id = get_struc_id("std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>");
	id = get_struc_id("std::_Vector_val<std::_Simple_types<unsigned char> >");
	SetType(get_member_id(id, 0x0), "std::_Container_base12");
	SetType(get_member_id(id, 0x4), "char *");
	SetType(get_member_id(id, 0x8), "char *");
	SetType(get_member_id(id, 0xC), "char *");
	id = get_struc_id("std::_Container_base12");
	SetType(get_member_id(id, 0x0), "std::_Container_proxy *");
	id = get_struc_id("ArmVM::struct_ioctl_msg");
	SetType(get_member_id(id, 0x0), "ArmVM::base_msg");
	SetType(get_member_id(id, 0x14), "ArmVM::struct_ioctl_info");
	SetType(get_member_id(id, 0x1C), "ArmVM::binder_write_read");
	id = get_struc_id("_STARTUPINFOA");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "char *");
	SetType(get_member_id(id, 0x8), "char *");
	SetType(get_member_id(id, 0xC), "char *");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "unsigned int");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	SetType(get_member_id(id, 0x20), "unsigned int");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "unsigned int");
	SetType(get_member_id(id, 0x2C), "unsigned int");
	SetType(get_member_id(id, 0x30), "unsigned __int16");
	SetType(get_member_id(id, 0x32), "unsigned __int16");
	SetType(get_member_id(id, 0x34), "char *");
	SetType(get_member_id(id, 0x38), "void *");
	SetType(get_member_id(id, 0x3C), "void *");
	SetType(get_member_id(id, 0x40), "void *");
	id = get_struc_id("std::_One_then_variadic_args_t");
	id = get_struc_id("std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,std::_Iterator_base12>");
	id = get_struc_id("std::_Iterator012<std::bidirectional_iterator_tag,ArmVM::PipeThread *,int,ArmVM::PipeThread * const *,ArmVM::PipeThread * const &,std::_Iterator_base12>");
	SetType(get_member_id(id, 0x0), "std::_Iterator_base12");
	id = get_struc_id("std::_Iterator_base12");
	SetType(get_member_id(id, 0x0), "std::_Container_proxy *");
	SetType(get_member_id(id, 0x4), "std::_Iterator_base12 *");
	id = get_struc_id("std::integral_constant<bool,0>");
	id = get_struc_id("std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >");
	id = get_struc_id("std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >");
	id = get_struc_id("std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>");
	id = get_struc_id("std::_String_val<std::_Simple_types<wchar_t> >");
	SetType(get_member_id(id, 0x0), "std::_Container_base12");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "unsigned int");
	id = get_struc_id("std::_String_val<std::_Simple_types<wchar_t> >::_Bxty");
	SetType(get_member_id(id, 0x0), "wchar_t[8]");
	SetType(get_member_id(id, 0x1), "wchar_t *");
	SetType(get_member_id(id, 0x2), "char[8]");
	id = get_struc_id("_PROCESS_INFORMATION");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "unsigned int");
	id = get_struc_id("tagEXCEPTION_VISUALCPP_DEBUG_INFO");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "$4300C07596126F505AD2E11CC883E7B0");
	id = get_struc_id("$4300C07596126F505AD2E11CC883E7B0");
	SetType(get_member_id(id, 0x0), "$F49258853DEB26A691BF42EC51DEEB49");
	SetType(get_member_id(id, 0x1), "$ACC2D7BA72D8B5F31F315901218BB50A");
	SetType(get_member_id(id, 0x2), "$C98644B53BFCB8058A8635BFBD9C27B0");
	id = get_struc_id("$F49258853DEB26A691BF42EC51DEEB49");
	SetType(get_member_id(id, 0x0), "const char *");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	id = get_struc_id("$ACC2D7BA72D8B5F31F315901218BB50A");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "char *");
	id = get_struc_id("$C98644B53BFCB8058A8635BFBD9C27B0");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "char *");
	SetType(get_member_id(id, 0x10), "const wchar_t *");
	id = get_struc_id("std::_Init_locks");
	id = get_struc_id("__m128i");
	SetType(get_member_id(id, 0x0), "char[16]");
	SetType(get_member_id(id, 0x1), "__int16[8]");
	SetType(get_member_id(id, 0x2), "int[4]");
	SetType(get_member_id(id, 0x3), "__int64[2]");
	SetType(get_member_id(id, 0x4), "char[16]");
	SetType(get_member_id(id, 0x5), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x6), "unsigned int[4]");
	SetType(get_member_id(id, 0x7), "unsigned __int64[2]");
	id = get_struc_id("_s_HandlerType");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x8), "int");
	SetType(get_member_id(id, 0xC), "void *");
	id = get_struc_id("__crt_unique_heap_ptr<char,__crt_public_free_policy>");
	SetType(get_member_id(id, 0x0), "char *");
	id = get_struc_id("__crt_unique_heap_ptr<void,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "void *");
	id = get_struc_id("scoped_get_last_error_reset");
	SetType(get_member_id(id, 0x0), "unsigned int");
	id = get_struc_id("__crt_unique_heap_ptr<__vcrt_ptd,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "__vcrt_ptd *");
	id = get_struc_id("DName");
	SetType(get_member_id(id, 0x0), "DNameNode *");
	SetType(get_member_id(id, 0x4), "__int32");
	id = get_struc_id("TPI_t");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x1), "$08BD3D891899F43F57F1E55125C55774");
	id = get_struc_id("$08BD3D891899F43F57F1E55125C55774");
	SetType(get_member_id(id, 0x0), "__int32");
	id = get_struc_id("Replicator");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "DName *[10]");
	id = get_struc_id("DNameStatusNode");
	SetType(get_member_id(id, 0x0), "DNameNode");
	SetType(get_member_id(id, 0x4), "DNameStatus");
	SetType(get_member_id(id, 0x8), "int");
	id = get_struc_id("DNameNode");
	id = get_struc_id("UnDecorator");
	SetType(get_member_id(id, 0x0), "Replicator");
	SetType(get_member_id(id, 0x2C), "Replicator");
	id = get_struc_id("$EE28309FED38FA683D1DCD8E137722F5");
	SetType(get_member_id(id, 0x0), "float");
	SetType(get_member_id(id, 0x1), "long double");
	SetType(get_member_id(id, 0x2), "_FP80");
	SetType(get_member_id(id, 0x3), "_FP128");
	SetType(get_member_id(id, 0x4), "__int16");
	SetType(get_member_id(id, 0x5), "int");
	SetType(get_member_id(id, 0x6), "_I64");
	SetType(get_member_id(id, 0x7), "unsigned __int16");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0x9), "_U64");
	SetType(get_member_id(id, 0xA), "_BCD80");
	SetType(get_member_id(id, 0xB), "char *");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0xD), "_U32ARRAY");
	SetType(get_member_id(id, 0xE), "__int64");
	SetType(get_member_id(id, 0xF), "_FPQ64");
	id = get_struc_id("__m256i");
	SetType(get_member_id(id, 0x0), "char[32]");
	SetType(get_member_id(id, 0x1), "__int16[16]");
	SetType(get_member_id(id, 0x2), "int[8]");
	SetType(get_member_id(id, 0x3), "__int64[4]");
	SetType(get_member_id(id, 0x4), "char[32]");
	SetType(get_member_id(id, 0x5), "unsigned __int16[16]");
	SetType(get_member_id(id, 0x6), "unsigned int[8]");
	SetType(get_member_id(id, 0x7), "unsigned __int64[4]");
	id = get_struc_id("__crt_simd_cleanup_guard<1>");
	id = get_struc_id("__crt_simd_cleanup_guard<0>");
	id = get_struc_id("__crt_state_management::scoped_global_state_reset");
	id = get_struc_id("__crt_stdio_output::string_output_adapter_context<char>");
	SetType(get_member_id(id, 0x0), "char *");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "bool");
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> > >");
	id = get_struc_id("__crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> >");
	id = get_struc_id("__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> >");
	id = get_struc_id("__crt_stdio_output::output_adapter_data<char,__crt_stdio_output::string_output_adapter<char> >");
	id = get_struc_id("__crt_stdio_output::string_output_adapter<char>");
	id = get_struc_id("__crt_stdio_output::string_output_adapter_context<wchar_t>");
	SetType(get_member_id(id, 0x0), "wchar_t *");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "bool");
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >");
	id = get_struc_id("__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >");
	id = get_struc_id("__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >");
	id = get_struc_id("__crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >");
	id = get_struc_id("__crt_stdio_output::common_data<wchar_t>");
	SetType(get_member_id(id, 0x0), "unsigned __int64");
	SetType(get_member_id(id, 0x8), "__crt_locale_pointers *");
	SetType(get_member_id(id, 0xC), "int *");
	SetType(get_member_id(id, 0x10), "const wchar_t *");
	SetType(get_member_id(id, 0x14), "char *");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "__crt_stdio_output::state");
	SetType(get_member_id(id, 0x20), "unsigned int");
	SetType(get_member_id(id, 0x24), "int");
	SetType(get_member_id(id, 0x28), "int");
	SetType(get_member_id(id, 0x2C), "__crt_stdio_output::length_modifier");
	SetType(get_member_id(id, 0x30), "bool");
	SetType(get_member_id(id, 0x32), "wchar_t");
	SetType(get_member_id(id, 0x34), "$147BBAAC6F057C74482616A6F88094DB");
	SetType(get_member_id(id, 0x38), "int");
	SetType(get_member_id(id, 0x3C), "bool");
	SetType(get_member_id(id, 0x40), "__crt_stdio_output::formatting_buffer");
	id = get_struc_id("__crt_stdio_output::string_output_adapter<wchar_t>");
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> > >");
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >");
	SetType(get_member_id(id, 0x460), "const char *");
	SetType(get_member_id(id, 0xAA4), "int");
	SetType(get_member_id(id, 0xAA8), "int");
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::parameter_data");
	SetType(get_member_id(id, 0x4), "char");
	SetType(get_member_id(id, 0x8), "char *");
	SetType(get_member_id(id, 0xC), "__crt_stdio_output::length_modifier");
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >");
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >");
	SetType(get_member_id(id, 0x460), "const wchar_t *");
	SetType(get_member_id(id, 0xAA4), "int");
	SetType(get_member_id(id, 0xAA8), "int");
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::parameter_data");
	SetType(get_member_id(id, 0x4), "wchar_t");
	SetType(get_member_id(id, 0x8), "char *");
	SetType(get_member_id(id, 0xC), "__crt_stdio_output::length_modifier");
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> > >");
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >");
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >");
	id = get_struc_id("__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >");
	id = get_struc_id("__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >");
	id = get_struc_id("__crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >");
	id = get_struc_id("__crt_stdio_output::stream_output_adapter<wchar_t>");
	SetType(get_member_id(id, 0x0), "__crt_stdio_stream");
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> > >");
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >");
	SetType(get_member_id(id, 0x460), "const char *");
	SetType(get_member_id(id, 0xAA4), "int");
	SetType(get_member_id(id, 0xAA8), "int");
	id = get_struc_id("__crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> >");
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::parameter_data");
	SetType(get_member_id(id, 0x4), "char");
	SetType(get_member_id(id, 0x8), "char *");
	SetType(get_member_id(id, 0xC), "__crt_stdio_output::length_modifier");
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >");
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >");
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >");
	SetType(get_member_id(id, 0x460), "const wchar_t *");
	SetType(get_member_id(id, 0xAA4), "int");
	SetType(get_member_id(id, 0xAA8), "int");
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::parameter_data");
	SetType(get_member_id(id, 0x4), "wchar_t");
	SetType(get_member_id(id, 0x8), "char *");
	SetType(get_member_id(id, 0xC), "__crt_stdio_output::length_modifier");
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> > >");
	id = get_struc_id("__crt_errno_guard");
	SetType(get_member_id(id, 0x0), "int *");
	SetType(get_member_id(id, 0x4), "int");
	id = get_struc_id("__crt_unique_heap_ptr<unsigned char,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "char *");
	id = get_struc_id("argument_list<wchar_t>");
	SetType(get_member_id(id, 0x0), "wchar_t **");
	SetType(get_member_id(id, 0x4), "wchar_t **");
	SetType(get_member_id(id, 0x8), "wchar_t **");
	id = get_struc_id("__crt_unique_heap_ptr<wchar_t,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "wchar_t *");
	id = get_struc_id("expand_argument_wildcards::__l3::<lambda_c141fc1027167882accd25626224452e>");
	id = get_struc_id("__crt_unique_handle_t<__crt_findfile_traits>");
	SetType(get_member_id(id, 0x0), "void *");
	id = get_struc_id("expand_argument_wildcards::__l3::<lambda_bf9b52a1b7159214c0120e2e7dc7eac6>");
	id = get_struc_id("_WIN32_FIND_DATAW");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "_FILETIME");
	SetType(get_member_id(id, 0xC), "_FILETIME");
	SetType(get_member_id(id, 0x14), "_FILETIME");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	SetType(get_member_id(id, 0x20), "unsigned int");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "unsigned int");
	SetType(get_member_id(id, 0x2C), "wchar_t[260]");
	SetType(get_member_id(id, 0x234), "wchar_t[14]");
	id = get_struc_id("__crt_unique_heap_ptr<wchar_t *,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "wchar_t **");
	id = get_struc_id("__crt_unique_heap_ptr<__crt_report_hook_node<wchar_t>,__crt_internal_free_policy>");
	id = get_struc_id("__crt_unique_heap_ptr<__crt_report_hook_node<char>,__crt_internal_free_policy>");
	id = get_struc_id("message_box_arguments<char>");
	SetType(get_member_id(id, 0x0), "const char *");
	SetType(get_member_id(id, 0x4), "const char *");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "int");
	id = get_struc_id("__crt_unique_handle_t<__crt_handle_traits>");
	SetType(get_member_id(id, 0x0), "void *");
	id = get_struc_id("message_box_arguments<wchar_t>");
	SetType(get_member_id(id, 0x0), "const wchar_t *");
	SetType(get_member_id(id, 0x4), "const wchar_t *");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "int");
	id = get_struc_id("__crt_unique_heap_ptr<__crt_multibyte_data,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "__crt_multibyte_data *");
	id = get_struc_id("__crt_unique_heap_ptr<__crt_lowio_handle_data,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "__crt_lowio_handle_data *");
	id = get_struc_id("__crt_locale_strings");
	SetType(get_member_id(id, 0x0), "wchar_t[64]");
	SetType(get_member_id(id, 0x80), "wchar_t[64]");
	SetType(get_member_id(id, 0x100), "wchar_t[16]");
	SetType(get_member_id(id, 0x120), "wchar_t[85]");
	id = get_struc_id("__crt_unique_heap_ptr<__crt_locale_pointers,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "__crt_locale_pointers *");
	id = get_struc_id("__crt_unique_heap_ptr<__crt_locale_data,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "__crt_locale_data *");
	id = get_struc_id("__crt_ctype_compatibility_data");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "int");
	id = get_struc_id("__crt_scoped_stack_ptr<wchar_t>");
	SetType(get_member_id(id, 0x0), "wchar_t *const ");
	id = get_struc_id("__crt_unique_heap_ptr<__crt_lc_time_data,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "__crt_lc_time_data *");
	id = get_struc_id("__crt_scoped_stack_ptr_tag<wchar_t>");
	SetType(get_member_id(id, 0x0), "wchar_t *");
	id = get_struc_id("__crt_qualified_locale_data_downlevel");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	id = get_struc_id("tagUSEROBJECTFLAGS");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	id = get_struc_id("__crt_unique_heap_ptr<__acrt_ptd,__crt_internal_free_policy>");
	id = get_struc_id("__crt_scoped_get_last_error_reset");
	SetType(get_member_id(id, 0x0), "unsigned int");
	id = get_struc_id("_SYSTEM_INFO");
	SetType(get_member_id(id, 0x0), "$73046C24F4FC5F58248B06D5FDAB2A98");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "void *");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "unsigned int");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	SetType(get_member_id(id, 0x20), "unsigned __int16");
	SetType(get_member_id(id, 0x22), "unsigned __int16");
	id = get_struc_id("$73046C24F4FC5F58248B06D5FDAB2A98");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x1), "$409DFF2A380C4FFE2B587D0390AC124E");
	id = get_struc_id("$409DFF2A380C4FFE2B587D0390AC124E");
	SetType(get_member_id(id, 0x0), "unsigned __int16");
	SetType(get_member_id(id, 0x2), "unsigned __int16");
	id = get_struc_id("_CrtMemState");
	SetType(get_member_id(id, 0x4), "unsigned int[5]");
	SetType(get_member_id(id, 0x18), "unsigned int[5]");
	SetType(get_member_id(id, 0x2C), "unsigned int");
	SetType(get_member_id(id, 0x30), "unsigned int");
	id = get_struc_id("component_buffers<char>");
	SetType(get_member_id(id, 0x0), "char *");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "char *");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "char *");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "char *");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	id = get_struc_id("component_buffers<wchar_t>");
	SetType(get_member_id(id, 0x0), "wchar_t *");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "wchar_t *");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "wchar_t *");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "wchar_t *");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	id = get_struc_id("common_splitpath::__l6::<lambda_89bf6c7d200ebdd35efc9e01f25ff60a>");
	id = get_struc_id("common_splitpath::__l7::<lambda_90799d8c5786ba041b3216863ff21b9d>");
	id = get_struc_id("common_splitpath_s::__l9::<lambda_ab7779844739fab15369d72763ed67dd>");
	id = get_struc_id("common_splitpath_s::__l10::<lambda_0a1e3dd207ef52559f7207a49085fc8a>");
	id = get_struc_id("common_splitpath_s::__l9::<lambda_784ed6ee23c12b976dd1035fbb94141e>");
	id = get_struc_id("common_splitpath_s::__l10::<lambda_f1d7037141e450cf079124977c73fe51>");
	id = get_struc_id("common_splitpath::__l6::<lambda_a4b986acc854560fc3a7606b0264cc37>");
	id = get_struc_id("common_splitpath::__l7::<lambda_6312fea2aaef510d0417ffae002cffee>");
	id = get_struc_id("__crt_strtox::multiply_by_power_of_ten::__l2::unpack_index");
	SetType(get_member_id(id, 0x0), "unsigned __int16");
	SetType(get_member_id(id, 0x2), "char");
	SetType(get_member_id(id, 0x3), "char");
	id = get_struc_id("__crt_strtox::c_string_character_source<wchar_t>");
	SetType(get_member_id(id, 0x0), "const wchar_t *");
	SetType(get_member_id(id, 0x4), "const wchar_t **");
	id = get_struc_id("_UNICODE_STRING");
	SetType(get_member_id(id, 0x0), "unsigned __int16");
	SetType(get_member_id(id, 0x2), "unsigned __int16");
	SetType(get_member_id(id, 0x4), "wchar_t *");
	id = get_struc_id("$649C2944F320CE923A2CB8CA3DD58CA1");
	SetType(get_member_id(id, 0x0), "_SINGLE_LIST_ENTRY");
	SetType(get_member_id(id, 0x4), "unsigned __int16");
	SetType(get_member_id(id, 0x6), "unsigned __int16");
	id = get_struc_id("_RTC_framedesc");
	SetType(get_member_id(id, 0x0), "int");
	id = get_struc_id("std::_Container_proxy");
	SetType(get_member_id(id, 0x0), "std::_Container_base12 *");
	SetType(get_member_id(id, 0x4), "std::_Iterator_base12 *");
	id = get_struc_id("std::less<ArmVM::PipeThread *>");
	id = get_struc_id("std::bad_function_call");
	SetType(get_member_id(id, 0x0), "std::exception");
	id = get_struc_id("std::invalid_argument");
	SetType(get_member_id(id, 0x0), "std::logic_error");
	id = get_struc_id("std::overflow_error");
	SetType(get_member_id(id, 0x0), "std::runtime_error");
	id = get_struc_id("std::runtime_error");
	SetType(get_member_id(id, 0x0), "std::exception");
	id = get_struc_id("std::regex_error");
	SetType(get_member_id(id, 0x0), "std::runtime_error");
	SetType(get_member_id(id, 0xC), "std::regex_constants::error_type");
	id = get_struc_id("__crt_public_free_policy");
	id = get_struc_id("__crt_internal_free_policy");
	id = get_struc_id("type_info");
	SetType(get_member_id(id, 0x4), "__std_type_info_data");
	id = get_struc_id("__crt_fast_encoded_nullptr_t");
	id = get_struc_id("__crt_unique_heap_ptr<__crt_stdio_stream_data *,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "__crt_stdio_stream_data **");
	id = get_struc_id("__crt_char_traits<char>");
	id = get_struc_id("__crt_char_traits<wchar_t>");
	id = get_struc_id("__crt_call_and_cleanup::__l3::<lambda_507d9fd6b66e39451a8852ba73f804a7>");
	id = get_struc_id("__crt_unique_heap_ptr<void (__cdecl*)(void),__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "void (__cdecl **)()");
	id = get_struc_id("__crt_unique_heap_ptr<long,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "int *");
	id = get_struc_id("__crt_unique_heap_ptr<unsigned short,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "unsigned __int16 *");
	id = get_struc_id("__crt_unique_heap_ptr<lconv,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "lconv *");
	id = get_struc_id("__crt_unique_heap_ptr<__crt_stdio_stream_data,__crt_internal_free_policy>");
	SetType(get_member_id(id, 0x0), "__crt_stdio_stream_data *");
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_4980db0136e49a56f91ef52c46ca659a>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_9c074eaf62197b4fd0274ed9e7824161>");
	SetType(get_member_id(id, 0x0), "__acrt_lock_id");
	id = get_struc_id("__crt_seh_guarded_call<unsigned short>");
	id = get_struc_id("_putwch::__l3::<lambda_6e3e78bb6855d1e4040e022c1b427e22>");
	SetType(get_member_id(id, 0x0), "const wchar_t *");
	id = get_struc_id("binder_buffer");
	SetType(get_member_id(id, 0x0), "list_head");
	SetType(get_member_id(id, 0x8), "rb_node");
	SetType(get_member_id(id, 0x14), "__int8");
	SetType(get_member_id(id, 0x18), "binder_transaction *");
	SetType(get_member_id(id, 0x1C), "binder_node *");
	SetType(get_member_id(id, 0x20), "unsigned int");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "char[]");
	id = get_struc_id("binder_work");
	SetType(get_member_id(id, 0x0), "list_head");
	SetType(get_member_id(id, 0x8), "$959501DAFB7196048D4C26FFB5C708FD");
	id = get_struc_id("binder_proc");
	SetType(get_member_id(id, 0x0), "hlist_node");
	SetType(get_member_id(id, 0x8), "rb_root");
	SetType(get_member_id(id, 0xC), "rb_root");
	SetType(get_member_id(id, 0x10), "rb_root");
	SetType(get_member_id(id, 0x14), "rb_root");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "int");
	SetType(get_member_id(id, 0x20), "int");
	SetType(get_member_id(id, 0x24), "void *");
	SetType(get_member_id(id, 0x28), "int");
	SetType(get_member_id(id, 0x2C), "list_head");
	SetType(get_member_id(id, 0x34), "rb_root");
	SetType(get_member_id(id, 0x38), "unsigned int");
	SetType(get_member_id(id, 0x3C), "size_t");
	SetType(get_member_id(id, 0x40), "unsigned int");
	SetType(get_member_id(id, 0x44), "list_head");
	SetType(get_member_id(id, 0x4C), "struct pthread_cond_t_ *");
	SetType(get_member_id(id, 0x50), "binder_stats");
	SetType(get_member_id(id, 0x114), "list_head");
	SetType(get_member_id(id, 0x11C), "binder_proc *");
	SetType(get_member_id(id, 0x120), "int");
	SetType(get_member_id(id, 0x124), "int");
	SetType(get_member_id(id, 0x128), "int");
	SetType(get_member_id(id, 0x12C), "int");
	id = get_struc_id("hlist_node");
	SetType(get_member_id(id, 0x0), "hlist_node *");
	SetType(get_member_id(id, 0x4), "hlist_node **");
	id = get_struc_id("binder_node");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "binder_work");
	SetType(get_member_id(id, 0x10), "$4518549C31465BBC0CCB439717F56243");
	SetType(get_member_id(id, 0x1C), "binder_proc *");
	SetType(get_member_id(id, 0x20), "hlist_head");
	SetType(get_member_id(id, 0x24), "int");
	SetType(get_member_id(id, 0x28), "int");
	SetType(get_member_id(id, 0x2C), "int");
	SetType(get_member_id(id, 0x30), "void *");
	SetType(get_member_id(id, 0x34), "void *");
	SetType(get_member_id(id, 0x38), "__int8");
	SetType(get_member_id(id, 0x3C), "list_head");
	id = get_struc_id("$4518549C31465BBC0CCB439717F56243");
	SetType(get_member_id(id, 0x0), "rb_node");
	SetType(get_member_id(id, 0x1), "hlist_node");
	id = get_struc_id("$859530A495F323E34F6FF6F609195F24");
	SetType(get_member_id(id, 0x0), "$76E49E73D22C7EB97CD59DFF8F6549A8");
	SetType(get_member_id(id, 0x1), "char[8]");
	id = get_struc_id("$98F0E3D4AB8DBDB62B135BC69E08813A");
	SetType(get_member_id(id, 0x0), "float");
	SetType(get_member_id(id, 0x1), "long double");
	SetType(get_member_id(id, 0x2), "_FP80");
	SetType(get_member_id(id, 0x3), "_FP128");
	SetType(get_member_id(id, 0x4), "__int16");
	SetType(get_member_id(id, 0x5), "int");
	SetType(get_member_id(id, 0x6), "_I64");
	SetType(get_member_id(id, 0x7), "unsigned __int16");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0x9), "_U64");
	SetType(get_member_id(id, 0xA), "_BCD80");
	SetType(get_member_id(id, 0xB), "char *");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0xD), "_U32ARRAY");
	SetType(get_member_id(id, 0xE), "__int64");
	SetType(get_member_id(id, 0xF), "_FPQ64");
	id = get_struc_id("FILE");
	SetType(get_member_id(id, 0x0), "void *");
	id = get_struc_id("$1394F7ADFE0FA40BE002A2F71F8DC39C");
	SetType(get_member_id(id, 0x0), "_SINGLE_LIST_ENTRY");
	SetType(get_member_id(id, 0x4), "unsigned __int16");
	SetType(get_member_id(id, 0x6), "unsigned __int16");
	id = get_struc_id("binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993");
	SetType(get_member_id(id, 0x0), "struct binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993::$76E49E73D22C7EB97CD59DFF8F6549A8");
	SetType(get_member_id(id, 0x1), "unsigned __int8[8]");
	id = get_struc_id("binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993::$76E49E73D22C7EB97CD59DFF8F6549A8");
	SetType(get_member_id(id, 0x0), "const void *");
	SetType(get_member_id(id, 0x4), "const void *");
	id = get_struc_id("binder_ref");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "rb_node");
	SetType(get_member_id(id, 0x10), "rb_node");
	SetType(get_member_id(id, 0x1C), "hlist_node");
	SetType(get_member_id(id, 0x24), "binder_proc *");
	SetType(get_member_id(id, 0x28), "binder_node *");
	SetType(get_member_id(id, 0x2C), "unsigned int");
	SetType(get_member_id(id, 0x30), "int");
	SetType(get_member_id(id, 0x34), "int");
	SetType(get_member_id(id, 0x38), "binder_ref_death *");
	id = get_struc_id("flat_binder_object");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "union_u2");
	SetType(get_member_id(id, 0xC), "flat_binder_object *");
	id = get_struc_id("union_u2");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x1), "int");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"_MEMORY_BASIC_INFORMATION",0);
	id = add_struc(-1,"rb_node",0);
	id = add_struc(-1,"rb_root",0);
	id = add_struc(-1,"_FILETIME",0);
	id = add_struc(-1,"LARGE_INTEGER",1);
	id = add_struc(-1,"_LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E",0);
	id = add_struc(-1,"_RTL_CRITICAL_SECTION",0);
	id = add_struc(-1,"struc_open",0);
	id = add_struc(-1,"struc_base",0);
	id = add_struc(-1,"struc_mmap",0);
	id = add_struc(-1,"binder_write_read",0);
	id = add_struc(-1,"struc_11",0);
	id = add_struc(-1,"struc_10",0);
	id = add_struc(-1,"binder_thread",0);
	id = add_struc(-1,"list_head",0);
	id = add_struc(-1,"binder_transaction_data::$D994BC419564A2309B07BE823C2EC040::$76E49E73D22C7EB97CD59DFF8F6549A8",0);
	id = add_struc(-1,"binder_transaction_data::$D079491E8577E084BD162F03C2F595EB",1);
	id = add_struc(-1,"binder_transaction_data",0);
	id = add_struc(-1,"binder_transaction_data::$D994BC419564A2309B07BE823C2EC040",1);
	id = add_struc(-1,"hlist_head",0);
	id = add_struc(-1,"$2F9EC58EC9314F6C9AF43E98CF85E2FF",1);
	id = add_struc(-1,"$0FAE717D548792FBF476D9B78C010AEF",1);
	id = add_struc(-1,"$76E49E73D22C7EB97CD59DFF8F6549A8",0);
	id = add_struc(-1,"std::_Nil",0);
	id = add_struc(-1,"FuncInfo",0);
	id = add_struc(-1,"UnwindMapEntry",0);
	id = add_struc(-1,"TryBlockMapEntry",0);
	id = add_struc(-1,"HandlerType",0);
	id = add_struc(-1,"std::set<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *> >",0);
	id = add_struc(-1,"std::_Tree<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> >",0);
	id = add_struc(-1,"std::_Tree_comp_alloc<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> >",0);
	id = add_struc(-1,"std::_Compressed_pair<std::less<ArmVM::PipeThread *>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>,1>",0);
	id = add_struc(-1,"std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>",0);
	id = add_struc(-1,"std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >",0);
	id = add_struc(-1,"std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > >",0);
	id = add_struc(-1,"std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,std::_Iterator_base0>",0);
	id = add_struc(-1,"std::basic_ostream<char,std::char_traits<char> >::sentry",0);
	id = add_struc(-1,"std::basic_ostream<char,std::char_traits<char> >::_Sentry_base",0);
	id = add_struc(-1,"ArmVM::base_struct_msg",0);
	id = add_struc(-1,"google::CheckOpString",0);
	id = add_struc(-1,"ArmVM::struct_mmap_info",0);
	id = add_struc(-1,"ArmVM::struct_ioctl_info",0);
	id = add_struc(-1,"ArmVM::binder_write_read",0);
	id = add_struc(-1,"_EXCEPTION_RECORD",0);
	id = add_struc(-1,"_CONTEXT",0);
	id = add_struc(-1,"_FLOATING_SAVE_AREA",0);
	id = add_struc(-1,"_EXCEPTION_POINTERS",0);
	id = add_struc(-1,"FT",1);
	id = add_struc(-1,"_LARGE_INTEGER",1);
	id = add_struc(-1,"$FAF74743FBE1C8632047CFB668F7028A",0);
	id = add_struc(-1,"_onexit_table_t",0);
	id = add_struc(-1,"CPPEH_RECORD",0);
	id = add_struc(-1,"_EH3_EXCEPTION_REGISTRATION",0);
	id = add_struc(-1,"__std_exception_data",0);
	id = add_struc(-1,"FrameInfo",0);
	id = add_struc(-1,"EHExceptionRecord",0);
	id = add_struc(-1,"EHExceptionRecord::EHParameters",0);
	id = add_struc(-1,"__vcrt_ptd",0);
	id = add_struc(-1,"_HeapManager",0);
	id = add_struc(-1,"CatchGuardRN",0);
	id = add_struc(-1,"TranslatorGuardRN",0);
	id = add_struc(-1,"_exception",0);
	id = add_struc(-1,"_FPIEEE_RECORD",0);
	id = add_struc(-1,"_FPIEEE_EXCEPTION_FLAGS",0);
	id = add_struc(-1,"_FPIEEE_VALUE",0);
	id = add_struc(-1,"$A29487D7856F9D52B62F7F0CCF38DDE9",1);
	id = add_struc(-1,"_FP80",0);
	id = add_struc(-1,"_FP128",0);
	id = add_struc(-1,"_I64",0);
	id = add_struc(-1,"_U64",0);
	id = add_struc(-1,"_BCD80",0);
	id = add_struc(-1,"_U32ARRAY",0);
	id = add_struc(-1,"_FPQ64",0);
	id = add_struc(-1,"_LocaleUpdate",0);
	id = add_struc(-1,"__crt_locale_pointers",0);
	id = add_struc(-1,"fenv_get_set",0);
	id = add_struc(-1,"__crt_state_management::dual_state_global<int (__cdecl*)(_exception *)>",0);
	id = add_struc(-1,"fenv_t",0);
	id = add_struc(-1,"__crt_stdio_stream",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<char,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__acrt_stdio_temporary_buffering_guard",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> > >",0);
	id = add_struc(-1,"__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> >",0);
	id = add_struc(-1,"__crt_stdio_output::output_adapter_data<char,__crt_stdio_output::stream_output_adapter<char> >",0);
	id = add_struc(-1,"__crt_stdio_output::common_data<char>",0);
	id = add_struc(-1,"$147BBAAC6F057C74482616A6F88094DB",1);
	id = add_struc(-1,"__crt_stdio_output::formatting_buffer",0);
	id = add_struc(-1,"__crt_stdio_output::stream_output_adapter<char>",0);
	id = add_struc(-1,"_CRT_DOUBLE",0);
	id = add_struc(-1,"__crt_unique_handle_t<__crt_hmodule_traits>",0);
	id = add_struc(-1,"argument_list<char>",0);
	id = add_struc(-1,"_WIN32_FIND_DATAA",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<char *,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_state_management::dual_state_global<void (__cdecl*)(int)>",0);
	id = add_struc(-1,"__crt_state_management::dual_state_global<void (__cdecl*)(wchar_t const *,wchar_t const *,wchar_t const *,unsigned int,unsigned int)>",0);
	id = add_struc(-1,"_cpinfo",0);
	id = add_struc(-1,"write_result",0);
	id = add_struc(-1,"_STARTUPINFOW",0);
	id = add_struc(-1,"__crt_state_management::dual_state_global<long>",0);
	id = add_struc(-1,"__crt_state_management::dual_state_global<int (__cdecl*)(unsigned int)>",0);
	id = add_struc(-1,"_strflt",0);
	id = add_struc(-1,"scoped_fp_state_reset",0);
	id = add_struc(-1,"__crt_strtox::c_string_character_source<char>",0);
	id = add_struc(-1,"lconv",0);
	id = add_struc(-1,"__crt_state_management::dual_state_global<char * *>",0);
	id = add_struc(-1,"binder_transaction_log",0);
	id = add_struc(-1,"binder_transaction_log_entry",0);
	id = add_struc(-1,"__crt_state_management::dual_state_global<wchar_t * *>",0);
	id = add_struc(-1,"_IMAGE_DOS_HEADER",0);
	id = add_struc(-1,"__crt_state_management::dual_state_global<__crt_locale_data *>",0);
	id = add_struc(-1,"binder_stats",0);
	id = add_struc(-1,"_dbl",1);
	id = add_struc(-1,"__crt_stdio_stream_data",0);
	id = add_struc(-1,"$203B8869A37B333161EE04A31AF8E2BE",1);
	id = add_struc(-1,"_iobuf",0);
	id = add_struc(-1,"__crt_locale_data",0);
	id = add_struc(-1,"__crt_locale_data_public",0);
	id = add_struc(-1,"__crt_locale_refcount",0);
	id = add_struc(-1,"__crt_multibyte_data",0);
	id = add_struc(-1,"std::locale::id",0);
	id = add_struc(-1,"_IMAGE_LOAD_CONFIG_DIRECTORY32",0);
	id = add_struc(-1,"_NLG_INFO",0);
	id = add_struc(-1,"__crt_lowio_handle_data",0);
	id = add_struc(-1,"__crt_signal_action_t",0);
	id = add_struc(-1,"__crt_lc_time_data",0);
	id = add_struc(-1,"__type_info_node",0);
	id = add_struc(-1,"_SLIST_HEADER",1);
	id = add_struc(-1,"$B4AD88E0C92B4EA31AC7984D1C6144B5",0);
	id = add_struc(-1,"_SINGLE_LIST_ENTRY",0);
	id = add_struc(-1,"GUID",0);
	id = add_struc(-1,"_EH4_SCOPETABLE",0);
	id = add_struc(-1,"_EH4_SCOPETABLE_RECORD",0);
	id = add_struc(-1,"std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > >,bool>",0);
	id = add_struc(-1,"std::bad_array_new_length",0);
	id = add_struc(-1,"std::bad_alloc",0);
	id = add_struc(-1,"std::exception",0);
	id = add_struc(-1,"_s__ThrowInfo",0);
	id = add_struc(-1,"std::length_error",0);
	id = add_struc(-1,"std::logic_error",0);
	id = add_struc(-1,"std::out_of_range",0);
	id = add_struc(-1,"std::bad_exception",0);
	id = add_struc(-1,"__std_type_info_data",0);
	id = add_struc(-1,"__acrt_lock_stream_and_call::__l3::<lambda_db08b09ef7aa9d4f8620ce68402612bc>",0);
	id = add_struc(-1,"__acrt_lock_stream_and_call::__l4::<lambda_3ae262bc35d4ba6a3825c4f6bcaaf95c>",0);
	id = add_struc(-1,"__crt_seh_guarded_call<int>",0);
	id = add_struc(-1,"common_vfprintf::__l11::<lambda_4f2c1eaeead2a5fc776db5b62ea0fb9b>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l3::<lambda_995298e7d72eb4c2aab26c0585b3abe5>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l4::<lambda_293819299cbf9a7022e18b56a874bb5c>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l3::<lambda_800076c951b434888f4765a74a194fcc>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l4::<lambda_6dbb1268764f43b569ce7b67e331d33a>",0);
	id = add_struc(-1,"_execute_onexit_table::__l22::<lambda_275893d493268fdec8709772e3fcec0e>",0);
	id = add_struc(-1,"_register_onexit_function::__l23::<lambda_4e60a939b0d047cfe11ddc22648dfba9>",0);
	id = add_struc(-1,"__acrt_initializer",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l3::<lambda_51b6e8b1eb166f2a3faf91f424b38130>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l4::<lambda_0b5a4a3e68152e1d9b943535f5f47bed>",0);
	id = add_struc(-1,"__crt_seh_guarded_call<void>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l3::<lambda_3518db117f0e7cdb002338c5d3c47b6c>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l4::<lambda_abdedf541bb04549bc734292b4a045d4>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l3::<lambda_5b71d36f03204c0beab531769a5b5694>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l4::<lambda_8f9ce462984622f9bf76b59e2aaaf805>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l3::<lambda_9df27f884b057bc3edfc946cb5b7cf47>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l4::<lambda_cc0d902bcbbeb830f749456577db4721>",0);
	id = add_struc(-1,"construct_ptd::__l3::<lambda_e69574bed617af4e071282c136b37893>",0);
	id = add_struc(-1,"construct_ptd::__l4::<lambda_b2ea41f6bbb362cd97d94c6828d90b61>",0);
	id = add_struc(-1,"destroy_ptd::__l15::<lambda_6250bd4b2a391816dd638c3bf72b0bcb>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l3::<lambda_a048d3beccc847880fc8490e18b82769>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l4::<lambda_f7496a158712204296dd6628a163878e>",0);
	id = add_struc(-1,"__crt_seh_guarded_call<void (__cdecl*)(int)>",0);
	id = add_struc(-1,"__acrt_get_sigabrt_handler::__l3::<lambda_ec61778202f4f5fc7e7711acc23c3bca>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l3::<lambda_978dc153c237d78434369da87b74ff60>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l4::<lambda_4a8533e2866a575feecb8298ce776b0d>",0);
	id = add_struc(-1,"__acrt_lowio_lock_fh_and_call::__l3::<lambda_61cee617f5178ae960314fd4d05640a0>",0);
	id = add_struc(-1,"__acrt_lowio_lock_fh_and_call::__l4::<lambda_9cd88cf8ad10232537feb2133f08c833>",0);
	id = add_struc(-1,"_commit::__l20::<lambda_6978c1fb23f02e42e1d9e99668cc68aa>",0);
	id = add_struc(-1,"__crt_strtox::big_integer",0);
	id = add_struc(-1,"__acrt_lowio_lock_fh_and_call::__l3::<lambda_123407a5e2ac06da108355a851863b7a>",0);
	id = add_struc(-1,"__acrt_lowio_lock_fh_and_call::__l4::<lambda_ae55bdf541ad94d75914d381c370e64d>",0);
	id = add_struc(-1,"_close::__l20::<lambda_2fe9b910cf3cbf4a0ab98a02ba45b3ec>",0);
	id = add_struc(-1,"LONG_DOUBLE_12",0);
	id = add_struc(-1,"std::_Zero_then_variadic_args_t",0);
	id = add_struc(-1,"google::base::CheckOpMessageBuilder",0);
	id = add_struc(-1,"std::integral_constant<bool,1>",0);
	id = add_struc(-1,"std::_Really_trivial_ptr_iterator_tag",0);
	id = add_struc(-1,"std::_Trivially_copyable_ptr_iterator_tag",0);
	id = add_struc(-1,"std::_General_ptr_iterator_tag",0);
	id = add_struc(-1,"std::_Wrap_alloc<std::allocator<std::_Container_proxy> >",0);
	id = add_struc(-1,"std::allocator<std::_Container_proxy>",0);
	id = add_struc(-1,"std::_Lockit",0);
	id = add_struc(-1,"ArmVM::struct_open_msg",0);
	id = add_struc(-1,"ArmVM::base_msg",0);
	id = add_struc(-1,"ArmVM::struct_close_msg",0);
	id = add_struc(-1,"ArmVM::struct_mmap_msg",0);
	id = add_struc(-1,"std::vector<unsigned char,std::allocator<unsigned char> >",0);
	id = add_struc(-1,"std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >",0);
	id = add_struc(-1,"std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>",0);
	id = add_struc(-1,"std::_Vector_val<std::_Simple_types<unsigned char> >",0);
	id = add_struc(-1,"std::_Container_base12",0);
	id = add_struc(-1,"ArmVM::struct_ioctl_msg",0);
	id = add_struc(-1,"_STARTUPINFOA",0);
	id = add_struc(-1,"std::_One_then_variadic_args_t",0);
	id = add_struc(-1,"std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,std::_Iterator_base12>",0);
	id = add_struc(-1,"std::_Iterator012<std::bidirectional_iterator_tag,ArmVM::PipeThread *,int,ArmVM::PipeThread * const *,ArmVM::PipeThread * const &,std::_Iterator_base12>",0);
	id = add_struc(-1,"std::_Iterator_base12",0);
	id = add_struc(-1,"std::integral_constant<bool,0>",0);
	id = add_struc(-1,"std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >",0);
	id = add_struc(-1,"std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >",0);
	id = add_struc(-1,"std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>",0);
	id = add_struc(-1,"std::_String_val<std::_Simple_types<wchar_t> >",0);
	id = add_struc(-1,"std::_String_val<std::_Simple_types<wchar_t> >::_Bxty",1);
	id = add_struc(-1,"_PROCESS_INFORMATION",0);
	id = add_struc(-1,"tagEXCEPTION_VISUALCPP_DEBUG_INFO",0);
	id = add_struc(-1,"$4300C07596126F505AD2E11CC883E7B0",1);
	id = add_struc(-1,"$F49258853DEB26A691BF42EC51DEEB49",0);
	id = add_struc(-1,"$ACC2D7BA72D8B5F31F315901218BB50A",0);
	id = add_struc(-1,"$C98644B53BFCB8058A8635BFBD9C27B0",0);
	id = add_struc(-1,"std::_Init_locks",0);
	id = add_struc(-1,"__m128i",1);
	id = add_struc(-1,"_s_HandlerType",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<char,__crt_public_free_policy>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<void,__crt_internal_free_policy>",0);
	id = add_struc(-1,"scoped_get_last_error_reset",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__vcrt_ptd,__crt_internal_free_policy>",0);
	id = add_struc(-1,"DName",0);
	id = add_struc(-1,"TPI_t",1);
	id = add_struc(-1,"$08BD3D891899F43F57F1E55125C55774",0);
	id = add_struc(-1,"Replicator",0);
	id = add_struc(-1,"DNameStatusNode",0);
	id = add_struc(-1,"DNameNode",0);
	id = add_struc(-1,"UnDecorator",0);
	id = add_struc(-1,"$EE28309FED38FA683D1DCD8E137722F5",1);
	id = add_struc(-1,"__m256i",1);
	id = add_struc(-1,"__crt_simd_cleanup_guard<1>",0);
	id = add_struc(-1,"__crt_simd_cleanup_guard<0>",0);
	id = add_struc(-1,"__crt_state_management::scoped_global_state_reset",0);
	id = add_struc(-1,"__crt_stdio_output::string_output_adapter_context<char>",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> > >",0);
	id = add_struc(-1,"__crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> >",0);
	id = add_struc(-1,"__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> >",0);
	id = add_struc(-1,"__crt_stdio_output::output_adapter_data<char,__crt_stdio_output::string_output_adapter<char> >",0);
	id = add_struc(-1,"__crt_stdio_output::string_output_adapter<char>",0);
	id = add_struc(-1,"__crt_stdio_output::string_output_adapter_context<wchar_t>",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >",0);
	id = add_struc(-1,"__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >",0);
	id = add_struc(-1,"__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >",0);
	id = add_struc(-1,"__crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >",0);
	id = add_struc(-1,"__crt_stdio_output::common_data<wchar_t>",0);
	id = add_struc(-1,"__crt_stdio_output::string_output_adapter<wchar_t>",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> > >",0);
	id = add_struc(-1,"__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >",0);
	id = add_struc(-1,"__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::parameter_data",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >",0);
	id = add_struc(-1,"__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >",0);
	id = add_struc(-1,"__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::parameter_data",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> > >",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >",0);
	id = add_struc(-1,"__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >",0);
	id = add_struc(-1,"__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >",0);
	id = add_struc(-1,"__crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >",0);
	id = add_struc(-1,"__crt_stdio_output::stream_output_adapter<wchar_t>",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> > >",0);
	id = add_struc(-1,"__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >",0);
	id = add_struc(-1,"__crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> >",0);
	id = add_struc(-1,"__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::parameter_data",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >",0);
	id = add_struc(-1,"__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >",0);
	id = add_struc(-1,"__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::parameter_data",0);
	id = add_struc(-1,"__crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> > >",0);
	id = add_struc(-1,"__crt_errno_guard",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<unsigned char,__crt_internal_free_policy>",0);
	id = add_struc(-1,"argument_list<wchar_t>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<wchar_t,__crt_internal_free_policy>",0);
	id = add_struc(-1,"expand_argument_wildcards::__l3::<lambda_c141fc1027167882accd25626224452e>",0);
	id = add_struc(-1,"__crt_unique_handle_t<__crt_findfile_traits>",0);
	id = add_struc(-1,"expand_argument_wildcards::__l3::<lambda_bf9b52a1b7159214c0120e2e7dc7eac6>",0);
	id = add_struc(-1,"_WIN32_FIND_DATAW",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<wchar_t *,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__crt_report_hook_node<wchar_t>,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__crt_report_hook_node<char>,__crt_internal_free_policy>",0);
	id = add_struc(-1,"message_box_arguments<char>",0);
	id = add_struc(-1,"__crt_unique_handle_t<__crt_handle_traits>",0);
	id = add_struc(-1,"message_box_arguments<wchar_t>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__crt_multibyte_data,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__crt_lowio_handle_data,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_locale_strings",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__crt_locale_pointers,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__crt_locale_data,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_ctype_compatibility_data",0);
	id = add_struc(-1,"__crt_scoped_stack_ptr<wchar_t>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__crt_lc_time_data,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_scoped_stack_ptr_tag<wchar_t>",0);
	id = add_struc(-1,"__crt_qualified_locale_data_downlevel",0);
	id = add_struc(-1,"tagUSEROBJECTFLAGS",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__acrt_ptd,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_scoped_get_last_error_reset",0);
	id = add_struc(-1,"_SYSTEM_INFO",0);
	id = add_struc(-1,"$73046C24F4FC5F58248B06D5FDAB2A98",1);
	id = add_struc(-1,"$409DFF2A380C4FFE2B587D0390AC124E",0);
	id = add_struc(-1,"_CrtMemState",0);
	id = add_struc(-1,"component_buffers<char>",0);
	id = add_struc(-1,"component_buffers<wchar_t>",0);
	id = add_struc(-1,"common_splitpath::__l6::<lambda_89bf6c7d200ebdd35efc9e01f25ff60a>",0);
	id = add_struc(-1,"common_splitpath::__l7::<lambda_90799d8c5786ba041b3216863ff21b9d>",0);
	id = add_struc(-1,"common_splitpath_s::__l9::<lambda_ab7779844739fab15369d72763ed67dd>",0);
	id = add_struc(-1,"common_splitpath_s::__l10::<lambda_0a1e3dd207ef52559f7207a49085fc8a>",0);
	id = add_struc(-1,"common_splitpath_s::__l9::<lambda_784ed6ee23c12b976dd1035fbb94141e>",0);
	id = add_struc(-1,"common_splitpath_s::__l10::<lambda_f1d7037141e450cf079124977c73fe51>",0);
	id = add_struc(-1,"common_splitpath::__l6::<lambda_a4b986acc854560fc3a7606b0264cc37>",0);
	id = add_struc(-1,"common_splitpath::__l7::<lambda_6312fea2aaef510d0417ffae002cffee>",0);
	id = add_struc(-1,"__crt_strtox::multiply_by_power_of_ten::__l2::unpack_index",0);
	id = add_struc(-1,"__crt_strtox::c_string_character_source<wchar_t>",0);
	id = add_struc(-1,"_UNICODE_STRING",0);
	id = add_struc(-1,"$649C2944F320CE923A2CB8CA3DD58CA1",0);
	id = add_struc(-1,"_RTC_framedesc",0);
	id = add_struc(-1,"std::_Container_proxy",0);
	id = add_struc(-1,"std::less<ArmVM::PipeThread *>",0);
	id = add_struc(-1,"std::bad_function_call",0);
	id = add_struc(-1,"std::invalid_argument",0);
	id = add_struc(-1,"std::overflow_error",0);
	id = add_struc(-1,"std::runtime_error",0);
	id = add_struc(-1,"std::regex_error",0);
	id = add_struc(-1,"__crt_public_free_policy",0);
	id = add_struc(-1,"__crt_internal_free_policy",0);
	id = add_struc(-1,"type_info",0);
	id = add_struc(-1,"__crt_fast_encoded_nullptr_t",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__crt_stdio_stream_data *,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_char_traits<char>",0);
	id = add_struc(-1,"__crt_char_traits<wchar_t>",0);
	id = add_struc(-1,"__crt_call_and_cleanup::__l3::<lambda_507d9fd6b66e39451a8852ba73f804a7>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<void (__cdecl*)(void),__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<long,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<unsigned short,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<lconv,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__crt_unique_heap_ptr<__crt_stdio_stream_data,__crt_internal_free_policy>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l3::<lambda_4980db0136e49a56f91ef52c46ca659a>",0);
	id = add_struc(-1,"__acrt_lock_and_call::__l4::<lambda_9c074eaf62197b4fd0274ed9e7824161>",0);
	id = add_struc(-1,"__crt_seh_guarded_call<unsigned short>",0);
	id = add_struc(-1,"_putwch::__l3::<lambda_6e3e78bb6855d1e4040e022c1b427e22>",0);
	id = add_struc(-1,"binder_buffer",0);
	id = add_struc(-1,"binder_work",0);
	id = add_struc(-1,"binder_proc",0);
	id = add_struc(-1,"hlist_node",0);
	id = add_struc(-1,"binder_node",0);
	id = add_struc(-1,"$4518549C31465BBC0CCB439717F56243",1);
	id = add_struc(-1,"$859530A495F323E34F6FF6F609195F24",1);
	id = add_struc(-1,"$98F0E3D4AB8DBDB62B135BC69E08813A",1);
	id = add_struc(-1,"FILE",0);
	id = add_struc(-1,"$1394F7ADFE0FA40BE002A2F71F8DC39C",0);
	id = add_struc(-1,"binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993",1);
	id = add_struc(-1,"binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993::$76E49E73D22C7EB97CD59DFF8F6549A8",0);
	id = add_struc(-1,"binder_ref",0);
	id = add_struc(-1,"flat_binder_object",0);
	id = add_struc(-1,"union_u2",1);
	
	id = get_struc_id("_MEMORY_BASIC_INFORMATION");
	mid = add_struc_member(id,"BaseAddress",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"AllocationBase",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"AllocationProtect",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RegionSize",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"State",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Protect",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Type",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("$FAF74743FBE1C8632047CFB668F7028A");
	mid = add_struc_member(id,"LowPart",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"HighPart",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("LARGE_INTEGER");
	mid = add_struc_member(id,"anonymous_0",	0,	0x60000400,	get_struc_id("$FAF74743FBE1C8632047CFB668F7028A"),	16);
	mid = add_struc_member(id,"u",	0,	0x60000400,	get_struc_id("$FAF74743FBE1C8632047CFB668F7028A"),	16);
	mid = add_struc_member(id,"QuadPart",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"__s0",	0,	0x60000400,	get_struc_id("$FAF74743FBE1C8632047CFB668F7028A"),	16);
	set_struc_align(id,3);
	
	id = get_struc_id("_LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E");
	mid = add_struc_member(id,"LowPart",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"HighPart",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("struc_open");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10",	0X10,	0x20000400,	-1,	4);
	
	id = get_struc_id("struc_base");
	mid = add_struc_member(id,"pid",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tid",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"uid",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ext_len",	0XC,	0x20000400,	-1,	4);
	
	id = get_struc_id("struc_mmap");
	mid = add_struc_member(id,"pid",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tid",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"uid",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ext_len",	0XC,	0x20000400,	-1,	4);
	
	id = get_struc_id("binder_write_read");
	mid = add_struc_member(id,"write_size",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"write_consumed",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"write_buffer",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"read_size",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"read_consumed",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"read_buffer",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("struc_11");
	mid = add_struc_member(id,"ioctl_code",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"arg",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8",	0X8,	0x60000400,	get_struc_id("binder_write_read"),	24);
	
	id = get_struc_id("struc_10");
	mid = add_struc_member(id,"ioctl_code",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"arg",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wrbuf",	0X8,	0x60000400,	get_struc_id("binder_write_read"),	24);
	
	id = get_struc_id("rb_node");
	mid = add_struc_member(id,"rb_parent_color",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rb_right",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"rb_left",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("list_head");
	mid = add_struc_member(id,"next",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"prev",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_stats");
	mid = add_struc_member(id,"br",	0,	0x20000400,	-1,	72);
	mid = add_struc_member(id,"bc",	0X48,	0x20000400,	-1,	68);
	mid = add_struc_member(id,"obj_created",	0X8C,	0x20000400,	-1,	28);
	mid = add_struc_member(id,"obj_deleted",	0XA8,	0x20000400,	-1,	28);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_thread");
	mid = add_struc_member(id,"proc",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"rb_node",	0X4,	0x60000400,	get_struc_id("rb_node"),	12);
	mid = add_struc_member(id,"pid",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"looper",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"transaction_stack",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"todo",	0X1C,	0x60000400,	get_struc_id("list_head"),	8);
	mid = add_struc_member(id,"return_error",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"return_error2",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wait",	0X2C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"stats",	0X30,	0x60000400,	get_struc_id("binder_stats"),	196);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_transaction_data::$D079491E8577E084BD162F03C2F595EB");
	mid = add_struc_member(id,"handle",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ptr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("$2F9EC58EC9314F6C9AF43E98CF85E2FF");
	mid = add_struc_member(id,"handle",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ptr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("$76E49E73D22C7EB97CD59DFF8F6549A8");
	mid = add_struc_member(id,"buffer",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"offsets",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("$859530A495F323E34F6FF6F609195F24");
	mid = add_struc_member(id,"ptr",	0,	0x60000400,	get_struc_id("$76E49E73D22C7EB97CD59DFF8F6549A8"),	8);
	mid = add_struc_member(id,"buf",	0,	0x000400,	-1,	8);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_transaction_data");
	mid = add_struc_member(id,"target",	0,	0x60000400,	get_struc_id("$2F9EC58EC9314F6C9AF43E98CF85E2FF"),	4);
	mid = add_struc_member(id,"cookie",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"code",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sender_pid",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sender_euid",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"data_size",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"offsets_size",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"data",	0X20,	0x60000400,	get_struc_id("$859530A495F323E34F6FF6F609195F24"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_transaction_data::$D994BC419564A2309B07BE823C2EC040::$76E49E73D22C7EB97CD59DFF8F6549A8");
	mid = add_struc_member(id,"buffer",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"offsets",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_transaction_data::$D994BC419564A2309B07BE823C2EC040");
	mid = add_struc_member(id,"ptr",	0,	0x60000400,	get_struc_id("binder_transaction_data::$D994BC419564A2309B07BE823C2EC040::$76E49E73D22C7EB97CD59DFF8F6549A8"),	8);
	mid = add_struc_member(id,"buf",	0,	0x000400,	-1,	8);
	set_struc_align(id,2);
	
	id = get_struc_id("$0FAE717D548792FBF476D9B78C010AEF");
	mid = add_struc_member(id,"ptr",	0,	0x60000400,	get_struc_id("$76E49E73D22C7EB97CD59DFF8F6549A8"),	8);
	mid = add_struc_member(id,"buf",	0,	0x000400,	-1,	8);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Nil");
	
	id = get_struc_id("FuncInfo");
	mid = add_struc_member(id,"magicNumber",	0,	0x21100400,	-1,	4);
	mid = add_struc_member(id,"maxState",	0X4,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"pUnwindMap",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"nTryBlocks",	0XC,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"pTryBlockMap",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"nIPMapEntries",	0X14,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"pIPtoStateMap",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pESTypeList",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"EHFlags",	0X20,	0x21100400,	-1,	4);
	
	id = get_struc_id("UnwindMapEntry");
	mid = add_struc_member(id,"toState",	0,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"action",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("TryBlockMapEntry");
	mid = add_struc_member(id,"tryLow",	0,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"tryHigh",	0X4,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"catchHigh",	0X8,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"nCatches",	0XC,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"pHandlerArray",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("HandlerType");
	mid = add_struc_member(id,"adjectives",	0,	0x21100400,	-1,	4);
	mid = add_struc_member(id,"pType",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dispCatchObj",	0X8,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"addressOfHandler",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("std::_Container_base12");
	mid = add_struc_member(id,"_Myproxy",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >");
	mid = add_struc_member(id,"_Myhead",	0,	0x60000400,	get_struc_id("std::_Container_base12"),	4);
	mid = add_struc_member(id,"_Mysize",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>");
	mid = add_struc_member(id,"_Myval2",	0,	0x60000400,	get_struc_id("std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Compressed_pair<std::less<ArmVM::PipeThread *>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>,1>");
	mid = add_struc_member(id,"_Myval2",	0,	0x60000400,	get_struc_id("std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Tree_comp_alloc<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> >");
	mid = add_struc_member(id,"_Mypair",	0,	0x60000400,	get_struc_id("std::_Compressed_pair<std::less<ArmVM::PipeThread *>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>,1>"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Tree<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::_Tree_comp_alloc<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> >"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("std::set<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::_Tree<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> >"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("std::basic_ostream<char,std::char_traits<char> >::_Sentry_base");
	mid = add_struc_member(id,"_Myostr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::basic_ostream<char,std::char_traits<char> >::sentry");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::basic_ostream<char,std::char_traits<char> >::_Sentry_base"),	4);
	mid = add_struc_member(id,"_Ok",	0X4,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("ArmVM::base_struct_msg");
	mid = add_struc_member(id,"pid",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tid",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"uid",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ext_len",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("google::CheckOpString");
	mid = add_struc_member(id,"str_",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_EXCEPTION_RECORD");
	mid = add_struc_member(id,"ExceptionCode",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ExceptionFlags",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ExceptionRecord",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ExceptionAddress",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"NumberParameters",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ExceptionInformation",	0X14,	0x20000400,	-1,	60);
	set_struc_align(id,2);
	
	id = get_struc_id("_FLOATING_SAVE_AREA");
	mid = add_struc_member(id,"ControlWord",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"StatusWord",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TagWord",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ErrorOffset",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ErrorSelector",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DataOffset",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DataSelector",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RegisterArea",	0X1C,	0x000400,	-1,	80);
	mid = add_struc_member(id,"Spare0",	0X6C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_CONTEXT");
	mid = add_struc_member(id,"ContextFlags",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Dr0",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Dr1",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Dr2",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Dr3",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Dr6",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Dr7",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"FloatSave",	0X1C,	0x60000400,	get_struc_id("_FLOATING_SAVE_AREA"),	112);
	mid = add_struc_member(id,"SegGs",	0X8C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SegFs",	0X90,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SegEs",	0X94,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SegDs",	0X98,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Edi",	0X9C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Esi",	0XA0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Ebx",	0XA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Edx",	0XA8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Ecx",	0XAC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Eax",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Ebp",	0XB4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Eip",	0XB8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SegCs",	0XBC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"EFlags",	0XC0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Esp",	0XC4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SegSs",	0XC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ExtendedRegisters",	0XCC,	0x000400,	-1,	512);
	set_struc_align(id,2);
	
	id = get_struc_id("_EXCEPTION_POINTERS");
	mid = add_struc_member(id,"ExceptionRecord",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ContextRecord",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_FILETIME");
	mid = add_struc_member(id,"dwLowDateTime",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwHighDateTime",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("FT");
	mid = add_struc_member(id,"ft_scalar",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"ft_struct",	0,	0x60000400,	get_struc_id("_FILETIME"),	8);
	set_struc_align(id,3);
	
	id = get_struc_id("_LARGE_INTEGER");
	mid = add_struc_member(id,"__s0",	0,	0x60000400,	get_struc_id("$FAF74743FBE1C8632047CFB668F7028A"),	8);
	mid = add_struc_member(id,"u",	0,	0x60000400,	get_struc_id("$FAF74743FBE1C8632047CFB668F7028A"),	8);
	mid = add_struc_member(id,"QuadPart",	0,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("_onexit_table_t");
	mid = add_struc_member(id,"_first",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_last",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_end",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_EH3_EXCEPTION_REGISTRATION");
	mid = add_struc_member(id,"Next",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ExceptionHandler",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ScopeTable",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"TryLevel",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("CPPEH_RECORD");
	mid = add_struc_member(id,"old_esp",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"exc_ptr",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"registration",	0X8,	0x60000400,	get_struc_id("_EH3_EXCEPTION_REGISTRATION"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("FrameInfo");
	mid = add_struc_member(id,"pExceptionObject",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pNext",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("EHExceptionRecord::EHParameters");
	mid = add_struc_member(id,"magicNumber",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pExceptionObject",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pThrowInfo",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("EHExceptionRecord");
	mid = add_struc_member(id,"ExceptionCode",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ExceptionFlags",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ExceptionRecord",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ExceptionAddress",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"NumberParameters",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"params",	0X14,	0x60000400,	get_struc_id("EHExceptionRecord::EHParameters"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("__vcrt_ptd");
	mid = add_struc_member(id,"_NLG_dwCode",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_unexpected",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_translator",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_purecall",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_curexception",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_curcontext",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_ProcessingThrow",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_curexcspec",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_cxxReThrow",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_pFrameInfoChain",	0X24,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_HeapManager");
	mid = add_struc_member(id,"pOpNew",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pOpDelete",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"head",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"tail",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"blockLeft",	0X10,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("CatchGuardRN");
	mid = add_struc_member(id,"pNext",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pFrameHandler",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"RandomCookie",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pFuncInfo",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pRN",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"CatchDepth",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("TranslatorGuardRN");
	mid = add_struc_member(id,"pNext",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pFrameHandler",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"RandomCookie",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pFuncInfo",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pRN",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"CatchDepth",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pMarkerRN",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_ESP",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_EBP",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"DidUnwind",	0X24,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("LONG_DOUBLE_12");
	mid = add_struc_member(id,"value",	0,	0x40000400,	-1,	10);
	mid = add_struc_member(id,"padding",	0XA,	0x000400,	-1,	2);
	
	id = get_struc_id("_exception");
	mid = add_struc_member(id,"type",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"name",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"arg1",	0X8,	0x90000400,	-1,	8);
	mid = add_struc_member(id,"arg2",	0X10,	0x90000400,	-1,	8);
	mid = add_struc_member(id,"retval",	0X18,	0x60000400,	get_struc_id("LONG_DOUBLE_12"),	12);
	set_struc_align(id,3);
	
	id = get_struc_id("_FPIEEE_EXCEPTION_FLAGS");
	mid = add_struc_member(id,"_bf0",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_FP80");
	mid = add_struc_member(id,"W",	0,	0x10000400,	-1,	10);
	set_struc_align(id,1);
	
	id = get_struc_id("_FP128");
	mid = add_struc_member(id,"W",	0,	0x20000400,	-1,	16);
	set_struc_align(id,2);
	
	id = get_struc_id("_I64");
	mid = add_struc_member(id,"W",	0,	0x20000400,	-1,	8);
	set_struc_align(id,2);
	
	id = get_struc_id("_U64");
	mid = add_struc_member(id,"W",	0,	0x20000400,	-1,	8);
	set_struc_align(id,2);
	
	id = get_struc_id("_BCD80");
	mid = add_struc_member(id,"W",	0,	0x10000400,	-1,	10);
	set_struc_align(id,1);
	
	id = get_struc_id("_U32ARRAY");
	mid = add_struc_member(id,"W",	0,	0x20000400,	-1,	16);
	set_struc_align(id,2);
	
	id = get_struc_id("_FPQ64");
	mid = add_struc_member(id,"W",	0,	0x30000400,	-1,	16);
	set_struc_align(id,3);
	
	id = get_struc_id("$98F0E3D4AB8DBDB62B135BC69E08813A");
	mid = add_struc_member(id,"Fp32Value",	0,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"Fp64Value",	0,	0x60000400,	get_struc_id("LONG_DOUBLE_12"),	12);
	mid = add_struc_member(id,"Fp80Value",	0,	0x60000400,	get_struc_id("_FP80"),	10);
	mid = add_struc_member(id,"Fp128Value",	0,	0x60000400,	get_struc_id("_FP128"),	16);
	mid = add_struc_member(id,"I16Value",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"I32Value",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I64Value",	0,	0x60000400,	get_struc_id("_I64"),	8);
	mid = add_struc_member(id,"U16Value",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"U32Value",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"U64Value",	0,	0x60000400,	get_struc_id("_U64"),	8);
	mid = add_struc_member(id,"Bcd80Value",	0,	0x60000400,	get_struc_id("_BCD80"),	10);
	mid = add_struc_member(id,"StringValue",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"CompareValue",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"U32ArrayValue",	0,	0x60000400,	get_struc_id("_U32ARRAY"),	16);
	mid = add_struc_member(id,"Q64Value",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"Fpq64Value",	0,	0x60000400,	get_struc_id("_FPQ64"),	16);
	set_struc_align(id,3);
	
	id = get_struc_id("_FPIEEE_VALUE");
	mid = add_struc_member(id,"Value",	0,	0x60000400,	get_struc_id("$98F0E3D4AB8DBDB62B135BC69E08813A"),	16);
	mid = add_struc_member(id,"_bf10",	0X10,	0x20000400,	-1,	4);
	set_struc_align(id,4);
	
	id = get_struc_id("_FPIEEE_RECORD");
	mid = add_struc_member(id,"_bf0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Cause",	0X4,	0x60000400,	get_struc_id("_FPIEEE_EXCEPTION_FLAGS"),	4);
	mid = add_struc_member(id,"Enable",	0X8,	0x60000400,	get_struc_id("_FPIEEE_EXCEPTION_FLAGS"),	4);
	mid = add_struc_member(id,"Status",	0XC,	0x60000400,	get_struc_id("_FPIEEE_EXCEPTION_FLAGS"),	4);
	mid = add_struc_member(id,"Operand1",	0X10,	0x60000400,	get_struc_id("_FPIEEE_VALUE"),	32);
	mid = add_struc_member(id,"Operand2",	0X30,	0x60000400,	get_struc_id("_FPIEEE_VALUE"),	32);
	mid = add_struc_member(id,"Result",	0X50,	0x60000400,	get_struc_id("_FPIEEE_VALUE"),	32);
	set_struc_align(id,4);
	
	id = get_struc_id("$A29487D7856F9D52B62F7F0CCF38DDE9");
	mid = add_struc_member(id,"Fp32Value",	0,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"Fp64Value",	0,	0x60000400,	get_struc_id("LONG_DOUBLE_12"),	12);
	mid = add_struc_member(id,"Fp80Value",	0,	0x60000400,	get_struc_id("_FP80"),	10);
	mid = add_struc_member(id,"Fp128Value",	0,	0x60000400,	get_struc_id("_FP128"),	16);
	mid = add_struc_member(id,"I16Value",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"I32Value",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I64Value",	0,	0x60000400,	get_struc_id("_I64"),	8);
	mid = add_struc_member(id,"U16Value",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"U32Value",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"U64Value",	0,	0x60000400,	get_struc_id("_U64"),	8);
	mid = add_struc_member(id,"Bcd80Value",	0,	0x60000400,	get_struc_id("_BCD80"),	10);
	mid = add_struc_member(id,"StringValue",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"CompareValue",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"U32ArrayValue",	0,	0x60000400,	get_struc_id("_U32ARRAY"),	16);
	mid = add_struc_member(id,"Q64Value",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"Fpq64Value",	0,	0x60000400,	get_struc_id("_FPQ64"),	16);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_locale_pointers");
	mid = add_struc_member(id,"locinfo",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"mbcinfo",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_LocaleUpdate");
	mid = add_struc_member(id,"_ptd",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_locale_pointers",	0X4,	0x60000400,	get_struc_id("__crt_locale_pointers"),	8);
	mid = add_struc_member(id,"_updated",	0XC,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("fenv_get_set");
	mid = add_struc_member(id,"_Fe_ctl",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Fe_stat",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Fe_pad",	0X8,	0x20000400,	-1,	20);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_state_management::dual_state_global<int (__cdecl*)(_exception *)>");
	mid = add_struc_member(id,"_value",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_stdio_temporary_buffering_guard");
	mid = add_struc_member(id,"_stream",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_flag",	0X4,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("$147BBAAC6F057C74482616A6F88094DB");
	mid = add_struc_member(id,"_narrow_string",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_wide_string",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<char,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::formatting_buffer");
	mid = add_struc_member(id,"_member_buffer",	0,	0x000400,	-1,	1024);
	mid = add_struc_member(id,"_dynamic_buffer_size",	0X400,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_dynamic_buffer",	0X404,	0x60000400,	get_struc_id("__crt_unique_heap_ptr<char,__crt_internal_free_policy>"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::common_data<char>");
	mid = add_struc_member(id,"_options",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_locale",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_cached_errno",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_format_it",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_valist_it",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_characters_written",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_state",	0X1C,	0x28800400,	get_enum("__crt_stdio_output::state"),	4);
	mid = add_struc_member(id,"_flags",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_field_width",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_precision",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_length",	0X2C,	0x28800400,	get_enum("__crt_stdio_output::length_modifier"),	4);
	mid = add_struc_member(id,"_suppress_output",	0X30,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_format_char",	0X31,	0x000400,	-1,	1);
	mid = add_struc_member(id,"___u13",	0X34,	0x60000400,	get_struc_id("$147BBAAC6F057C74482616A6F88094DB"),	4);
	mid = add_struc_member(id,"_string_length",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_string_is_wide",	0X3C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_buffer",	0X40,	0x60000400,	get_struc_id("__crt_stdio_output::formatting_buffer"),	1032);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_stream");
	mid = add_struc_member(id,"_stream",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::stream_output_adapter<char>");
	mid = add_struc_member(id,"_stream",	0,	0x60000400,	get_struc_id("__crt_stdio_stream"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::output_adapter_data<char,__crt_stdio_output::stream_output_adapter<char> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::common_data<char>"),	1096);
	mid = add_struc_member(id,"_output_adapter",	0X448,	0x60000400,	get_struc_id("__crt_stdio_output::stream_output_adapter<char>"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::output_adapter_data<char,__crt_stdio_output::stream_output_adapter<char> >"),	1104);
	mid = add_struc_member(id,"_current_pass",	0X450,	0x28800400,	get_enum("__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> >::pass"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("_CRT_DOUBLE");
	mid = add_struc_member(id,"x",	0,	0x60000400,	get_struc_id("LONG_DOUBLE_12"),	12);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_unique_handle_t<__crt_hmodule_traits>");
	mid = add_struc_member(id,"_handle",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("argument_list<char>");
	mid = add_struc_member(id,"_first",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_last",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_end",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_WIN32_FIND_DATAA");
	mid = add_struc_member(id,"dwFileAttributes",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ftCreationTime",	0X4,	0x60000400,	get_struc_id("_FILETIME"),	8);
	mid = add_struc_member(id,"ftLastAccessTime",	0XC,	0x60000400,	get_struc_id("_FILETIME"),	8);
	mid = add_struc_member(id,"ftLastWriteTime",	0X14,	0x60000400,	get_struc_id("_FILETIME"),	8);
	mid = add_struc_member(id,"nFileSizeHigh",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nFileSizeLow",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwReserved0",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwReserved1",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cFileName",	0X2C,	0x000400,	-1,	260);
	mid = add_struc_member(id,"cAlternateFileName",	0X130,	0x000400,	-1,	14);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<char *,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_state_management::dual_state_global<void (__cdecl*)(int)>");
	mid = add_struc_member(id,"_value",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_state_management::dual_state_global<void (__cdecl*)(wchar_t const *,wchar_t const *,wchar_t const *,unsigned int,unsigned int)>");
	mid = add_struc_member(id,"_value",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_cpinfo");
	mid = add_struc_member(id,"MaxCharSize",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DefaultChar",	0X4,	0x000400,	-1,	2);
	mid = add_struc_member(id,"LeadByte",	0X6,	0x000400,	-1,	12);
	set_struc_align(id,2);
	
	id = get_struc_id("write_result");
	mid = add_struc_member(id,"error_code",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"char_count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lf_count",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_STARTUPINFOW");
	mid = add_struc_member(id,"cb",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpReserved",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpDesktop",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpTitle",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dwX",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwY",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwXSize",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwYSize",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwXCountChars",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwYCountChars",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwFillAttribute",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwFlags",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wShowWindow",	0X30,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"cbReserved2",	0X32,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"lpReserved2",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hStdInput",	0X38,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hStdOutput",	0X3C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hStdError",	0X40,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_state_management::dual_state_global<long>");
	mid = add_struc_member(id,"_value",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_state_management::dual_state_global<int (__cdecl*)(unsigned int)>");
	mid = add_struc_member(id,"_value",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_strflt");
	mid = add_struc_member(id,"sign",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"decpt",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mantissa",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("fenv_t");
	mid = add_struc_member(id,"_Fe_ctl",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Fe_stat",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("scoped_fp_state_reset");
	mid = add_struc_member(id,"_environment",	0,	0x60000400,	get_struc_id("fenv_t"),	8);
	mid = add_struc_member(id,"_requires_reset",	0X8,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_strtox::c_string_character_source<char>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_end",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("lconv");
	mid = add_struc_member(id,"decimal_point",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"thousands_sep",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"grouping",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"int_curr_symbol",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"currency_symbol",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"mon_decimal_point",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"mon_thousands_sep",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"mon_grouping",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"positive_sign",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"negative_sign",	0X24,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"int_frac_digits",	0X28,	0x000400,	-1,	1);
	mid = add_struc_member(id,"frac_digits",	0X29,	0x000400,	-1,	1);
	mid = add_struc_member(id,"p_cs_precedes",	0X2A,	0x000400,	-1,	1);
	mid = add_struc_member(id,"p_sep_by_space",	0X2B,	0x000400,	-1,	1);
	mid = add_struc_member(id,"n_cs_precedes",	0X2C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"n_sep_by_space",	0X2D,	0x000400,	-1,	1);
	mid = add_struc_member(id,"p_sign_posn",	0X2E,	0x000400,	-1,	1);
	mid = add_struc_member(id,"n_sign_posn",	0X2F,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_W_decimal_point",	0X30,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_thousands_sep",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_int_curr_symbol",	0X38,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_currency_symbol",	0X3C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_mon_decimal_point",	0X40,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_mon_thousands_sep",	0X44,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_positive_sign",	0X48,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_negative_sign",	0X4C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_state_management::dual_state_global<char * *>");
	mid = add_struc_member(id,"_value",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_transaction_log_entry");
	mid = add_struc_member(id,"debug_id",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"call_type",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"from_proc",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"from_thread",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"target_handle",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"to_proc",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"to_thread",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"to_node",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"data_size",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"offsets_size",	0X24,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_transaction_log");
	mid = add_struc_member(id,"next",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"full",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"entry",	0X8,	0x60000400,	get_struc_id("binder_transaction_log_entry"),	1280);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_state_management::dual_state_global<wchar_t * *>");
	mid = add_struc_member(id,"_value",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_IMAGE_DOS_HEADER");
	mid = add_struc_member(id,"e_magic",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_cblp",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_cp",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_crlc",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_cparhdr",	0X8,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_minalloc",	0XA,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_maxalloc",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_ss",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_sp",	0X10,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_csum",	0X12,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_ip",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_cs",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_lfarlc",	0X18,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_ovno",	0X1A,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_res",	0X1C,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"e_oemid",	0X24,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_oeminfo",	0X26,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"e_res2",	0X28,	0x10000400,	-1,	20);
	mid = add_struc_member(id,"e_lfanew",	0X3C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_state_management::dual_state_global<__crt_locale_data *>");
	mid = add_struc_member(id,"_value",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_dbl");
	mid = add_struc_member(id,"lng",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"dbl",	0,	0x60000400,	get_struc_id("LONG_DOUBLE_12"),	12);
	set_struc_align(id,3);
	
	id = get_struc_id("_RTL_CRITICAL_SECTION");
	mid = add_struc_member(id,"DebugInfo",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"LockCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RecursionCount",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"OwningThread",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"LockSemaphore",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"SpinCount",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_iobuf");
	mid = add_struc_member(id,"_Placeholder",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("$203B8869A37B333161EE04A31AF8E2BE");
	mid = add_struc_member(id,"_public_file",	0,	0x60000400,	get_struc_id("_iobuf"),	4);
	mid = add_struc_member(id,"_ptr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_stream_data");
	mid = add_struc_member(id,"___u0",	0,	0x60000400,	get_struc_id("$203B8869A37B333161EE04A31AF8E2BE"),	4);
	mid = add_struc_member(id,"_base",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_cnt",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_flags",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_file",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_charbuf",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_bufsiz",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_tmpfname",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_lock",	0X20,	0x60000400,	get_struc_id("_RTL_CRITICAL_SECTION"),	24);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_locale_data_public");
	mid = add_struc_member(id,"_locale_pctype",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_locale_mb_cur_max",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_locale_lc_codepage",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_locale_refcount");
	mid = add_struc_member(id,"locale",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"wlocale",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"refcount",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"wrefcount",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_locale_data");
	mid = add_struc_member(id,"_public",	0,	0x60000400,	get_struc_id("__crt_locale_data_public"),	12);
	mid = add_struc_member(id,"refcount",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lc_collate_cp",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lc_time_cp",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lc_clike",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lc_category",	0X1C,	0x60000400,	get_struc_id("__crt_locale_refcount"),	96);
	mid = add_struc_member(id,"lconv_intl_refcount",	0X7C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lconv_num_refcount",	0X80,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lconv_mon_refcount",	0X84,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lconv",	0X88,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ctype1_refcount",	0X8C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ctype1",	0X90,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pclmap",	0X94,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pcumap",	0X98,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lc_time_curr",	0X9C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"locale_name",	0XA0,	0x25500400,	0XFFFFFFFF,	24,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_multibyte_data");
	mid = add_struc_member(id,"refcount",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mbcodepage",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ismbcodepage",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mbulinfo",	0XC,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"mbctype",	0X18,	0x000400,	-1,	257);
	mid = add_struc_member(id,"mbcasemap",	0X119,	0x000400,	-1,	256);
	mid = add_struc_member(id,"mblocalename",	0X21C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::locale::id");
	mid = add_struc_member(id,"_Id",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_IMAGE_LOAD_CONFIG_DIRECTORY32");
	mid = add_struc_member(id,"Size",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TimeDateStamp",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MajorVersion",	0X8,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"MinorVersion",	0XA,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"GlobalFlagsClear",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GlobalFlagsSet",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CriticalSectionDefaultTimeout",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DeCommitFreeBlockThreshold",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DeCommitTotalFreeThreshold",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"LockPrefixTable",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MaximumAllocationSize",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"VirtualMemoryThreshold",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ProcessHeapFlags",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ProcessAffinityMask",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CSDVersion",	0X34,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"Reserved1",	0X36,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"EditList",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SecurityCookie",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SEHandlerTable",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SEHandlerCount",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GuardCFCheckFunctionPointer",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Reserved2",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GuardCFFunctionTable",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GuardCFFunctionCount",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GuardFlags",	0X58,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_NLG_INFO");
	mid = add_struc_member(id,"dwSig",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"uoffDestination",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwCode",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"uoffFramePointer",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_lowio_handle_data");
	mid = add_struc_member(id,"lock",	0,	0x60000400,	get_struc_id("_RTL_CRITICAL_SECTION"),	24);
	mid = add_struc_member(id,"osfhnd",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"startpos",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"osfile",	0X28,	0x000400,	-1,	1);
	mid = add_struc_member(id,"textmode",	0X29,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_pipe_lookahead",	0X2A,	0x000400,	-1,	3);
	mid = add_struc_member(id,"_bf2d",	0X2D,	0x000400,	-1,	1);
	mid = add_struc_member(id,"dbcsBuffer",	0X2E,	0x000400,	-1,	1);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_signal_action_t");
	mid = add_struc_member(id,"_exception_number",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_signal_number",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_action",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_lc_time_data");
	mid = add_struc_member(id,"wday_abbr",	0,	0x25500400,	0XFFFFFFFF,	28,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"wday",	0X1C,	0x25500400,	0XFFFFFFFF,	28,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"month_abbr",	0X38,	0x25500400,	0XFFFFFFFF,	48,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"month",	0X68,	0x25500400,	0XFFFFFFFF,	48,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ampm",	0X98,	0x25500400,	0XFFFFFFFF,	8,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ww_sdatefmt",	0XA0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ww_ldatefmt",	0XA4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ww_timefmt",	0XA8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ww_caltype",	0XAC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"refcount",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_W_wday_abbr",	0XB4,	0x25500400,	0XFFFFFFFF,	28,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_wday",	0XD0,	0x25500400,	0XFFFFFFFF,	28,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_month_abbr",	0XEC,	0x25500400,	0XFFFFFFFF,	48,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_month",	0X11C,	0x25500400,	0XFFFFFFFF,	48,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_ampm",	0X14C,	0x25500400,	0XFFFFFFFF,	8,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_ww_sdatefmt",	0X154,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_ww_ldatefmt",	0X158,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_ww_timefmt",	0X15C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_W_ww_locale_name",	0X160,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_SINGLE_LIST_ENTRY");
	mid = add_struc_member(id,"Next",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("$1394F7ADFE0FA40BE002A2F71F8DC39C");
	mid = add_struc_member(id,"Next",	0,	0x60000400,	get_struc_id("_SINGLE_LIST_ENTRY"),	4);
	mid = add_struc_member(id,"Depth",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"CpuId",	0X6,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("_SLIST_HEADER");
	mid = add_struc_member(id,"Alignment",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"__s1",	0,	0x60000400,	get_struc_id("$1394F7ADFE0FA40BE002A2F71F8DC39C"),	8);
	set_struc_align(id,3);
	
	id = get_struc_id("__type_info_node");
	mid = add_struc_member(id,"_Header",	0,	0x60000400,	get_struc_id("_SLIST_HEADER"),	8);
	set_struc_align(id,3);
	
	id = get_struc_id("$B4AD88E0C92B4EA31AC7984D1C6144B5");
	mid = add_struc_member(id,"Next",	0,	0x60000400,	get_struc_id("_SINGLE_LIST_ENTRY"),	4);
	mid = add_struc_member(id,"Depth",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"CpuId",	0X6,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("GUID");
	mid = add_struc_member(id,"Data1",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Data2",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"Data3",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"Data4",	0X8,	0x000400,	-1,	8);
	set_struc_align(id,2);
	
	id = get_struc_id("_EH4_SCOPETABLE_RECORD");
	mid = add_struc_member(id,"EnclosingLevel",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"FilterFunc",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"HandlerFunc",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_EH4_SCOPETABLE");
	mid = add_struc_member(id,"GSCookieOffset",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GSCookieXOROffset",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"EHCookieOffset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"EHCookieXOROffset",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ScopeRecord",	0X10,	0x60000400,	get_struc_id("_EH4_SCOPETABLE_RECORD"),	0);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,std::_Iterator_base0>");
	mid = add_struc_member(id,"_Ptr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,std::_Iterator_base0>"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > >,bool>");
	return id;
}

static Structures_1(id) {
        auto mid;

	mid = add_struc_member(id,"first",	0,	0x60000400,	get_struc_id("std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > >"),	4);
	mid = add_struc_member(id,"second",	0X4,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("__std_exception_data");
	mid = add_struc_member(id,"_What",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_DoFree",	0X4,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("std::exception");
	mid = add_struc_member(id,"vfptr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_Data",	0X4,	0x60000400,	get_struc_id("__std_exception_data"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("std::bad_alloc");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::exception"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("std::bad_array_new_length");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::bad_alloc"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("_s__ThrowInfo");
	mid = add_struc_member(id,"attributes",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmfnUnwind",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pForwardCompat",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pCatchableTypeArray",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::logic_error");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::exception"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("std::length_error");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::logic_error"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("std::out_of_range");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::logic_error"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("std::bad_exception");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::exception"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_stream_and_call::__l3::<lambda_db08b09ef7aa9d4f8620ce68402612bc>");
	mid = add_struc_member(id,"stream",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_stream_and_call::__l4::<lambda_3ae262bc35d4ba6a3825c4f6bcaaf95c>");
	mid = add_struc_member(id,"stream",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_seh_guarded_call<int>");
	
	id = get_struc_id("common_vfprintf::__l11::<lambda_4f2c1eaeead2a5fc776db5b62ea0fb9b>");
	mid = add_struc_member(id,"stream",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"locale",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"options",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"format",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"arglist",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_995298e7d72eb4c2aab26c0585b3abe5>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_293819299cbf9a7022e18b56a874bb5c>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_800076c951b434888f4765a74a194fcc>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_6dbb1268764f43b569ce7b67e331d33a>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_execute_onexit_table::__l22::<lambda_275893d493268fdec8709772e3fcec0e>");
	mid = add_struc_member(id,"table",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_register_onexit_function::__l23::<lambda_4e60a939b0d047cfe11ddc22648dfba9>");
	mid = add_struc_member(id,"table",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"function",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_initializer");
	mid = add_struc_member(id,"_initialize",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_uninitialize",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_51b6e8b1eb166f2a3faf91f424b38130>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_0b5a4a3e68152e1d9b943535f5f47bed>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_seh_guarded_call<void>");
	
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_3518db117f0e7cdb002338c5d3c47b6c>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_abdedf541bb04549bc734292b4a045d4>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_5b71d36f03204c0beab531769a5b5694>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_8f9ce462984622f9bf76b59e2aaaf805>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_9df27f884b057bc3edfc946cb5b7cf47>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_cc0d902bcbbeb830f749456577db4721>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("construct_ptd::__l3::<lambda_e69574bed617af4e071282c136b37893>");
	mid = add_struc_member(id,"ptd",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("construct_ptd::__l4::<lambda_b2ea41f6bbb362cd97d94c6828d90b61>");
	mid = add_struc_member(id,"ptd",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"locale_data",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("destroy_ptd::__l15::<lambda_6250bd4b2a391816dd638c3bf72b0bcb>");
	mid = add_struc_member(id,"ptd",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_a048d3beccc847880fc8490e18b82769>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_f7496a158712204296dd6628a163878e>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_seh_guarded_call<void (__cdecl*)(int)>");
	
	id = get_struc_id("__acrt_get_sigabrt_handler::__l3::<lambda_ec61778202f4f5fc7e7711acc23c3bca>");
	
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_978dc153c237d78434369da87b74ff60>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_4a8533e2866a575feecb8298ce776b0d>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lowio_lock_fh_and_call::__l3::<lambda_61cee617f5178ae960314fd4d05640a0>");
	mid = add_struc_member(id,"fh",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lowio_lock_fh_and_call::__l4::<lambda_9cd88cf8ad10232537feb2133f08c833>");
	mid = add_struc_member(id,"fh",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_commit::__l20::<lambda_6978c1fb23f02e42e1d9e99668cc68aa>");
	mid = add_struc_member(id,"fh",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_strtox::big_integer");
	mid = add_struc_member(id,"_used",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_data",	0X4,	0x20000400,	-1,	460);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lowio_lock_fh_and_call::__l3::<lambda_123407a5e2ac06da108355a851863b7a>");
	mid = add_struc_member(id,"fh",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lowio_lock_fh_and_call::__l4::<lambda_ae55bdf541ad94d75914d381c370e64d>");
	mid = add_struc_member(id,"fh",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_close::__l20::<lambda_2fe9b910cf3cbf4a0ab98a02ba45b3ec>");
	mid = add_struc_member(id,"fh",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Zero_then_variadic_args_t");
	
	id = get_struc_id("google::base::CheckOpMessageBuilder");
	mid = add_struc_member(id,"stream_",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::integral_constant<bool,1>");
	
	id = get_struc_id("std::_Really_trivial_ptr_iterator_tag");
	
	id = get_struc_id("std::_Trivially_copyable_ptr_iterator_tag");
	
	id = get_struc_id("std::_General_ptr_iterator_tag");
	
	id = get_struc_id("std::_Wrap_alloc<std::allocator<std::_Container_proxy> >");
	
	id = get_struc_id("std::allocator<std::_Container_proxy>");
	
	id = get_struc_id("std::_Lockit");
	mid = add_struc_member(id,"_Locktype",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("ArmVM::base_msg");
	mid = add_struc_member(id,"call_type",	0,	0x28800400,	get_enum("ArmVM::ENUM_CALL_TYPE"),	4);
	mid = add_struc_member(id,"pid",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tid",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"uid",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ext_len",	0X10,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("ArmVM::struct_open_msg");
	mid = add_struc_member(id,"msg",	0,	0x60000400,	get_struc_id("ArmVM::base_msg"),	20);
	mid = add_struc_member(id,"fd",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("ArmVM::struct_close_msg");
	mid = add_struc_member(id,"msg",	0,	0x60000400,	get_struc_id("ArmVM::base_msg"),	20);
	set_struc_align(id,2);
	
	id = get_struc_id("ArmVM::struct_mmap_info");
	mid = add_struc_member(id,"map_size",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"map_addr",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("ArmVM::struct_mmap_msg");
	mid = add_struc_member(id,"msg",	0,	0x60000400,	get_struc_id("ArmVM::base_msg"),	20);
	mid = add_struc_member(id,"map_info",	0X14,	0x60000400,	get_struc_id("ArmVM::struct_mmap_info"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Vector_val<std::_Simple_types<unsigned char> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::_Container_base12"),	4);
	mid = add_struc_member(id,"_Myfirst",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_Mylast",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_Myend",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>");
	mid = add_struc_member(id,"_Myval2",	0,	0x60000400,	get_struc_id("std::_Vector_val<std::_Simple_types<unsigned char> >"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >");
	mid = add_struc_member(id,"_Mypair",	0,	0x60000400,	get_struc_id("std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("std::vector<unsigned char,std::allocator<unsigned char> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("ArmVM::struct_ioctl_info");
	mid = add_struc_member(id,"ioctl_code",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"arg",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("ArmVM::binder_write_read");
	mid = add_struc_member(id,"write_size",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"write_consumed",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"write_buffer",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"read_size",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"read_consumed",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"read_buffer",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("ArmVM::struct_ioctl_msg");
	mid = add_struc_member(id,"msg",	0,	0x60000400,	get_struc_id("ArmVM::base_msg"),	20);
	mid = add_struc_member(id,"ioctl_info",	0X14,	0x60000400,	get_struc_id("ArmVM::struct_ioctl_info"),	8);
	mid = add_struc_member(id,"bwr",	0X1C,	0x60000400,	get_struc_id("ArmVM::binder_write_read"),	24);
	set_struc_align(id,2);
	
	id = get_struc_id("_STARTUPINFOA");
	mid = add_struc_member(id,"cb",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpReserved",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpDesktop",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpTitle",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dwX",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwY",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwXSize",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwYSize",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwXCountChars",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwYCountChars",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwFillAttribute",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwFlags",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wShowWindow",	0X30,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"cbReserved2",	0X32,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"lpReserved2",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hStdInput",	0X38,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hStdOutput",	0X3C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hStdError",	0X40,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_One_then_variadic_args_t");
	
	id = get_struc_id("std::_Iterator_base12");
	mid = add_struc_member(id,"_Myproxy",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_Mynextiter",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Iterator012<std::bidirectional_iterator_tag,ArmVM::PipeThread *,int,ArmVM::PipeThread * const *,ArmVM::PipeThread * const &,std::_Iterator_base12>");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::_Iterator_base12"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,std::_Iterator_base12>");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::_Iterator012<std::bidirectional_iterator_tag,ArmVM::PipeThread *,int,ArmVM::PipeThread * const *,ArmVM::PipeThread * const &,std::_Iterator_base12>"),	8);
	mid = add_struc_member(id,"_Ptr",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::integral_constant<bool,0>");
	
	id = get_struc_id("std::_String_val<std::_Simple_types<wchar_t> >::_Bxty");
	mid = add_struc_member(id,"_Buf",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"_Ptr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_Alias",	0,	0x000400,	-1,	8);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_String_val<std::_Simple_types<wchar_t> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::_Container_base12"),	4);
	mid = add_struc_member(id,"_Bx",	0X4,	0x60000400,	get_struc_id("std::_String_val<std::_Simple_types<wchar_t> >::_Bxty"),	16);
	mid = add_struc_member(id,"_Mysize",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_Myres",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>");
	mid = add_struc_member(id,"_Myval2",	0,	0x60000400,	get_struc_id("std::_String_val<std::_Simple_types<wchar_t> >"),	28);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >");
	mid = add_struc_member(id,"_Mypair",	0,	0x60000400,	get_struc_id("std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>"),	28);
	set_struc_align(id,2);
	
	id = get_struc_id("std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >"),	28);
	set_struc_align(id,2);
	
	id = get_struc_id("_PROCESS_INFORMATION");
	mid = add_struc_member(id,"hProcess",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hThread",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dwProcessId",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwThreadId",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("$F49258853DEB26A691BF42EC51DEEB49");
	mid = add_struc_member(id,"szName",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dwThreadID",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwFlags",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("$ACC2D7BA72D8B5F31F315901218BB50A");
	mid = add_struc_member(id,"dwLevelRequired",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pbDebuggerPresent",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("$C98644B53BFCB8058A8635BFBD9C27B0");
	mid = add_struc_member(id,"dwRuntimeNumber",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bRealBug",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pvReturnAddress",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pbDebuggerPresent",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pwRuntimeMessage",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("$4300C07596126F505AD2E11CC883E7B0");
	mid = add_struc_member(id,"SetName",	0,	0x60000400,	get_struc_id("$F49258853DEB26A691BF42EC51DEEB49"),	12);
	mid = add_struc_member(id,"DebuggerProbe",	0,	0x60000400,	get_struc_id("$ACC2D7BA72D8B5F31F315901218BB50A"),	8);
	mid = add_struc_member(id,"RuntimeError",	0,	0x60000400,	get_struc_id("$C98644B53BFCB8058A8635BFBD9C27B0"),	20);
	set_struc_align(id,2);
	
	id = get_struc_id("tagEXCEPTION_VISUALCPP_DEBUG_INFO");
	mid = add_struc_member(id,"dwType",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"___u1",	0X4,	0x60000400,	get_struc_id("$4300C07596126F505AD2E11CC883E7B0"),	20);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Init_locks");
	
	id = get_struc_id("__m128i");
	mid = add_struc_member(id,"m128i_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"m128i_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"m128i_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"m128i_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"m128i_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"m128i_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"m128i_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"m128i_u64",	0,	0x30000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("_s_HandlerType");
	mid = add_struc_member(id,"adjectives",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pType",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dispCatchObj",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"addressOfHandler",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<char,__crt_public_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<void,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("scoped_get_last_error_reset");
	mid = add_struc_member(id,"_old_last_error",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<__vcrt_ptd,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("DName");
	mid = add_struc_member(id,"node",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_bf4",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("$08BD3D891899F43F57F1E55125C55774");
	mid = add_struc_member(id,"_bf0",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("TPI_t");
	mid = add_struc_member(id,"index_",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"__s1",	0,	0x60000400,	get_struc_id("$08BD3D891899F43F57F1E55125C55774"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("DNameNode");
	mid = add_struc_member(id,"vfptr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("DNameStatusNode");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("DNameNode"),	4);
	mid = add_struc_member(id,"me",	0X4,	0x28800400,	get_enum("DNameStatus"),	4);
	mid = add_struc_member(id,"myLen",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Replicator");
	mid = add_struc_member(id,"index",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dNameBuffer",	0X4,	0x25500400,	0XFFFFFFFF,	40,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("UnDecorator");
	mid = add_struc_member(id,"ArgList",	0,	0x60000400,	get_struc_id("Replicator"),	44);
	mid = add_struc_member(id,"ZNameList",	0X2C,	0x60000400,	get_struc_id("Replicator"),	44);
	set_struc_align(id,2);
	
	id = get_struc_id("$EE28309FED38FA683D1DCD8E137722F5");
	mid = add_struc_member(id,"Fp32Value",	0,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"Fp64Value",	0,	0x60000400,	get_struc_id("LONG_DOUBLE_12"),	12);
	mid = add_struc_member(id,"Fp80Value",	0,	0x60000400,	get_struc_id("_FP80"),	10);
	mid = add_struc_member(id,"Fp128Value",	0,	0x60000400,	get_struc_id("_FP128"),	16);
	mid = add_struc_member(id,"I16Value",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"I32Value",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I64Value",	0,	0x60000400,	get_struc_id("_I64"),	8);
	mid = add_struc_member(id,"U16Value",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"U32Value",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"U64Value",	0,	0x60000400,	get_struc_id("_U64"),	8);
	mid = add_struc_member(id,"Bcd80Value",	0,	0x60000400,	get_struc_id("_BCD80"),	10);
	mid = add_struc_member(id,"StringValue",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"CompareValue",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"U32ArrayValue",	0,	0x60000400,	get_struc_id("_U32ARRAY"),	16);
	mid = add_struc_member(id,"Q64Value",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"Fpq64Value",	0,	0x60000400,	get_struc_id("_FPQ64"),	16);
	set_struc_align(id,3);
	
	id = get_struc_id("__m256i");
	mid = add_struc_member(id,"m256i_i8",	0,	0x000400,	-1,	32);
	mid = add_struc_member(id,"m256i_i16",	0,	0x10000400,	-1,	32);
	mid = add_struc_member(id,"m256i_i32",	0,	0x20000400,	-1,	32);
	mid = add_struc_member(id,"m256i_i64",	0,	0x30000400,	-1,	32);
	mid = add_struc_member(id,"m256i_u8",	0,	0x000400,	-1,	32);
	mid = add_struc_member(id,"m256i_u16",	0,	0x10000400,	-1,	32);
	mid = add_struc_member(id,"m256i_u32",	0,	0x20000400,	-1,	32);
	mid = add_struc_member(id,"m256i_u64",	0,	0x30000400,	-1,	32);
	set_struc_align(id,5);
	
	id = get_struc_id("__crt_simd_cleanup_guard<1>");
	
	id = get_struc_id("__crt_simd_cleanup_guard<0>");
	
	id = get_struc_id("__crt_state_management::scoped_global_state_reset");
	
	id = get_struc_id("__crt_stdio_output::string_output_adapter_context<char>");
	mid = add_struc_member(id,"_buffer",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_buffer_count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_buffer_used",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_continue_count",	0XC,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::string_output_adapter<char>");
	mid = add_struc_member(id,"_context",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::output_adapter_data<char,__crt_stdio_output::string_output_adapter<char> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::common_data<char>"),	1096);
	mid = add_struc_member(id,"_output_adapter",	0X448,	0x60000400,	get_struc_id("__crt_stdio_output::string_output_adapter<char>"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::output_adapter_data<char,__crt_stdio_output::string_output_adapter<char> >"),	1104);
	mid = add_struc_member(id,"_current_pass",	0X450,	0x28800400,	get_enum("__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> >::pass"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::string_output_adapter_context<wchar_t>");
	mid = add_struc_member(id,"_buffer",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_buffer_count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_buffer_used",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_continue_count",	0XC,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::common_data<wchar_t>");
	mid = add_struc_member(id,"_options",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_locale",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_cached_errno",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_format_it",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_valist_it",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_characters_written",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_state",	0X1C,	0x28800400,	get_enum("__crt_stdio_output::state"),	4);
	mid = add_struc_member(id,"_flags",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_field_width",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_precision",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_length",	0X2C,	0x28800400,	get_enum("__crt_stdio_output::length_modifier"),	4);
	mid = add_struc_member(id,"_suppress_output",	0X30,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_format_char",	0X32,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"___u13",	0X34,	0x60000400,	get_struc_id("$147BBAAC6F057C74482616A6F88094DB"),	4);
	mid = add_struc_member(id,"_string_length",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_string_is_wide",	0X3C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_buffer",	0X40,	0x60000400,	get_struc_id("__crt_stdio_output::formatting_buffer"),	1032);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::string_output_adapter<wchar_t>");
	mid = add_struc_member(id,"_context",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::common_data<wchar_t>"),	1096);
	mid = add_struc_member(id,"_output_adapter",	0X448,	0x60000400,	get_struc_id("__crt_stdio_output::string_output_adapter<wchar_t>"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >"),	1104);
	mid = add_struc_member(id,"_current_pass",	0X450,	0x28800400,	get_enum("__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::pass"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::parameter_data");
	mid = add_struc_member(id,"_actual_type",	0,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::parameter_type"),	4);
	mid = add_struc_member(id,"_format_type",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_valist_it",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_length",	0XC,	0x28800400,	get_enum("__crt_stdio_output::length_modifier"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> >"),	1112);
	mid = add_struc_member(id,"_current_pass",	0X458,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::pass"),	4);
	mid = add_struc_member(id,"_format_mode",	0X45C,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::mode"),	4);
	mid = add_struc_member(id,"_format",	0X460,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_parameters",	0X464,	0x60000400,	get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::parameter_data"),	1600);
	mid = add_struc_member(id,"_maximum_index",	0XAA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_type_index",	0XAA8,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >"),	2736);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::parameter_data");
	mid = add_struc_member(id,"_actual_type",	0,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::parameter_type"),	4);
	mid = add_struc_member(id,"_format_type",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"_valist_it",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_length",	0XC,	0x28800400,	get_enum("__crt_stdio_output::length_modifier"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >"),	1112);
	mid = add_struc_member(id,"_current_pass",	0X458,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::pass"),	4);
	mid = add_struc_member(id,"_format_mode",	0X45C,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::mode"),	4);
	mid = add_struc_member(id,"_format",	0X460,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_parameters",	0X464,	0x60000400,	get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::parameter_data"),	1600);
	mid = add_struc_member(id,"_maximum_index",	0XAA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_type_index",	0XAA8,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >"),	2736);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::stream_output_adapter<wchar_t>");
	mid = add_struc_member(id,"_stream",	0,	0x60000400,	get_struc_id("__crt_stdio_stream"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::common_data<wchar_t>"),	1096);
	mid = add_struc_member(id,"_output_adapter",	0X448,	0x60000400,	get_struc_id("__crt_stdio_output::stream_output_adapter<wchar_t>"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >"),	1104);
	mid = add_struc_member(id,"_current_pass",	0X450,	0x28800400,	get_enum("__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::pass"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::parameter_data");
	mid = add_struc_member(id,"_actual_type",	0,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::parameter_type"),	4);
	mid = add_struc_member(id,"_format_type",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_valist_it",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_length",	0XC,	0x28800400,	get_enum("__crt_stdio_output::length_modifier"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> >"),	1112);
	mid = add_struc_member(id,"_current_pass",	0X458,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::pass"),	4);
	mid = add_struc_member(id,"_format_mode",	0X45C,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::mode"),	4);
	mid = add_struc_member(id,"_format",	0X460,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_parameters",	0X464,	0x60000400,	get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::parameter_data"),	1600);
	mid = add_struc_member(id,"_maximum_index",	0XAA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_type_index",	0XAA8,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >"),	2736);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::parameter_data");
	mid = add_struc_member(id,"_actual_type",	0,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::parameter_type"),	4);
	mid = add_struc_member(id,"_format_type",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"_valist_it",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_length",	0XC,	0x28800400,	get_enum("__crt_stdio_output::length_modifier"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >"),	1112);
	mid = add_struc_member(id,"_current_pass",	0X458,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::pass"),	4);
	mid = add_struc_member(id,"_format_mode",	0X45C,	0x28800400,	get_enum("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::mode"),	4);
	mid = add_struc_member(id,"_format",	0X460,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_parameters",	0X464,	0x60000400,	get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::parameter_data"),	1600);
	mid = add_struc_member(id,"_maximum_index",	0XAA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_type_index",	0XAA8,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >"),	2736);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> > >");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("__crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> >"),	1112);
	set_struc_align(id,3);
	
	id = get_struc_id("__crt_errno_guard");
	mid = add_struc_member(id,"_errno_address",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_stored_errno",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<unsigned char,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("argument_list<wchar_t>");
	mid = add_struc_member(id,"_first",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_last",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_end",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<wchar_t,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("expand_argument_wildcards::__l3::<lambda_c141fc1027167882accd25626224452e>");
	
	id = get_struc_id("__crt_unique_handle_t<__crt_findfile_traits>");
	mid = add_struc_member(id,"_handle",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("expand_argument_wildcards::__l3::<lambda_bf9b52a1b7159214c0120e2e7dc7eac6>");
	
	id = get_struc_id("_WIN32_FIND_DATAW");
	mid = add_struc_member(id,"dwFileAttributes",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ftCreationTime",	0X4,	0x60000400,	get_struc_id("_FILETIME"),	8);
	mid = add_struc_member(id,"ftLastAccessTime",	0XC,	0x60000400,	get_struc_id("_FILETIME"),	8);
	mid = add_struc_member(id,"ftLastWriteTime",	0X14,	0x60000400,	get_struc_id("_FILETIME"),	8);
	mid = add_struc_member(id,"nFileSizeHigh",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nFileSizeLow",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwReserved0",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwReserved1",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cFileName",	0X2C,	0x10000400,	-1,	520);
	mid = add_struc_member(id,"cAlternateFileName",	0X234,	0x10000400,	-1,	28);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<wchar_t *,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<__crt_report_hook_node<wchar_t>,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<__crt_report_hook_node<char>,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("message_box_arguments<char>");
	mid = add_struc_member(id,"_caption",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_text",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_type",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_result",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_handle_t<__crt_handle_traits>");
	mid = add_struc_member(id,"_handle",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("message_box_arguments<wchar_t>");
	mid = add_struc_member(id,"_caption",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_text",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_type",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_result",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<__crt_multibyte_data,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<__crt_lowio_handle_data,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_locale_strings");
	mid = add_struc_member(id,"szLanguage",	0,	0x10000400,	-1,	128);
	mid = add_struc_member(id,"szCountry",	0X80,	0x10000400,	-1,	128);
	mid = add_struc_member(id,"szCodePage",	0X100,	0x10000400,	-1,	32);
	mid = add_struc_member(id,"szLocaleName",	0X120,	0x10000400,	-1,	170);
	set_struc_align(id,1);
	
	id = get_struc_id("__crt_unique_heap_ptr<__crt_locale_pointers,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<__crt_locale_data,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_ctype_compatibility_data");
	mid = add_struc_member(id,"id",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"is_clike",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_scoped_stack_ptr<wchar_t>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<__crt_lc_time_data,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_scoped_stack_ptr_tag<wchar_t>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_qualified_locale_data_downlevel");
	mid = add_struc_member(id,"iLcidState",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lcidLanguage",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lcidCountry",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("tagUSEROBJECTFLAGS");
	mid = add_struc_member(id,"fInherit",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fReserved",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwFlags",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<__acrt_ptd,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_scoped_get_last_error_reset");
	mid = add_struc_member(id,"_old_last_error",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("$409DFF2A380C4FFE2B587D0390AC124E");
	mid = add_struc_member(id,"wProcessorArchitecture",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"wReserved",	0X2,	0x10000400,	-1,	2);
	set_struc_align(id,1);
	
	id = get_struc_id("$73046C24F4FC5F58248B06D5FDAB2A98");
	mid = add_struc_member(id,"dwOemId",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"__s1",	0,	0x60000400,	get_struc_id("$409DFF2A380C4FFE2B587D0390AC124E"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_SYSTEM_INFO");
	mid = add_struc_member(id,"___u0",	0,	0x60000400,	get_struc_id("$73046C24F4FC5F58248B06D5FDAB2A98"),	4);
	mid = add_struc_member(id,"dwPageSize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpMinimumApplicationAddress",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpMaximumApplicationAddress",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dwActiveProcessorMask",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwNumberOfProcessors",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwProcessorType",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwAllocationGranularity",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wProcessorLevel",	0X20,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"wProcessorRevision",	0X22,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("_CrtMemState");
	mid = add_struc_member(id,"pBlockHeader",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lCounts",	0X4,	0x20000400,	-1,	20);
	mid = add_struc_member(id,"lSizes",	0X18,	0x20000400,	-1,	20);
	mid = add_struc_member(id,"lHighWaterCount",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lTotalCount",	0X30,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("component_buffers<char>");
	mid = add_struc_member(id,"_drive",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_drive_count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_directory",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_directory_count",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_file_name",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_file_name_count",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_extension",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_extension_count",	0X1C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("component_buffers<wchar_t>");
	mid = add_struc_member(id,"_drive",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_drive_count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_directory",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_directory_count",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_file_name",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_file_name_count",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_extension",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_extension_count",	0X1C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("common_splitpath::__l6::<lambda_89bf6c7d200ebdd35efc9e01f25ff60a>");
	
	id = get_struc_id("common_splitpath::__l7::<lambda_90799d8c5786ba041b3216863ff21b9d>");
	
	id = get_struc_id("common_splitpath_s::__l9::<lambda_ab7779844739fab15369d72763ed67dd>");
	
	id = get_struc_id("common_splitpath_s::__l10::<lambda_0a1e3dd207ef52559f7207a49085fc8a>");
	
	id = get_struc_id("common_splitpath_s::__l9::<lambda_784ed6ee23c12b976dd1035fbb94141e>");
	
	id = get_struc_id("common_splitpath_s::__l10::<lambda_f1d7037141e450cf079124977c73fe51>");
	
	id = get_struc_id("common_splitpath::__l6::<lambda_a4b986acc854560fc3a7606b0264cc37>");
	
	id = get_struc_id("common_splitpath::__l7::<lambda_6312fea2aaef510d0417ffae002cffee>");
	
	id = get_struc_id("__crt_strtox::multiply_by_power_of_ten::__l2::unpack_index");
	mid = add_struc_member(id,"_offset",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"_zeroes",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_size",	0X3,	0x000400,	-1,	1);
	set_struc_align(id,1);
	
	id = get_struc_id("__crt_strtox::c_string_character_source<wchar_t>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_end",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_UNICODE_STRING");
	mid = add_struc_member(id,"Length",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"MaximumLength",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"Buffer",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("$649C2944F320CE923A2CB8CA3DD58CA1");
	mid = add_struc_member(id,"Next",	0,	0x60000400,	get_struc_id("_SINGLE_LIST_ENTRY"),	4);
	mid = add_struc_member(id,"Depth",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"CpuId",	0X6,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("_RTC_framedesc");
	mid = add_struc_member(id,"varCount",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"variables",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::_Container_proxy");
	mid = add_struc_member(id,"_Mycont",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_Myfirstiter",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("std::less<ArmVM::PipeThread *>");
	
	id = get_struc_id("std::bad_function_call");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::exception"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("std::invalid_argument");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::logic_error"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("std::runtime_error");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::exception"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("std::overflow_error");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::runtime_error"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("std::regex_error");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("std::runtime_error"),	12);
	mid = add_struc_member(id,"_Err",	0XC,	0x28800400,	get_enum("std::regex_constants::error_type"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_public_free_policy");
	
	id = get_struc_id("__crt_internal_free_policy");
	
	id = get_struc_id("__std_type_info_data");
	mid = add_struc_member(id,"_UndecoratedName",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_DecoratedName",	0X4,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("type_info");
	mid = add_struc_member(id,"vfptr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_Data",	0X4,	0x60000400,	get_struc_id("__std_type_info_data"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_fast_encoded_nullptr_t");
	
	id = get_struc_id("__crt_unique_heap_ptr<__crt_stdio_stream_data *,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_char_traits<char>");
	
	id = get_struc_id("__crt_char_traits<wchar_t>");
	
	id = get_struc_id("__crt_call_and_cleanup::__l3::<lambda_507d9fd6b66e39451a8852ba73f804a7>");
	
	id = get_struc_id("__crt_unique_heap_ptr<void (__cdecl*)(void),__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<long,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<unsigned short,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<lconv,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_unique_heap_ptr<__crt_stdio_stream_data,__crt_internal_free_policy>");
	mid = add_struc_member(id,"_p",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l3::<lambda_4980db0136e49a56f91ef52c46ca659a>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__acrt_lock_and_call::__l4::<lambda_9c074eaf62197b4fd0274ed9e7824161>");
	mid = add_struc_member(id,"lock_id",	0,	0x28800400,	get_enum("__acrt_lock_id"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("__crt_seh_guarded_call<unsigned short>");
	
	id = get_struc_id("_putwch::__l3::<lambda_6e3e78bb6855d1e4040e022c1b427e22>");
	mid = add_struc_member(id,"c",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_buffer");
	mid = add_struc_member(id,"entry",	0,	0x60000400,	get_struc_id("list_head"),	8);
	mid = add_struc_member(id,"rb_node",	0X8,	0x60000400,	get_struc_id("rb_node"),	12);
	mid = add_struc_member(id,"_bf14",	0X14,	0x000400,	-1,	1);
	mid = add_struc_member(id,"transaction",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"target_node",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"data_size",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"offsets_size",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"data",	0X28,	0x000400,	-1,	0);
	set_struc_align(id,2);
	
	id = get_struc_id("rb_root");
	mid = add_struc_member(id,"rb_node",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("hlist_node");
	mid = add_struc_member(id,"next",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pprev",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_proc");
	mid = add_struc_member(id,"proc_node",	0,	0x60000400,	get_struc_id("hlist_node"),	8);
	mid = add_struc_member(id,"threads",	0X8,	0x60000400,	get_struc_id("rb_root"),	4);
	mid = add_struc_member(id,"nodes",	0XC,	0x60000400,	get_struc_id("rb_root"),	4);
	mid = add_struc_member(id,"refs_by_desc",	0X10,	0x60000400,	get_struc_id("rb_root"),	4);
	mid = add_struc_member(id,"refs_by_node",	0X14,	0x60000400,	get_struc_id("rb_root"),	4);
	mid = add_struc_member(id,"pid",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"uid",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fd",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buffer",	0X24,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"user_buffer_offset",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buffers",	0X2C,	0x60000400,	get_struc_id("list_head"),	8);
	mid = add_struc_member(id,"allocated_buffers",	0X34,	0x60000400,	get_struc_id("rb_root"),	4);
	mid = add_struc_member(id,"free_async_space",	0X38,	0x60000400,	get_struc_id("rb_root"),	4);
	mid = add_struc_member(id,"buffer_size",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buffer_free",	0X40,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"todo",	0X44,	0x60000400,	get_struc_id("list_head"),	8);
	mid = add_struc_member(id,"wait",	0X4C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"stats",	0X50,	0x60000400,	get_struc_id("binder_stats"),	196);
	mid = add_struc_member(id,"delivered_death",	0X114,	0x60000400,	get_struc_id("list_head"),	8);
	mid = add_struc_member(id,"max_threads",	0X11C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"requested_threads",	0X120,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"requested_threads_started",	0X124,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ready_threads",	0X128,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"default_priority",	0X12C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("hlist_head");
	mid = add_struc_member(id,"first",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_work");
	mid = add_struc_member(id,"entry",	0,	0x60000400,	get_struc_id("list_head"),	8);
	mid = add_struc_member(id,"type",	0X8,	0x28800400,	get_enum("$959501DAFB7196048D4C26FFB5C708FD"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("$4518549C31465BBC0CCB439717F56243");
	mid = add_struc_member(id,"rb_node",	0,	0x60000400,	get_struc_id("rb_node"),	12);
	mid = add_struc_member(id,"dead_node",	0,	0x60000400,	get_struc_id("hlist_node"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_node");
	mid = add_struc_member(id,"debug_id",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"work",	0X4,	0x60000400,	get_struc_id("binder_work"),	12);
	mid = add_struc_member(id,"___u2",	0X10,	0x60000400,	get_struc_id("$4518549C31465BBC0CCB439717F56243"),	12);
	mid = add_struc_member(id,"proc",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"refs",	0X20,	0x60000400,	get_struc_id("hlist_head"),	4);
	mid = add_struc_member(id,"internal_strong_refs",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"local_weak_refs",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"local_strong_refs",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ptr",	0X30,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"cookie",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"_bf38",	0X38,	0x000400,	-1,	1);
	mid = add_struc_member(id,"async_todo",	0X3C,	0x60000400,	get_struc_id("list_head"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("FILE");
	mid = add_struc_member(id,"_Placeholder",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993::$76E49E73D22C7EB97CD59DFF8F6549A8");
	mid = add_struc_member(id,"buffer",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"offsets",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993");
	mid = add_struc_member(id,"ptr",	0,	0x60000400,	get_struc_id("binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993::$76E49E73D22C7EB97CD59DFF8F6549A8"),	8);
	mid = add_struc_member(id,"buf",	0,	0x000400,	-1,	8);
	set_struc_align(id,2);
	
	id = get_struc_id("binder_ref");
	mid = add_struc_member(id,"debug_id",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rb_node_desc",	0X4,	0x60000400,	get_struc_id("rb_node"),	12);
	mid = add_struc_member(id,"rb_node_node",	0X10,	0x60000400,	get_struc_id("rb_node"),	12);
	mid = add_struc_member(id,"node_entry",	0X1C,	0x60000400,	get_struc_id("hlist_node"),	8);
	mid = add_struc_member(id,"proc",	0X24,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"node",	0X28,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"desc",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"strong",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"weak",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"death",	0X38,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("union_u2");
	mid = add_struc_member(id,"binder",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"handle",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("flat_binder_object");
	mid = add_struc_member(id,"type",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"union_u2",	0X8,	0x60000400,	get_struc_id("union_u2"),	4);
	mid = add_struc_member(id,"cookie",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
	id = Structures_1(id);
        end_type_updating(UTP_STRUCT);
}

// End of file.
