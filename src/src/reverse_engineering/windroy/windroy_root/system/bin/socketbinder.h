/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'socketbinder'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

union _LARGE_INTEGER;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct lconv;
struct __crt_stdio_stream_data;
struct __crt_locale_data;
struct __crt_multibyte_data;
struct __crt_lc_time_data;
struct std::_Iterator_base12;
struct DNameNode;
struct std::_Container_proxy;
struct binder_buffer;
struct binder_node;
struct IUnknownVtbl;
struct tagVARIANT;
struct IRecordInfo;
struct tagTYPEDESC;
struct tagARRAYDESC;
struct tagPROPVARIANT;
struct binder_transaction;
struct binder_proc;
struct ArmVM::Thread;

/* 1 */
struct __attribute__((aligned(4))) _MEMORY_BASIC_INFORMATION
{
  void *BaseAddress;
  void *AllocationBase;
  unsigned int AllocationProtect;
  unsigned int RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
};

/* 2 */
typedef void *PVOID;

/* 3 */
typedef unsigned int DWORD;

/* 5 */
typedef unsigned int UINT_PTR;

/* 4 */
typedef UINT_PTR SIZE_T;

/* 6 */
struct __attribute__((aligned(4))) _FILETIME
{
  unsigned int dwLowDateTime;
  unsigned int dwHighDateTime;
};

/* 7 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 85 */
struct __attribute__((aligned(4))) $FAF74743FBE1C8632047CFB668F7028A
{
  unsigned int LowPart;
  int HighPart;
};

/* 8 */
union __attribute__((aligned(8))) _LARGE_INTEGER
{
  $FAF74743FBE1C8632047CFB668F7028A __s0;
  $FAF74743FBE1C8632047CFB668F7028A u;
  __int64 QuadPart;
};

/* 10 */
typedef int LONG;

/* 9 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 11 */
typedef __int64 LONGLONG;

/* 12 */
struct __attribute__((aligned(4))) _RTL_CRITICAL_SECTION
{
  _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
  int LockCount;
  int RecursionCount;
  void *OwningThread;
  void *LockSemaphore;
  unsigned int SpinCount;
};

/* 15 */
typedef unsigned __int16 WORD;

/* 17 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 16 */
typedef _LIST_ENTRY LIST_ENTRY;

/* 14 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  WORD Type;
  WORD CreatorBackTraceIndex;
  _RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Spare[2];
};

/* 13 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 18 */
typedef void *HANDLE;

/* 19 */
struct struc_open
{
  int field_0;
  int field_4;
  int field_8;
  int field_C;
  int field_10;
};

/* 20 */
struct struc_mmap
{
  int pid;
  int tid;
  int uid;
  int ext_len;
};

/* 21 */
struct files_stat_struct
{
  int nr_files;
  int nr_free_files;
  int max_files;
};

/* 22 */
struct inodes_stat_t
{
  int nr_inodes;
  int nr_unused;
  int dummy[5];
};

/* 23 */
struct __attribute__((aligned(4))) rb_node
{
  unsigned int rb_parent_color;
  rb_node *rb_right;
  rb_node *rb_left;
};

/* 24 */
struct __attribute__((aligned(4))) rb_root
{
  rb_node *rb_node;
};

/* 26 */
enum MACRO_ERROR
{
  ERROR_SEVERITY_SUCCESS = 0x0,
  ERROR_SEVERITY_INFORMATIONAL = 0x40000000,
  ERROR_SEVERITY_WARNING = 0x80000000,
  ERROR_SEVERITY_ERROR = 0xC0000000,
  ERROR_SUCCESS = 0x0,
  NO_ERROR = 0x0,
  ERROR_INVALID_FUNCTION = 0x1,
  ERROR_FILE_NOT_FOUND = 0x2,
  ERROR_PATH_NOT_FOUND = 0x3,
  ERROR_TOO_MANY_OPEN_FILES = 0x4,
  ERROR_ACCESS_DENIED = 0x5,
  ERROR_INVALID_HANDLE = 0x6,
  ERROR_ARENA_TRASHED = 0x7,
  ERROR_NOT_ENOUGH_MEMORY = 0x8,
  ERROR_INVALID_BLOCK = 0x9,
  ERROR_BAD_ENVIRONMENT = 0xA,
  ERROR_BAD_FORMAT = 0xB,
  ERROR_INVALID_ACCESS = 0xC,
  ERROR_INVALID_DATA = 0xD,
  ERROR_OUTOFMEMORY = 0xE,
  ERROR_INVALID_DRIVE = 0xF,
  ERROR_CURRENT_DIRECTORY = 0x10,
  ERROR_NOT_SAME_DEVICE = 0x11,
  ERROR_NO_MORE_FILES = 0x12,
  ERROR_WRITE_PROTECT = 0x13,
  ERROR_BAD_UNIT = 0x14,
  ERROR_NOT_READY = 0x15,
  ERROR_BAD_COMMAND = 0x16,
  ERROR_CRC = 0x17,
  ERROR_BAD_LENGTH = 0x18,
  ERROR_SEEK = 0x19,
  ERROR_NOT_DOS_DISK = 0x1A,
  ERROR_SECTOR_NOT_FOUND = 0x1B,
  ERROR_OUT_OF_PAPER = 0x1C,
  ERROR_WRITE_FAULT = 0x1D,
  ERROR_READ_FAULT = 0x1E,
  ERROR_GEN_FAILURE = 0x1F,
  ERROR_SHARING_VIOLATION = 0x20,
  ERROR_LOCK_VIOLATION = 0x21,
  ERROR_WRONG_DISK = 0x22,
  ERROR_SHARING_BUFFER_EXCEEDED = 0x24,
  ERROR_HANDLE_EOF = 0x26,
  ERROR_HANDLE_DISK_FULL = 0x27,
  ERROR_NOT_SUPPORTED = 0x32,
  ERROR_REM_NOT_LIST = 0x33,
  ERROR_DUP_NAME = 0x34,
  ERROR_BAD_NETPATH = 0x35,
  ERROR_NETWORK_BUSY = 0x36,
  ERROR_DEV_NOT_EXIST = 0x37,
  ERROR_TOO_MANY_CMDS = 0x38,
  ERROR_ADAP_HDW_ERR = 0x39,
  ERROR_BAD_NET_RESP = 0x3A,
  ERROR_UNEXP_NET_ERR = 0x3B,
  ERROR_BAD_REM_ADAP = 0x3C,
  ERROR_PRINTQ_FULL = 0x3D,
  ERROR_NO_SPOOL_SPACE = 0x3E,
  ERROR_PRINT_CANCELLED = 0x3F,
  ERROR_NETNAME_DELETED = 0x40,
  ERROR_NETWORK_ACCESS_DENIED = 0x41,
  ERROR_BAD_DEV_TYPE = 0x42,
  ERROR_BAD_NET_NAME = 0x43,
  ERROR_TOO_MANY_NAMES = 0x44,
  ERROR_TOO_MANY_SESS = 0x45,
  ERROR_SHARING_PAUSED = 0x46,
  ERROR_REQ_NOT_ACCEP = 0x47,
  ERROR_REDIR_PAUSED = 0x48,
  ERROR_FILE_EXISTS = 0x50,
  ERROR_CANNOT_MAKE = 0x52,
  ERROR_FAIL_I24 = 0x53,
  ERROR_OUT_OF_STRUCTURES = 0x54,
  ERROR_ALREADY_ASSIGNED = 0x55,
  ERROR_INVALID_PASSWORD = 0x56,
  ERROR_INVALID_PARAMETER = 0x57,
  ERROR_NET_WRITE_FAULT = 0x58,
  ERROR_NO_PROC_SLOTS = 0x59,
  ERROR_TOO_MANY_SEMAPHORES = 0x64,
  ERROR_EXCL_SEM_ALREADY_OWNED = 0x65,
  ERROR_SEM_IS_SET = 0x66,
  ERROR_TOO_MANY_SEM_REQUESTS = 0x67,
  ERROR_INVALID_AT_INTERRUPT_TIME = 0x68,
  ERROR_SEM_OWNER_DIED = 0x69,
  ERROR_SEM_USER_LIMIT = 0x6A,
  ERROR_DISK_CHANGE = 0x6B,
  ERROR_DRIVE_LOCKED = 0x6C,
  ERROR_BROKEN_PIPE = 0x6D,
  ERROR_OPEN_FAILED = 0x6E,
  ERROR_BUFFER_OVERFLOW = 0x6F,
  ERROR_DISK_FULL = 0x70,
  ERROR_NO_MORE_SEARCH_HANDLES = 0x71,
  ERROR_INVALID_TARGET_HANDLE = 0x72,
  ERROR_INVALID_CATEGORY = 0x75,
  ERROR_INVALID_VERIFY_SWITCH = 0x76,
  ERROR_BAD_DRIVER_LEVEL = 0x77,
  ERROR_CALL_NOT_IMPLEMENTED = 0x78,
  ERROR_SEM_TIMEOUT = 0x79,
  ERROR_INSUFFICIENT_BUFFER = 0x7A,
  ERROR_INVALID_NAME = 0x7B,
  ERROR_INVALID_LEVEL = 0x7C,
  ERROR_NO_VOLUME_LABEL = 0x7D,
  ERROR_MOD_NOT_FOUND = 0x7E,
  ERROR_PROC_NOT_FOUND = 0x7F,
  ERROR_WAIT_NO_CHILDREN = 0x80,
  ERROR_CHILD_NOT_COMPLETE = 0x81,
  ERROR_DIRECT_ACCESS_HANDLE = 0x82,
  ERROR_NEGATIVE_SEEK = 0x83,
  ERROR_SEEK_ON_DEVICE = 0x84,
  ERROR_IS_JOIN_TARGET = 0x85,
  ERROR_IS_JOINED = 0x86,
  ERROR_IS_SUBSTED = 0x87,
  ERROR_NOT_JOINED = 0x88,
  ERROR_NOT_SUBSTED = 0x89,
  ERROR_JOIN_TO_JOIN = 0x8A,
  ERROR_SUBST_TO_SUBST = 0x8B,
  ERROR_JOIN_TO_SUBST = 0x8C,
  ERROR_SUBST_TO_JOIN = 0x8D,
  ERROR_BUSY_DRIVE = 0x8E,
  ERROR_SAME_DRIVE = 0x8F,
  ERROR_DIR_NOT_ROOT = 0x90,
  ERROR_DIR_NOT_EMPTY = 0x91,
  ERROR_IS_SUBST_PATH = 0x92,
  ERROR_IS_JOIN_PATH = 0x93,
  ERROR_PATH_BUSY = 0x94,
  ERROR_IS_SUBST_TARGET = 0x95,
  ERROR_SYSTEM_TRACE = 0x96,
  ERROR_INVALID_EVENT_COUNT = 0x97,
  ERROR_TOO_MANY_MUXWAITERS = 0x98,
  ERROR_INVALID_LIST_FORMAT = 0x99,
  ERROR_LABEL_TOO_LONG = 0x9A,
  ERROR_TOO_MANY_TCBS = 0x9B,
  ERROR_SIGNAL_REFUSED = 0x9C,
  ERROR_DISCARDED = 0x9D,
  ERROR_NOT_LOCKED = 0x9E,
  ERROR_BAD_THREADID_ADDR = 0x9F,
  ERROR_BAD_ARGUMENTS = 0xA0,
  ERROR_BAD_PATHNAME = 0xA1,
  ERROR_SIGNAL_PENDING = 0xA2,
  ERROR_MAX_THRDS_REACHED = 0xA4,
  ERROR_LOCK_FAILED = 0xA7,
  ERROR_BUSY = 0xAA,
  ERROR_CANCEL_VIOLATION = 0xAD,
  ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 0xAE,
  ERROR_INVALID_SEGMENT_NUMBER = 0xB4,
  ERROR_INVALID_ORDINAL = 0xB6,
  ERROR_ALREADY_EXISTS = 0xB7,
  ERROR_INVALID_FLAG_NUMBER = 0xBA,
  ERROR_SEM_NOT_FOUND = 0xBB,
  ERROR_INVALID_STARTING_CODESEG = 0xBC,
  ERROR_INVALID_STACKSEG = 0xBD,
  ERROR_INVALID_MODULETYPE = 0xBE,
  ERROR_INVALID_EXE_SIGNATURE = 0xBF,
  ERROR_EXE_MARKED_INVALID = 0xC0,
  ERROR_BAD_EXE_FORMAT = 0xC1,
  ERROR_ITERATED_DATA_EXCEEDS_64k = 0xC2,
  ERROR_INVALID_MINALLOCSIZE = 0xC3,
  ERROR_DYNLINK_FROM_INVALID_RING = 0xC4,
  ERROR_IOPL_NOT_ENABLED = 0xC5,
  ERROR_INVALID_SEGDPL = 0xC6,
  ERROR_AUTODATASEG_EXCEEDS_64k = 0xC7,
  ERROR_RING2SEG_MUST_BE_MOVABLE = 0xC8,
  ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 0xC9,
  ERROR_INFLOOP_IN_RELOC_CHAIN = 0xCA,
  ERROR_ENVVAR_NOT_FOUND = 0xCB,
  ERROR_NO_SIGNAL_SENT = 0xCD,
  ERROR_FILENAME_EXCED_RANGE = 0xCE,
  ERROR_RING2_STACK_IN_USE = 0xCF,
  ERROR_META_EXPANSION_TOO_LONG = 0xD0,
  ERROR_INVALID_SIGNAL_NUMBER = 0xD1,
  ERROR_THREAD_1_INACTIVE = 0xD2,
  ERROR_LOCKED = 0xD4,
  ERROR_TOO_MANY_MODULES = 0xD6,
  ERROR_NESTING_NOT_ALLOWED = 0xD7,
  ERROR_EXE_MACHINE_TYPE_MISMATCH = 0xD8,
  ERROR_BAD_PIPE = 0xE6,
  ERROR_PIPE_BUSY = 0xE7,
  ERROR_NO_DATA = 0xE8,
  ERROR_PIPE_NOT_CONNECTED = 0xE9,
  ERROR_MORE_DATA = 0xEA,
  ERROR_VC_DISCONNECTED = 0xF0,
  ERROR_INVALID_EA_NAME = 0xFE,
  ERROR_EA_LIST_INCONSISTENT = 0xFF,
  ERROR_NO_MORE_ITEMS = 0x103,
  ERROR_CANNOT_COPY = 0x10A,
  ERROR_DIRECTORY = 0x10B,
  ERROR_EAS_DIDNT_FIT = 0x113,
  ERROR_EA_FILE_CORRUPT = 0x114,
  ERROR_EA_TABLE_FULL = 0x115,
  ERROR_INVALID_EA_HANDLE = 0x116,
  ERROR_EAS_NOT_SUPPORTED = 0x11A,
  ERROR_NOT_OWNER = 0x120,
  ERROR_TOO_MANY_POSTS = 0x12A,
  ERROR_PARTIAL_COPY = 0x12B,
  ERROR_OPLOCK_NOT_GRANTED = 0x12C,
  ERROR_INVALID_OPLOCK_PROTOCOL = 0x12D,
  ERROR_MR_MID_NOT_FOUND = 0x13D,
  ERROR_INVALID_ADDRESS = 0x1E7,
  ERROR_ARITHMETIC_OVERFLOW = 0x216,
  ERROR_PIPE_CONNECTED = 0x217,
  ERROR_PIPE_LISTENING = 0x218,
  ERROR_EA_ACCESS_DENIED = 0x3E2,
  ERROR_OPERATION_ABORTED = 0x3E3,
  ERROR_IO_INCOMPLETE = 0x3E4,
  ERROR_IO_PENDING = 0x3E5,
  ERROR_NOACCESS = 0x3E6,
  ERROR_SWAPERROR = 0x3E7,
  ERROR_STACK_OVERFLOW = 0x3E9,
  ERROR_INVALID_MESSAGE = 0x3EA,
  ERROR_CAN_NOT_COMPLETE = 0x3EB,
  ERROR_INVALID_FLAGS = 0x3EC,
  ERROR_UNRECOGNIZED_VOLUME = 0x3ED,
  ERROR_FILE_INVALID = 0x3EE,
  ERROR_FULLSCREEN_MODE = 0x3EF,
  ERROR_NO_TOKEN = 0x3F0,
  ERROR_BADDB = 0x3F1,
  ERROR_BADKEY = 0x3F2,
  ERROR_CANTOPEN = 0x3F3,
  ERROR_CANTREAD = 0x3F4,
  ERROR_CANTWRITE = 0x3F5,
  ERROR_REGISTRY_RECOVERED = 0x3F6,
  ERROR_REGISTRY_CORRUPT = 0x3F7,
  ERROR_REGISTRY_IO_FAILED = 0x3F8,
  ERROR_NOT_REGISTRY_FILE = 0x3F9,
  ERROR_KEY_DELETED = 0x3FA,
  ERROR_NO_LOG_SPACE = 0x3FB,
  ERROR_KEY_HAS_CHILDREN = 0x3FC,
  ERROR_CHILD_MUST_BE_VOLATILE = 0x3FD,
  ERROR_NOTIFY_ENUM_DIR = 0x3FE,
  ERROR_DEPENDENT_SERVICES_RUNNING = 0x41B,
  ERROR_INVALID_SERVICE_CONTROL = 0x41C,
  ERROR_SERVICE_REQUEST_TIMEOUT = 0x41D,
  ERROR_SERVICE_NO_THREAD = 0x41E,
  ERROR_SERVICE_DATABASE_LOCKED = 0x41F,
  ERROR_SERVICE_ALREADY_RUNNING = 0x420,
  ERROR_INVALID_SERVICE_ACCOUNT = 0x421,
  ERROR_SERVICE_DISABLED = 0x422,
  ERROR_CIRCULAR_DEPENDENCY = 0x423,
  ERROR_SERVICE_DOES_NOT_EXIST = 0x424,
  ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 0x425,
  ERROR_SERVICE_NOT_ACTIVE = 0x426,
  ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 0x427,
  ERROR_EXCEPTION_IN_SERVICE = 0x428,
  ERROR_DATABASE_DOES_NOT_EXIST = 0x429,
  ERROR_SERVICE_SPECIFIC_ERROR = 0x42A,
  ERROR_PROCESS_ABORTED = 0x42B,
  ERROR_SERVICE_DEPENDENCY_FAIL = 0x42C,
  ERROR_SERVICE_LOGON_FAILED = 0x42D,
  ERROR_SERVICE_START_HANG = 0x42E,
  ERROR_INVALID_SERVICE_LOCK = 0x42F,
  ERROR_SERVICE_MARKED_FOR_DELETE = 0x430,
  ERROR_SERVICE_EXISTS = 0x431,
  ERROR_ALREADY_RUNNING_LKG = 0x432,
  ERROR_SERVICE_DEPENDENCY_DELETED = 0x433,
  ERROR_BOOT_ALREADY_ACCEPTED = 0x434,
  ERROR_SERVICE_NEVER_STARTED = 0x435,
  ERROR_DUPLICATE_SERVICE_NAME = 0x436,
  ERROR_DIFFERENT_SERVICE_ACCOUNT = 0x437,
  ERROR_CANNOT_DETECT_DRIVER_FAILURE = 0x438,
  ERROR_CANNOT_DETECT_PROCESS_ABORT = 0x439,
  ERROR_NO_RECOVERY_PROGRAM = 0x43A,
  ERROR_END_OF_MEDIA = 0x44C,
  ERROR_FILEMARK_DETECTED = 0x44D,
  ERROR_BEGINNING_OF_MEDIA = 0x44E,
  ERROR_SETMARK_DETECTED = 0x44F,
  ERROR_NO_DATA_DETECTED = 0x450,
  ERROR_PARTITION_FAILURE = 0x451,
  ERROR_INVALID_BLOCK_LENGTH = 0x452,
  ERROR_DEVICE_NOT_PARTITIONED = 0x453,
  ERROR_UNABLE_TO_LOCK_MEDIA = 0x454,
  ERROR_UNABLE_TO_UNLOAD_MEDIA = 0x455,
  ERROR_MEDIA_CHANGED = 0x456,
  ERROR_BUS_RESET = 0x457,
  ERROR_NO_MEDIA_IN_DRIVE = 0x458,
  ERROR_NO_UNICODE_TRANSLATION = 0x459,
  ERROR_DLL_INIT_FAILED = 0x45A,
  ERROR_SHUTDOWN_IN_PROGRESS = 0x45B,
  ERROR_NO_SHUTDOWN_IN_PROGRESS = 0x45C,
  ERROR_IO_DEVICE = 0x45D,
  ERROR_SERIAL_NO_DEVICE = 0x45E,
  ERROR_IRQ_BUSY = 0x45F,
  ERROR_MORE_WRITES = 0x460,
  ERROR_COUNTER_TIMEOUT = 0x461,
  ERROR_FLOPPY_ID_MARK_NOT_FOUND = 0x462,
  ERROR_FLOPPY_WRONG_CYLINDER = 0x463,
  ERROR_FLOPPY_UNKNOWN_ERROR = 0x464,
  ERROR_FLOPPY_BAD_REGISTERS = 0x465,
  ERROR_DISK_RECALIBRATE_FAILED = 0x466,
  ERROR_DISK_OPERATION_FAILED = 0x467,
  ERROR_DISK_RESET_FAILED = 0x468,
  ERROR_EOM_OVERFLOW = 0x469,
  ERROR_NOT_ENOUGH_SERVER_MEMORY = 0x46A,
  ERROR_POSSIBLE_DEADLOCK = 0x46B,
  ERROR_MAPPED_ALIGNMENT = 0x46C,
  ERROR_SET_POWER_STATE_VETOED = 0x474,
  ERROR_SET_POWER_STATE_FAILED = 0x475,
  ERROR_TOO_MANY_LINKS = 0x476,
  ERROR_OLD_WIN_VERSION = 0x47E,
  ERROR_APP_WRONG_OS = 0x47F,
  ERROR_SINGLE_INSTANCE_APP = 0x480,
  ERROR_RMODE_APP = 0x481,
  ERROR_INVALID_DLL = 0x482,
  ERROR_NO_ASSOCIATION = 0x483,
  ERROR_DDE_FAIL = 0x484,
  ERROR_DLL_NOT_FOUND = 0x485,
  ERROR_NO_MORE_USER_HANDLES = 0x486,
  ERROR_MESSAGE_SYNC_ONLY = 0x487,
  ERROR_SOURCE_ELEMENT_EMPTY = 0x488,
  ERROR_DESTINATION_ELEMENT_FULL = 0x489,
  ERROR_ILLEGAL_ELEMENT_ADDRESS = 0x48A,
  ERROR_MAGAZINE_NOT_PRESENT = 0x48B,
  ERROR_DEVICE_REINITIALIZATION_NEEDED = 0x48C,
  ERROR_DEVICE_REQUIRES_CLEANING = 0x48D,
  ERROR_DEVICE_DOOR_OPEN = 0x48E,
  ERROR_DEVICE_NOT_CONNECTED = 0x48F,
  ERROR_NOT_FOUND = 0x490,
  ERROR_NO_MATCH = 0x491,
  ERROR_SET_NOT_FOUND = 0x492,
  ERROR_POINT_NOT_FOUND = 0x493,
  ERROR_NO_TRACKING_SERVICE = 0x494,
  ERROR_NO_VOLUME_ID = 0x495,
  ERROR_CONNECTED_OTHER_PASSWORD = 0x83C,
  ERROR_BAD_USERNAME = 0x89A,
  ERROR_NOT_CONNECTED = 0x8CA,
  ERROR_OPEN_FILES = 0x961,
  ERROR_ACTIVE_CONNECTIONS = 0x962,
  ERROR_DEVICE_IN_USE = 0x964,
  ERROR_BAD_DEVICE = 0x4B0,
  ERROR_CONNECTION_UNAVAIL = 0x4B1,
  ERROR_DEVICE_ALREADY_REMEMBERED = 0x4B2,
  ERROR_NO_NET_OR_BAD_PATH = 0x4B3,
  ERROR_BAD_PROVIDER = 0x4B4,
  ERROR_CANNOT_OPEN_PROFILE = 0x4B5,
  ERROR_BAD_PROFILE = 0x4B6,
  ERROR_NOT_CONTAINER = 0x4B7,
  ERROR_EXTENDED_ERROR = 0x4B8,
  ERROR_INVALID_GROUPNAME = 0x4B9,
  ERROR_INVALID_COMPUTERNAME = 0x4BA,
  ERROR_INVALID_EVENTNAME = 0x4BB,
  ERROR_INVALID_DOMAINNAME = 0x4BC,
  ERROR_INVALID_SERVICENAME = 0x4BD,
  ERROR_INVALID_NETNAME = 0x4BE,
  ERROR_INVALID_SHARENAME = 0x4BF,
  ERROR_INVALID_PASSWORDNAME = 0x4C0,
  ERROR_INVALID_MESSAGENAME = 0x4C1,
  ERROR_INVALID_MESSAGEDEST = 0x4C2,
  ERROR_SESSION_CREDENTIAL_CONFLICT = 0x4C3,
  ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 0x4C4,
  ERROR_DUP_DOMAINNAME = 0x4C5,
  ERROR_NO_NETWORK = 0x4C6,
  ERROR_CANCELLED = 0x4C7,
  ERROR_USER_MAPPED_FILE = 0x4C8,
  ERROR_CONNECTION_REFUSED = 0x4C9,
  ERROR_GRACEFUL_DISCONNECT = 0x4CA,
  ERROR_ADDRESS_ALREADY_ASSOCIATED = 0x4CB,
  ERROR_ADDRESS_NOT_ASSOCIATED = 0x4CC,
  ERROR_CONNECTION_INVALID = 0x4CD,
  ERROR_CONNECTION_ACTIVE = 0x4CE,
  ERROR_NETWORK_UNREACHABLE = 0x4CF,
  ERROR_HOST_UNREACHABLE = 0x4D0,
  ERROR_PROTOCOL_UNREACHABLE = 0x4D1,
  ERROR_PORT_UNREACHABLE = 0x4D2,
  ERROR_REQUEST_ABORTED = 0x4D3,
  ERROR_CONNECTION_ABORTED = 0x4D4,
  ERROR_RETRY = 0x4D5,
  ERROR_CONNECTION_COUNT_LIMIT = 0x4D6,
  ERROR_LOGIN_TIME_RESTRICTION = 0x4D7,
  ERROR_LOGIN_WKSTA_RESTRICTION = 0x4D8,
  ERROR_INCORRECT_ADDRESS = 0x4D9,
  ERROR_ALREADY_REGISTERED = 0x4DA,
  ERROR_SERVICE_NOT_FOUND = 0x4DB,
  ERROR_NOT_AUTHENTICATED = 0x4DC,
  ERROR_NOT_LOGGED_ON = 0x4DD,
  ERROR_CONTINUE = 0x4DE,
  ERROR_ALREADY_INITIALIZED = 0x4DF,
  ERROR_NO_MORE_DEVICES = 0x4E0,
  ERROR_NO_SUCH_SITE = 0x4E1,
  ERROR_DOMAIN_CONTROLLER_EXISTS = 0x4E2,
  ERROR_DS_NOT_INSTALLED = 0x4E3,
  ERROR_NOT_ALL_ASSIGNED = 0x514,
  ERROR_SOME_NOT_MAPPED = 0x515,
  ERROR_NO_QUOTAS_FOR_ACCOUNT = 0x516,
  ERROR_LOCAL_USER_SESSION_KEY = 0x517,
  ERROR_NULL_LM_PASSWORD = 0x518,
  ERROR_UNKNOWN_REVISION = 0x519,
  ERROR_REVISION_MISMATCH = 0x51A,
  ERROR_INVALID_OWNER = 0x51B,
  ERROR_INVALID_PRIMARY_GROUP = 0x51C,
  ERROR_NO_IMPERSONATION_TOKEN = 0x51D,
  ERROR_CANT_DISABLE_MANDATORY = 0x51E,
  ERROR_NO_LOGON_SERVERS = 0x51F,
  ERROR_NO_SUCH_LOGON_SESSION = 0x520,
  ERROR_NO_SUCH_PRIVILEGE = 0x521,
  ERROR_PRIVILEGE_NOT_HELD = 0x522,
  ERROR_INVALID_ACCOUNT_NAME = 0x523,
  ERROR_USER_EXISTS = 0x524,
  ERROR_NO_SUCH_USER = 0x525,
  ERROR_GROUP_EXISTS = 0x526,
  ERROR_NO_SUCH_GROUP = 0x527,
  ERROR_MEMBER_IN_GROUP = 0x528,
  ERROR_MEMBER_NOT_IN_GROUP = 0x529,
  ERROR_LAST_ADMIN = 0x52A,
  ERROR_WRONG_PASSWORD = 0x52B,
  ERROR_ILL_FORMED_PASSWORD = 0x52C,
  ERROR_PASSWORD_RESTRICTION = 0x52D,
  ERROR_LOGON_FAILURE = 0x52E,
  ERROR_ACCOUNT_RESTRICTION = 0x52F,
  ERROR_INVALID_LOGON_HOURS = 0x530,
  ERROR_INVALID_WORKSTATION = 0x531,
  ERROR_PASSWORD_EXPIRED = 0x532,
  ERROR_ACCOUNT_DISABLED = 0x533,
  ERROR_NONE_MAPPED = 0x534,
  ERROR_TOO_MANY_LUIDS_REQUESTED = 0x535,
  ERROR_LUIDS_EXHAUSTED = 0x536,
  ERROR_INVALID_SUB_AUTHORITY = 0x537,
  ERROR_INVALID_ACL = 0x538,
  ERROR_INVALID_SID = 0x539,
  ERROR_INVALID_SECURITY_DESCR = 0x53A,
  ERROR_BAD_INHERITANCE_ACL = 0x53C,
  ERROR_SERVER_DISABLED = 0x53D,
  ERROR_SERVER_NOT_DISABLED = 0x53E,
  ERROR_INVALID_ID_AUTHORITY = 0x53F,
  ERROR_ALLOTTED_SPACE_EXCEEDED = 0x540,
  ERROR_INVALID_GROUP_ATTRIBUTES = 0x541,
  ERROR_BAD_IMPERSONATION_LEVEL = 0x542,
  ERROR_CANT_OPEN_ANONYMOUS = 0x543,
  ERROR_BAD_VALIDATION_CLASS = 0x544,
  ERROR_BAD_TOKEN_TYPE = 0x545,
  ERROR_NO_SECURITY_ON_OBJECT = 0x546,
  ERROR_CANT_ACCESS_DOMAIN_INFO = 0x547,
  ERROR_INVALID_SERVER_STATE = 0x548,
  ERROR_INVALID_DOMAIN_STATE = 0x549,
  ERROR_INVALID_DOMAIN_ROLE = 0x54A,
  ERROR_NO_SUCH_DOMAIN = 0x54B,
  ERROR_DOMAIN_EXISTS = 0x54C,
  ERROR_DOMAIN_LIMIT_EXCEEDED = 0x54D,
  ERROR_INTERNAL_DB_CORRUPTION = 0x54E,
  ERROR_INTERNAL_ERROR = 0x54F,
  ERROR_GENERIC_NOT_MAPPED = 0x550,
  ERROR_BAD_DESCRIPTOR_FORMAT = 0x551,
  ERROR_NOT_LOGON_PROCESS = 0x552,
  ERROR_LOGON_SESSION_EXISTS = 0x553,
  ERROR_NO_SUCH_PACKAGE = 0x554,
  ERROR_BAD_LOGON_SESSION_STATE = 0x555,
  ERROR_LOGON_SESSION_COLLISION = 0x556,
  ERROR_INVALID_LOGON_TYPE = 0x557,
  ERROR_CANNOT_IMPERSONATE = 0x558,
  ERROR_RXACT_INVALID_STATE = 0x559,
  ERROR_RXACT_COMMIT_FAILURE = 0x55A,
  ERROR_SPECIAL_ACCOUNT = 0x55B,
  ERROR_SPECIAL_GROUP = 0x55C,
  ERROR_SPECIAL_USER = 0x55D,
  ERROR_MEMBERS_PRIMARY_GROUP = 0x55E,
  ERROR_TOKEN_ALREADY_IN_USE = 0x55F,
  ERROR_NO_SUCH_ALIAS = 0x560,
  ERROR_MEMBER_NOT_IN_ALIAS = 0x561,
  ERROR_MEMBER_IN_ALIAS = 0x562,
  ERROR_ALIAS_EXISTS = 0x563,
  ERROR_LOGON_NOT_GRANTED = 0x564,
  ERROR_TOO_MANY_SECRETS = 0x565,
  ERROR_SECRET_TOO_LONG = 0x566,
  ERROR_INTERNAL_DB_ERROR = 0x567,
  ERROR_TOO_MANY_CONTEXT_IDS = 0x568,
  ERROR_LOGON_TYPE_NOT_GRANTED = 0x569,
  ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 0x56A,
  ERROR_NO_SUCH_MEMBER = 0x56B,
  ERROR_INVALID_MEMBER = 0x56C,
  ERROR_TOO_MANY_SIDS = 0x56D,
  ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 0x56E,
  ERROR_NO_INHERITANCE = 0x56F,
  ERROR_FILE_CORRUPT = 0x570,
  ERROR_DISK_CORRUPT = 0x571,
  ERROR_NO_USER_SESSION_KEY = 0x572,
  ERROR_LICENSE_QUOTA_EXCEEDED = 0x573,
  ERROR_INVALID_WINDOW_HANDLE = 0x578,
  ERROR_INVALID_MENU_HANDLE = 0x579,
  ERROR_INVALID_CURSOR_HANDLE = 0x57A,
  ERROR_INVALID_ACCEL_HANDLE = 0x57B,
  ERROR_INVALID_HOOK_HANDLE = 0x57C,
  ERROR_INVALID_DWP_HANDLE = 0x57D,
  ERROR_TLW_WITH_WSCHILD = 0x57E,
  ERROR_CANNOT_FIND_WND_CLASS = 0x57F,
  ERROR_WINDOW_OF_OTHER_THREAD = 0x580,
  ERROR_HOTKEY_ALREADY_REGISTERED = 0x581,
  ERROR_CLASS_ALREADY_EXISTS = 0x582,
  ERROR_CLASS_DOES_NOT_EXIST = 0x583,
  ERROR_CLASS_HAS_WINDOWS = 0x584,
  ERROR_INVALID_INDEX = 0x585,
  ERROR_INVALID_ICON_HANDLE = 0x586,
  ERROR_PRIVATE_DIALOG_INDEX = 0x587,
  ERROR_LISTBOX_ID_NOT_FOUND = 0x588,
  ERROR_NO_WILDCARD_CHARACTERS = 0x589,
  ERROR_CLIPBOARD_NOT_OPEN = 0x58A,
  ERROR_HOTKEY_NOT_REGISTERED = 0x58B,
  ERROR_WINDOW_NOT_DIALOG = 0x58C,
  ERROR_CONTROL_ID_NOT_FOUND = 0x58D,
  ERROR_INVALID_COMBOBOX_MESSAGE = 0x58E,
  ERROR_WINDOW_NOT_COMBOBOX = 0x58F,
  ERROR_INVALID_EDIT_HEIGHT = 0x590,
  ERROR_DC_NOT_FOUND = 0x591,
  ERROR_INVALID_HOOK_FILTER = 0x592,
  ERROR_INVALID_FILTER_PROC = 0x593,
  ERROR_HOOK_NEEDS_HMOD = 0x594,
  ERROR_GLOBAL_ONLY_HOOK = 0x595,
  ERROR_JOURNAL_HOOK_SET = 0x596,
  ERROR_HOOK_NOT_INSTALLED = 0x597,
  ERROR_INVALID_LB_MESSAGE = 0x598,
  ERROR_SETCOUNT_ON_BAD_LB = 0x599,
  ERROR_LB_WITHOUT_TABSTOPS = 0x59A,
  ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 0x59B,
  ERROR_CHILD_WINDOW_MENU = 0x59C,
  ERROR_NO_SYSTEM_MENU = 0x59D,
  ERROR_INVALID_MSGBOX_STYLE = 0x59E,
  ERROR_INVALID_SPI_VALUE = 0x59F,
  ERROR_SCREEN_ALREADY_LOCKED = 0x5A0,
  ERROR_HWNDS_HAVE_DIFF_PARENT = 0x5A1,
  ERROR_NOT_CHILD_WINDOW = 0x5A2,
  ERROR_INVALID_GW_COMMAND = 0x5A3,
  ERROR_INVALID_THREAD_ID = 0x5A4,
  ERROR_NON_MDICHILD_WINDOW = 0x5A5,
  ERROR_POPUP_ALREADY_ACTIVE = 0x5A6,
  ERROR_NO_SCROLLBARS = 0x5A7,
  ERROR_INVALID_SCROLLBAR_RANGE = 0x5A8,
  ERROR_INVALID_SHOWWIN_COMMAND = 0x5A9,
  ERROR_NO_SYSTEM_RESOURCES = 0x5AA,
  ERROR_NONPAGED_SYSTEM_RESOURCES = 0x5AB,
  ERROR_PAGED_SYSTEM_RESOURCES = 0x5AC,
  ERROR_WORKING_SET_QUOTA = 0x5AD,
  ERROR_PAGEFILE_QUOTA = 0x5AE,
  ERROR_COMMITMENT_LIMIT = 0x5AF,
  ERROR_MENU_ITEM_NOT_FOUND = 0x5B0,
  ERROR_INVALID_KEYBOARD_HANDLE = 0x5B1,
  ERROR_HOOK_TYPE_NOT_ALLOWED = 0x5B2,
  ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 0x5B3,
  ERROR_TIMEOUT = 0x5B4,
  ERROR_INVALID_MONITOR_HANDLE = 0x5B5,
  ERROR_EVENTLOG_FILE_CORRUPT = 0x5DC,
  ERROR_EVENTLOG_CANT_START = 0x5DD,
  ERROR_LOG_FILE_FULL = 0x5DE,
  ERROR_EVENTLOG_FILE_CHANGED = 0x5DF,
  ERROR_INSTALL_SERVICE = 0x641,
  ERROR_INSTALL_USEREXIT = 0x642,
  ERROR_INSTALL_FAILURE = 0x643,
  ERROR_INSTALL_SUSPEND = 0x644,
  ERROR_UNKNOWN_PRODUCT = 0x645,
  ERROR_UNKNOWN_FEATURE = 0x646,
  ERROR_UNKNOWN_COMPONENT = 0x647,
  ERROR_UNKNOWN_PROPERTY = 0x648,
  ERROR_INVALID_HANDLE_STATE = 0x649,
  ERROR_BAD_CONFIGURATION = 0x64A,
  ERROR_INDEX_ABSENT = 0x64B,
  ERROR_INSTALL_SOURCE_ABSENT = 0x64C,
  ERROR_BAD_DATABASE_VERSION = 0x64D,
  ERROR_PRODUCT_UNINSTALLED = 0x64E,
  ERROR_BAD_QUERY_SYNTAX = 0x64F,
  ERROR_INVALID_FIELD = 0x650,
  RPC_S_INVALID_STRING_BINDING = 0x6A4,
  RPC_S_WRONG_KIND_OF_BINDING = 0x6A5,
  RPC_S_INVALID_BINDING = 0x6A6,
  RPC_S_PROTSEQ_NOT_SUPPORTED = 0x6A7,
  RPC_S_INVALID_RPC_PROTSEQ = 0x6A8,
  RPC_S_INVALID_STRING_UUID = 0x6A9,
  RPC_S_INVALID_ENDPOINT_FORMAT = 0x6AA,
  RPC_S_INVALID_NET_ADDR = 0x6AB,
  RPC_S_NO_ENDPOINT_FOUND = 0x6AC,
  RPC_S_INVALID_TIMEOUT = 0x6AD,
  RPC_S_OBJECT_NOT_FOUND = 0x6AE,
  RPC_S_ALREADY_REGISTERED = 0x6AF,
  RPC_S_TYPE_ALREADY_REGISTERED = 0x6B0,
  RPC_S_ALREADY_LISTENING = 0x6B1,
  RPC_S_NO_PROTSEQS_REGISTERED = 0x6B2,
  RPC_S_NOT_LISTENING = 0x6B3,
  RPC_S_UNKNOWN_MGR_TYPE = 0x6B4,
  RPC_S_UNKNOWN_IF = 0x6B5,
  RPC_S_NO_BINDINGS = 0x6B6,
  RPC_S_NO_PROTSEQS = 0x6B7,
  RPC_S_CANT_CREATE_ENDPOINT = 0x6B8,
  RPC_S_OUT_OF_RESOURCES = 0x6B9,
  RPC_S_SERVER_UNAVAILABLE = 0x6BA,
  RPC_S_SERVER_TOO_BUSY = 0x6BB,
  RPC_S_INVALID_NETWORK_OPTIONS = 0x6BC,
  RPC_S_NO_CALL_ACTIVE = 0x6BD,
  RPC_S_CALL_FAILED = 0x6BE,
  RPC_S_CALL_FAILED_DNE = 0x6BF,
  RPC_S_PROTOCOL_ERROR = 0x6C0,
  RPC_S_UNSUPPORTED_TRANS_SYN = 0x6C2,
  RPC_S_UNSUPPORTED_TYPE = 0x6C4,
  RPC_S_INVALID_TAG = 0x6C5,
  RPC_S_INVALID_BOUND = 0x6C6,
  RPC_S_NO_ENTRY_NAME = 0x6C7,
  RPC_S_INVALID_NAME_SYNTAX = 0x6C8,
  RPC_S_UNSUPPORTED_NAME_SYNTAX = 0x6C9,
  RPC_S_UUID_NO_ADDRESS = 0x6CB,
  RPC_S_DUPLICATE_ENDPOINT = 0x6CC,
  RPC_S_UNKNOWN_AUTHN_TYPE = 0x6CD,
  RPC_S_MAX_CALLS_TOO_SMALL = 0x6CE,
  RPC_S_STRING_TOO_LONG = 0x6CF,
  RPC_S_PROTSEQ_NOT_FOUND = 0x6D0,
  RPC_S_PROCNUM_OUT_OF_RANGE = 0x6D1,
  RPC_S_BINDING_HAS_NO_AUTH = 0x6D2,
  RPC_S_UNKNOWN_AUTHN_SERVICE = 0x6D3,
  RPC_S_UNKNOWN_AUTHN_LEVEL = 0x6D4,
  RPC_S_INVALID_AUTH_IDENTITY = 0x6D5,
  RPC_S_UNKNOWN_AUTHZ_SERVICE = 0x6D6,
  EPT_S_INVALID_ENTRY = 0x6D7,
  EPT_S_CANT_PERFORM_OP = 0x6D8,
  EPT_S_NOT_REGISTERED = 0x6D9,
  RPC_S_NOTHING_TO_EXPORT = 0x6DA,
  RPC_S_INCOMPLETE_NAME = 0x6DB,
  RPC_S_INVALID_VERS_OPTION = 0x6DC,
  RPC_S_NO_MORE_MEMBERS = 0x6DD,
  RPC_S_NOT_ALL_OBJS_UNEXPORTED = 0x6DE,
  RPC_S_INTERFACE_NOT_FOUND = 0x6DF,
  RPC_S_ENTRY_ALREADY_EXISTS = 0x6E0,
  RPC_S_ENTRY_NOT_FOUND = 0x6E1,
  RPC_S_NAME_SERVICE_UNAVAILABLE = 0x6E2,
  RPC_S_INVALID_NAF_ID = 0x6E3,
  RPC_S_CANNOT_SUPPORT = 0x6E4,
  RPC_S_NO_CONTEXT_AVAILABLE = 0x6E5,
  RPC_S_INTERNAL_ERROR = 0x6E6,
  RPC_S_ZERO_DIVIDE = 0x6E7,
  RPC_S_ADDRESS_ERROR = 0x6E8,
  RPC_S_FP_DIV_ZERO = 0x6E9,
  RPC_S_FP_UNDERFLOW = 0x6EA,
  RPC_S_FP_OVERFLOW = 0x6EB,
  RPC_X_NO_MORE_ENTRIES = 0x6EC,
  RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 0x6ED,
  RPC_X_SS_CHAR_TRANS_SHORT_FILE = 0x6EE,
  RPC_X_SS_IN_NULL_CONTEXT = 0x6EF,
  RPC_X_SS_CONTEXT_DAMAGED = 0x6F1,
  RPC_X_SS_HANDLES_MISMATCH = 0x6F2,
  RPC_X_SS_CANNOT_GET_CALL_HANDLE = 0x6F3,
  RPC_X_NULL_REF_POINTER = 0x6F4,
  RPC_X_ENUM_VALUE_OUT_OF_RANGE = 0x6F5,
  RPC_X_BYTE_COUNT_TOO_SMALL = 0x6F6,
  RPC_X_BAD_STUB_DATA = 0x6F7,
  ERROR_INVALID_USER_BUFFER = 0x6F8,
  ERROR_UNRECOGNIZED_MEDIA = 0x6F9,
  ERROR_NO_TRUST_LSA_SECRET = 0x6FA,
  ERROR_NO_TRUST_SAM_ACCOUNT = 0x6FB,
  ERROR_TRUSTED_DOMAIN_FAILURE = 0x6FC,
  ERROR_TRUSTED_RELATIONSHIP_FAILURE = 0x6FD,
  ERROR_TRUST_FAILURE = 0x6FE,
  RPC_S_CALL_IN_PROGRESS = 0x6FF,
  ERROR_NETLOGON_NOT_STARTED = 0x700,
  ERROR_ACCOUNT_EXPIRED = 0x701,
  ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 0x702,
  ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 0x703,
  ERROR_UNKNOWN_PORT = 0x704,
  ERROR_UNKNOWN_PRINTER_DRIVER = 0x705,
  ERROR_UNKNOWN_PRINTPROCESSOR = 0x706,
  ERROR_INVALID_SEPARATOR_FILE = 0x707,
  ERROR_INVALID_PRIORITY = 0x708,
  ERROR_INVALID_PRINTER_NAME = 0x709,
  ERROR_PRINTER_ALREADY_EXISTS = 0x70A,
  ERROR_INVALID_PRINTER_COMMAND = 0x70B,
  ERROR_INVALID_DATATYPE = 0x70C,
  ERROR_INVALID_ENVIRONMENT = 0x70D,
  RPC_S_NO_MORE_BINDINGS = 0x70E,
  ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 0x70F,
  ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 0x710,
  ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 0x711,
  ERROR_DOMAIN_TRUST_INCONSISTENT = 0x712,
  ERROR_SERVER_HAS_OPEN_HANDLES = 0x713,
  ERROR_RESOURCE_DATA_NOT_FOUND = 0x714,
  ERROR_RESOURCE_TYPE_NOT_FOUND = 0x715,
  ERROR_RESOURCE_NAME_NOT_FOUND = 0x716,
  ERROR_RESOURCE_LANG_NOT_FOUND = 0x717,
  ERROR_NOT_ENOUGH_QUOTA = 0x718,
  RPC_S_NO_INTERFACES = 0x719,
  RPC_S_CALL_CANCELLED = 0x71A,
  RPC_S_BINDING_INCOMPLETE = 0x71B,
  RPC_S_COMM_FAILURE = 0x71C,
  RPC_S_UNSUPPORTED_AUTHN_LEVEL = 0x71D,
  RPC_S_NO_PRINC_NAME = 0x71E,
  RPC_S_NOT_RPC_ERROR = 0x71F,
  RPC_S_UUID_LOCAL_ONLY = 0x720,
  RPC_S_SEC_PKG_ERROR = 0x721,
  RPC_S_NOT_CANCELLED = 0x722,
  RPC_X_INVALID_ES_ACTION = 0x723,
  RPC_X_WRONG_ES_VERSION = 0x724,
  RPC_X_WRONG_STUB_VERSION = 0x725,
  RPC_X_INVALID_PIPE_OBJECT = 0x726,
  RPC_X_WRONG_PIPE_ORDER = 0x727,
  RPC_X_WRONG_PIPE_VERSION = 0x728,
  RPC_S_GROUP_MEMBER_NOT_FOUND = 0x76A,
  EPT_S_CANT_CREATE = 0x76B,
  RPC_S_INVALID_OBJECT = 0x76C,
  ERROR_INVALID_TIME = 0x76D,
  ERROR_INVALID_FORM_NAME = 0x76E,
  ERROR_INVALID_FORM_SIZE = 0x76F,
  ERROR_ALREADY_WAITING = 0x770,
  ERROR_PRINTER_DELETED = 0x771,
  ERROR_INVALID_PRINTER_STATE = 0x772,
  ERROR_PASSWORD_MUST_CHANGE = 0x773,
  ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 0x774,
  ERROR_ACCOUNT_LOCKED_OUT = 0x775,
  OR_INVALID_OXID = 0x776,
  OR_INVALID_OID = 0x777,
  OR_INVALID_SET = 0x778,
  RPC_S_SEND_INCOMPLETE = 0x779,
  RPC_S_INVALID_ASYNC_HANDLE = 0x77A,
  RPC_S_INVALID_ASYNC_CALL = 0x77B,
  RPC_X_PIPE_CLOSED = 0x77C,
  RPC_X_PIPE_DISCIPLINE_ERROR = 0x77D,
  RPC_X_PIPE_EMPTY = 0x77E,
  ERROR_NO_SITENAME = 0x77F,
  ERROR_CANT_ACCESS_FILE = 0x780,
  ERROR_CANT_RESOLVE_FILENAME = 0x781,
  ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 0x782,
  ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 0x783,
  ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 0x784,
  ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 0x785,
  ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 0x786,
  ERROR_DS_BUSY = 0x787,
  ERROR_DS_UNAVAILABLE = 0x788,
  ERROR_DS_NO_RIDS_ALLOCATED = 0x789,
  ERROR_DS_NO_MORE_RIDS = 0x78A,
  ERROR_DS_INCORRECT_ROLE_OWNER = 0x78B,
  ERROR_DS_RIDMGR_INIT_ERROR = 0x78C,
  ERROR_DS_OBJ_CLASS_VIOLATION = 0x78D,
  ERROR_DS_CANT_ON_NON_LEAF = 0x78E,
  ERROR_DS_CANT_ON_RDN = 0x78F,
  ERROR_DS_CANT_MOD_OBJ_CLASS = 0x790,
  ERROR_DS_CROSS_DOM_MOVE_ERROR = 0x791,
  ERROR_DS_GC_NOT_AVAILABLE = 0x792,
  ERROR_NO_BROWSER_SERVERS_FOUND = 0x17E6,
  ERROR_INVALID_PIXEL_FORMAT = 0x7D0,
  ERROR_BAD_DRIVER = 0x7D1,
  ERROR_INVALID_WINDOW_STYLE = 0x7D2,
  ERROR_METAFILE_NOT_SUPPORTED = 0x7D3,
  ERROR_TRANSFORM_NOT_SUPPORTED = 0x7D4,
  ERROR_CLIPPING_NOT_SUPPORTED = 0x7D5,
  ERROR_INVALID_CMM = 0x8FC,
  ERROR_INVALID_PROFILE = 0x8FD,
  ERROR_TAG_NOT_FOUND = 0x8FE,
  ERROR_TAG_NOT_PRESENT = 0x8FF,
  ERROR_DUPLICATE_TAG = 0x900,
  ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 0x901,
  ERROR_PROFILE_NOT_FOUND = 0x902,
  ERROR_INVALID_COLORSPACE = 0x903,
  ERROR_ICM_NOT_ENABLED = 0x904,
  ERROR_DELETING_ICM_XFORM = 0x905,
  ERROR_INVALID_TRANSFORM = 0x906,
  ERROR_UNKNOWN_PRINT_MONITOR = 0xBB8,
  ERROR_PRINTER_DRIVER_IN_USE = 0xBB9,
  ERROR_SPOOL_FILE_NOT_FOUND = 0xBBA,
  ERROR_SPL_NO_STARTDOC = 0xBBB,
  ERROR_SPL_NO_ADDJOB = 0xBBC,
  ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 0xBBD,
  ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 0xBBE,
  ERROR_INVALID_PRINT_MONITOR = 0xBBF,
  ERROR_PRINT_MONITOR_IN_USE = 0xBC0,
  ERROR_PRINTER_HAS_JOBS_QUEUED = 0xBC1,
  ERROR_SUCCESS_REBOOT_REQUIRED = 0xBC2,
  ERROR_SUCCESS_RESTART_REQUIRED = 0xBC3,
  ERROR_WINS_INTERNAL = 0xFA0,
  ERROR_CAN_NOT_DEL_LOCAL_WINS = 0xFA1,
  ERROR_STATIC_INIT = 0xFA2,
  ERROR_INC_BACKUP = 0xFA3,
  ERROR_FULL_BACKUP = 0xFA4,
  ERROR_REC_NON_EXISTENT = 0xFA5,
  ERROR_RPL_NOT_ALLOWED = 0xFA6,
  ERROR_DHCP_ADDRESS_CONFLICT = 0x1004,
  ERROR_WMI_GUID_NOT_FOUND = 0x1068,
  ERROR_WMI_INSTANCE_NOT_FOUND = 0x1069,
  ERROR_WMI_ITEMID_NOT_FOUND = 0x106A,
  ERROR_WMI_TRY_AGAIN = 0x106B,
  ERROR_WMI_DP_NOT_FOUND = 0x106C,
  ERROR_WMI_UNRESOLVED_INSTANCE_REF = 0x106D,
  ERROR_WMI_ALREADY_ENABLED = 0x106E,
  ERROR_WMI_GUID_DISCONNECTED = 0x106F,
  ERROR_WMI_SERVER_UNAVAILABLE = 0x1070,
  ERROR_WMI_DP_FAILED = 0x1071,
  ERROR_WMI_INVALID_MOF = 0x1072,
  ERROR_WMI_INVALID_REGINFO = 0x1073,
  ERROR_INVALID_MEDIA = 0x10CC,
  ERROR_INVALID_LIBRARY = 0x10CD,
  ERROR_INVALID_MEDIA_POOL = 0x10CE,
  ERROR_DRIVE_MEDIA_MISMATCH = 0x10CF,
  ERROR_MEDIA_OFFLINE = 0x10D0,
  ERROR_LIBRARY_OFFLINE = 0x10D1,
  ERROR_EMPTY = 0x10D2,
  ERROR_NOT_EMPTY = 0x10D3,
  ERROR_MEDIA_UNAVAILABLE = 0x10D4,
  ERROR_RESOURCE_DISABLED = 0x10D5,
  ERROR_INVALID_CLEANER = 0x10D6,
  ERROR_UNABLE_TO_CLEAN = 0x10D7,
  ERROR_OBJECT_NOT_FOUND = 0x10D8,
  ERROR_DATABASE_FAILURE = 0x10D9,
  ERROR_DATABASE_FULL = 0x10DA,
  ERROR_MEDIA_INCOMPATIBLE = 0x10DB,
  ERROR_RESOURCE_NOT_PRESENT = 0x10DC,
  ERROR_INVALID_OPERATION = 0x10DD,
  ERROR_MEDIA_NOT_AVAILABLE = 0x10DE,
  ERROR_DEVICE_NOT_AVAILABLE = 0x10DF,
  ERROR_REQUEST_REFUSED = 0x10E0,
  ERROR_FILE_OFFLINE = 0x10FE,
  ERROR_REMOTE_STORAGE_NOT_ACTIVE = 0x10FF,
  ERROR_REMOTE_STORAGE_MEDIA_ERROR = 0x1100,
  ERROR_NOT_A_REPARSE_POINT = 0x1126,
  ERROR_REPARSE_ATTRIBUTE_CONFLICT = 0x1127,
  ERROR_DEPENDENT_RESOURCE_EXISTS = 0x1389,
  ERROR_DEPENDENCY_NOT_FOUND = 0x138A,
  ERROR_DEPENDENCY_ALREADY_EXISTS = 0x138B,
  ERROR_RESOURCE_NOT_ONLINE = 0x138C,
  ERROR_HOST_NODE_NOT_AVAILABLE = 0x138D,
  ERROR_RESOURCE_NOT_AVAILABLE = 0x138E,
  ERROR_RESOURCE_NOT_FOUND = 0x138F,
  ERROR_SHUTDOWN_CLUSTER = 0x1390,
  ERROR_CANT_EVICT_ACTIVE_NODE = 0x1391,
  ERROR_OBJECT_ALREADY_EXISTS = 0x1392,
  ERROR_OBJECT_IN_LIST = 0x1393,
  ERROR_GROUP_NOT_AVAILABLE = 0x1394,
  ERROR_GROUP_NOT_FOUND = 0x1395,
  ERROR_GROUP_NOT_ONLINE = 0x1396,
  ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 0x1397,
  ERROR_HOST_NODE_NOT_GROUP_OWNER = 0x1398,
  ERROR_RESMON_CREATE_FAILED = 0x1399,
  ERROR_RESMON_ONLINE_FAILED = 0x139A,
  ERROR_RESOURCE_ONLINE = 0x139B,
  ERROR_QUORUM_RESOURCE = 0x139C,
  ERROR_NOT_QUORUM_CAPABLE = 0x139D,
  ERROR_CLUSTER_SHUTTING_DOWN = 0x139E,
  ERROR_INVALID_STATE = 0x139F,
  ERROR_RESOURCE_PROPERTIES_STORED = 0x13A0,
  ERROR_NOT_QUORUM_CLASS = 0x13A1,
  ERROR_CORE_RESOURCE = 0x13A2,
  ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 0x13A3,
  ERROR_QUORUMLOG_OPEN_FAILED = 0x13A4,
  ERROR_CLUSTERLOG_CORRUPT = 0x13A5,
  ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 0x13A6,
  ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 0x13A7,
  ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 0x13A8,
  ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 0x13A9,
  ERROR_ENCRYPTION_FAILED = 0x1770,
  ERROR_DECRYPTION_FAILED = 0x1771,
  ERROR_FILE_ENCRYPTED = 0x1772,
  ERROR_NO_RECOVERY_POLICY = 0x1773,
  ERROR_NO_EFS = 0x1774,
  ERROR_WRONG_EFS = 0x1775,
  ERROR_NO_USER_KEYS = 0x1776,
  ERROR_FILE_NOT_ENCRYPTED = 0x1777,
  ERROR_NOT_EXPORT_FORMAT = 0x1778,
};

/* 27 */
struct __attribute__((aligned(4))) binder_write_read
{
  int write_size;
  int write_consumed;
  unsigned int write_buffer;
  int read_size;
  int read_consumed;
  unsigned int read_buffer;
};

/* 28 */
enum MACRO_DUPLICATE
{
  DUPLICATE_CLOSE_SOURCE = 0x1,
  DUPLICATE_SAME_ACCESS = 0x2,
};

/* 31 */
union binder_transaction_data::$D079491E8577E084BD162F03C2F595EB
{
  size_t handle;
  void *ptr;
};

/* 783 */
struct binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993::$76E49E73D22C7EB97CD59DFF8F6549A8
{
  const void *buffer;
  const void *offsets;
};

/* 784 */
union binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993
{
  struct binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993::$76E49E73D22C7EB97CD59DFF8F6549A8 ptr;
  unsigned __int8 buf[8];
};

/* 29 */
struct binder_transaction_data
{
  union binder_transaction_data::$D079491E8577E084BD162F03C2F595EB target;
  void *cookie;
  unsigned int code;
  unsigned int flags;
  unsigned int sender_pid;
  unsigned int sender_euid;
  size_t data_size;
  size_t offsets_size;
  union binder_transaction_data::$54DE4637096B7641DC9189BD1BEA7993 data;
};

/* 30 */
struct binder_transaction_data::$D994BC419564A2309B07BE823C2EC040::$76E49E73D22C7EB97CD59DFF8F6549A8
{
  const void *buffer;
  const void *offsets;
};

/* 32 */
union binder_transaction_data::$D994BC419564A2309B07BE823C2EC040
{
  struct binder_transaction_data::$D994BC419564A2309B07BE823C2EC040::$76E49E73D22C7EB97CD59DFF8F6549A8 ptr;
  unsigned __int8 buf[8];
};

/* 34 */
struct __attribute__((aligned(4))) list_head
{
  list_head *next;
  list_head *prev;
};

/* 146 */
struct __attribute__((aligned(4))) binder_stats
{
  int br[18];
  int bc[17];
  int obj_created[7];
  int obj_deleted[7];
};

/* 33 */
struct __attribute__((aligned(4))) binder_thread
{
  binder_proc *proc;
  rb_node rb_node;
  int pid;
  int looper;
  binder_transaction *transaction_stack;
  list_head todo;
  unsigned int return_error;
  unsigned int return_error2;
  struct pthread_cond_t_ *wait;
  binder_stats stats;
};

/* 569 */
struct __attribute__((aligned(4))) hlist_node
{
  hlist_node *next;
  hlist_node **pprev;
};

/* 741 */
struct binder_proc
{
  hlist_node proc_node;
  rb_root threads;
  rb_root nodes;
  rb_root refs_by_desc;
  rb_root refs_by_node;
  int pid;
  int uid;
  int fd;
  void *buffer;
  int user_buffer_offset;
  list_head buffers;
  rb_root free_buffers;
  rb_root allocated_buffers;
  unsigned int free_async_space;
  unsigned int buffer_size;
  unsigned int buffer_free;
  list_head todo;
  struct pthread_cond_t_ *wait;
  binder_stats stats;
  list_head delivered_death;
  int max_threads;
  int requested_threads;
  int requested_threads_started;
  int ready_threads;
  int default_priority;
};

/* 476 */
enum $959501DAFB7196048D4C26FFB5C708FD
{
  BINDER_WORK_TRANSACTION = 0x1,
  BINDER_WORK_TRANSACTION_COMPLETE = 0x2,
  BINDER_WORK_NODE = 0x3,
  BINDER_WORK_DEAD_BINDER = 0x4,
  BINDER_WORK_DEAD_BINDER_AND_CLEAR = 0x5,
  BINDER_WORK_CLEAR_DEATH_NOTIFICATION = 0x6,
};

/* 570 */
struct binder_work
{
  list_head entry;
  $959501DAFB7196048D4C26FFB5C708FD type;
};

/* 733 */
struct binder_transaction
{
  int debug_id;
  binder_work work;
  binder_thread *from;
  binder_transaction *from_parent;
  binder_proc *to_proc;
  binder_thread *to_thread;
  binder_transaction *to_parent;
  unsigned __int32 need_reply : 1;
  binder_buffer *buffer;
  unsigned int code;
  unsigned int flags;
  int sender_euid;
};

/* 404 */
struct binder_buffer
{
  list_head entry;
  rb_node rb_node;
  unsigned __int32 free : 1;
  unsigned __int32 allow_user_free : 1;
  unsigned __int32 async_transaction : 1;
  unsigned __int32 debug_id : 29;
  binder_transaction *transaction;
  binder_node *target_node;
  unsigned int data_size;
  unsigned int offsets_size;
  char data[];
};

/* 571 */
union $4518549C31465BBC0CCB439717F56243
{
  rb_node rb_node;
  hlist_node dead_node;
};

/* 56 */
struct __attribute__((aligned(4))) hlist_head
{
  hlist_node *first;
};

/* 572 */
struct binder_node
{
  int debug_id;
  binder_work work;
  $4518549C31465BBC0CCB439717F56243 ___u2;
  binder_proc *proc;
  hlist_head refs;
  int internal_strong_refs;
  int local_weak_refs;
  int local_strong_refs;
  void *ptr;
  void *cookie;
  unsigned __int32 has_strong_ref : 1;
  unsigned __int32 pending_strong_ref : 1;
  unsigned __int32 has_weak_ref : 1;
  unsigned __int32 pending_weak_ref : 1;
  unsigned __int32 has_async_transaction : 1;
  unsigned __int32 accept_fds : 1;
  __int32 min_priority : 8;
  list_head async_todo;
};

/* 35 */
struct struc_base
{
  int pid;
  int tid;
  int uid;
  int ext_len;
};

/* 36 */
struct struc_10
{
  int ioctl_code;
  int arg;
  binder_write_read wrbuf;
};

/* 37 */
struct struc_11
{
  int ioctl_code;
  int arg;
  binder_write_read field_8;
};

/* 38 */
enum ArmVM::ENUM_CALL_TYPE
{
  kSockBinderInit = 0xFFFFFFFF,
  kSockBinderClose = 0x3,
  kSockBinderKill = 0x3,
  kSockBinderIoctl = 0x2,
  kSockBinderMMap = 0x1,
  kSockBinderMunmap = 0x2,
  kSockBinderOpen = 0x0,
};

/* 39 */
enum __TI_flags
{
  TI_IsConst = 0x1,
  TI_IsVolatile = 0x2,
  TI_IsUnaligned = 0x4,
  TI_IsPure = 0x8,
  TI_IsWinRT = 0x10,
};

/* 40 */
enum __CT_flags
{
  CT_IsSimpleType = 0x1,
  CT_ByReferenceOnly = 0x2,
  CT_HasVirtualBase = 0x4,
  CT_IsWinRTHandle = 0x8,
  CT_IsStdBadAlloc = 0x10,
};

/* 473 */
enum __vc_attributes::moduleAttribute::type_e
{
  dll = 0x1,
  exe = 0x2,
  service = 0x3,
  unspecified = 0x4,
  EXE = 0x2,
  SERVICE = 0x3,
};

/* 41 */
typedef __vc_attributes::moduleAttribute::type_e __scrt_module_type;

/* 42 */
enum function_id
{
  EventRegister_id = 0x0,
  EventSetInformation_id = 0x1,
  EventUnregister_id = 0x2,
  EventWriteTransfer_id = 0x3,
  FlsAlloc_id = 0x4,
  FlsFree_id = 0x5,
  FlsGetValue_id = 0x6,
  FlsSetValue_id = 0x7,
  InitializeCriticalSectionEx_id = 0x8,
  function_id_count = 0x9,
};

/* 43 */
enum module_id
{
  advapi32 = 0x0,
  api_ms_win_core_fibers_l1_1_1 = 0x1,
  api_ms_win_core_synch_l1_2_0 = 0x2,
  kernel32 = 0x3,
  module_id_count = 0x4,
};

/* 44 */
enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0x0,
  ExceptionContinueSearch = 0x1,
  ExceptionNestedException = 0x2,
  ExceptionCollidedUnwind = 0x3,
};

/* 45 */
enum error_types
{
  logl_zero = 0x0,
  logl_negative = 0x1,
  log_zero = 0x2,
  log_negative = 0x3,
  logf_zero = 0x4,
  logf_negative = 0x5,
  log10l_zero = 0x6,
  log10l_negative = 0x7,
  log10_zero = 0x8,
  log10_negative = 0x9,
  log10f_zero = 0xA,
  log10f_negative = 0xB,
  expl_overflow = 0xC,
  expl_underflow = 0xD,
  exp_overflow = 0xE,
  exp_underflow = 0xF,
  expf_overflow = 0x10,
  expf_underflow = 0x11,
  powl_overflow = 0x12,
  powl_underflow = 0x13,
  powl_zero_to_zero = 0x14,
  powl_zero_to_negative = 0x15,
  powl_neg_to_non_integer = 0x16,
  powl_nan_to_zero = 0x17,
  pow_overflow = 0x18,
  pow_underflow = 0x19,
  pow_zero_to_zero = 0x1A,
  pow_zero_to_negative = 0x1B,
  pow_neg_to_non_integer = 0x1C,
  pow_nan_to_zero = 0x1D,
  powf_overflow = 0x1E,
  powf_underflow = 0x1F,
  powf_zero_to_zero = 0x20,
  powf_zero_to_negative = 0x21,
  powf_neg_to_non_integer = 0x22,
  powf_nan_to_zero = 0x23,
  atan2l_zero = 0x24,
  atan2_zero = 0x25,
  atan2f_zero = 0x26,
  expm1l_overflow = 0x27,
  expm1l_underflow = 0x28,
  expm1_overflow = 0x29,
  expm1_underflow = 0x2A,
  expm1f_overflow = 0x2B,
  expm1f_underflow = 0x2C,
  hypotl_overflow = 0x2D,
  hypot_overflow = 0x2E,
  hypotf_overflow = 0x2F,
  sqrtl_negative = 0x30,
  sqrt_negative = 0x31,
  sqrtf_negative = 0x32,
  scalbl_overflow = 0x33,
  scalbl_underflow = 0x34,
  scalb_overflow = 0x35,
  scalb_underflow = 0x36,
  scalbf_overflow = 0x37,
  scalbf_underflow = 0x38,
  acosl_gt_one = 0x39,
  acos_gt_one = 0x3A,
  acosf_gt_one = 0x3B,
  asinl_gt_one = 0x3C,
  asin_gt_one = 0x3D,
  asinf_gt_one = 0x3E,
  coshl_overflow = 0x3F,
  cosh_overflow = 0x40,
  coshf_overflow = 0x41,
  y0l_zero = 0x42,
  y0l_negative = 0x43,
  y0l_gt_loss = 0x44,
  y0_zero = 0x45,
  y0_negative = 0x46,
  y0_gt_loss = 0x47,
  y0f_zero = 0x48,
  y0f_negative = 0x49,
  y0f_gt_loss = 0x4A,
  y1l_zero = 0x4B,
  y1l_negative = 0x4C,
  y1l_gt_loss = 0x4D,
  y1_zero = 0x4E,
  y1_negative = 0x4F,
  y1_gt_loss = 0x50,
  y1f_zero = 0x51,
  y1f_negative = 0x52,
  y1f_gt_loss = 0x53,
  ynl_zero = 0x54,
  ynl_negative = 0x55,
  ynl_gt_loss = 0x56,
  yn_zero = 0x57,
  yn_negative = 0x58,
  yn_gt_loss = 0x59,
  ynf_zero = 0x5A,
  ynf_negative = 0x5B,
  ynf_gt_loss = 0x5C,
  j0l_gt_loss = 0x5D,
  j0_gt_loss = 0x5E,
  j0f_gt_loss = 0x5F,
  j1l_gt_loss = 0x60,
  j1_gt_loss = 0x61,
  j1f_gt_loss = 0x62,
  jnl_gt_loss = 0x63,
  jn_gt_loss = 0x64,
  jnf_gt_loss = 0x65,
  lgammal_overflow = 0x66,
  lgammal_negative = 0x67,
  lgammal_reserve = 0x68,
  lgamma_overflow = 0x69,
  lgamma_negative = 0x6A,
  lgamma_reserve = 0x6B,
  lgammaf_overflow = 0x6C,
  lgammaf_negative = 0x6D,
  lgammaf_reserve = 0x6E,
  gammal_overflow = 0x6F,
  gammal_negative = 0x70,
  gammal_reserve = 0x71,
  gamma_overflow = 0x72,
  gamma_negative = 0x73,
  gamma_reserve = 0x74,
  gammaf_overflow = 0x75,
  gammaf_negative = 0x76,
  gammaf_reserve = 0x77,
  fmodl_by_zero = 0x78,
  fmod_by_zero = 0x79,
  fmodf_by_zero = 0x7A,
  remainderl_by_zero = 0x7B,
  remainder_by_zero = 0x7C,
  remainderf_by_zero = 0x7D,
  sinhl_overflow = 0x7E,
  sinh_overflow = 0x7F,
  sinhf_overflow = 0x80,
  atanhl_gt_one = 0x81,
  atanhl_eq_one = 0x82,
  atanh_gt_one = 0x83,
  atanh_eq_one = 0x84,
  atanhf_gt_one = 0x85,
  atanhf_eq_one = 0x86,
  acoshl_lt_one = 0x87,
  acosh_lt_one = 0x88,
  acoshf_lt_one = 0x89,
  log1pl_zero = 0x8A,
  log1pl_negative = 0x8B,
  log1p_zero = 0x8C,
  log1p_negative = 0x8D,
  log1pf_zero = 0x8E,
  log1pf_negative = 0x8F,
  ldexpl_overflow = 0x90,
  ldexpl_underflow = 0x91,
  ldexp_overflow = 0x92,
  ldexp_underflow = 0x93,
  ldexpf_overflow = 0x94,
  ldexpf_underflow = 0x95,
  logbl_zero = 0x96,
  logb_zero = 0x97,
  logbf_zero = 0x98,
  nextafterl_overflow = 0x99,
  nextafter_overflow = 0x9A,
  nextafterf_overflow = 0x9B,
  ilogbl_zero = 0x9C,
  ilogb_zero = 0x9D,
  ilogbf_zero = 0x9E,
  exp2l_overflow = 0x9F,
  exp2l_underflow = 0xA0,
  exp2_overflow = 0xA1,
  exp2_underflow = 0xA2,
  exp2f_overflow = 0xA3,
  exp2f_underflow = 0xA4,
  exp10l_overflow = 0xA5,
  exp10_overflow = 0xA6,
  exp10f_overflow = 0xA7,
  log2l_zero = 0xA8,
  log2l_negative = 0xA9,
  log2_zero = 0xAA,
  log2_negative = 0xAB,
  log2f_zero = 0xAC,
  log2f_negative = 0xAD,
  log_nan = 0x3E8,
  log10_nan = 0x3E9,
  exp_nan = 0x3EA,
  atan_nan = 0x3EB,
  ceil_nan = 0x3EC,
  floor_nan = 0x3ED,
  pow_nan = 0x3EE,
  modf_nan = 0x3EF,
  acos_nan = 0x3F0,
  asin_nan = 0x3F1,
  sin_naninf = 0x3F2,
  cos_naninf = 0x3F3,
  tan_naninf = 0x3F4,
  sqrt_nan = 0x3F5,
};

/* 46 */
enum __crt_stdio_output::length_modifier
{
  none = 0x0,
  hh = 0x1,
  h = 0x2,
  l = 0x3,
  ll = 0x4,
  j = 0x5,
  z = 0x6,
  t = 0x7,
  L = 0x8,
  I = 0x9,
  I32 = 0xA,
  I64 = 0xB,
  w = 0xC,
  T = 0xD,
  enumerator_count = 0xE,
};

/* 467 */
enum __vc_attributes::event_sourceAttribute::optimize_e
{
  speed = 0x0,
  size = 0x1,
};

/* 47 */
typedef __vc_attributes::event_sourceAttribute::optimize_e __crt_stdio_output::state;

/* 48 */
enum __crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> >::pass
{
  not_started = 0x0,
  position_scan = 0x1,
  output = 0x2,
  finished = 0x3,
};

/* 49 */
enum __acrt_lock_id
{
  __acrt_heap_lock = 0x0,
  __acrt_debug_lock = 0x1,
  __acrt_exit_lock = 0x2,
  __acrt_signal_lock = 0x3,
  __acrt_locale_lock = 0x4,
  __acrt_multibyte_cp_lock = 0x5,
  __acrt_time_lock = 0x6,
  __acrt_lowio_index_lock = 0x7,
  __acrt_stdio_index_lock = 0x8,
  __acrt_conio_lock = 0x9,
  __acrt_popen_lock = 0xA,
  __acrt_environment_lock = 0xB,
  __acrt_tempnam_lock = 0xC,
  __acrt_lock_count = 0xD,
};

/* 50 */
enum _crt_exit_cleanup_mode
{
  _crt_exit_full_cleanup = 0x0,
  _crt_exit_quick_cleanup = 0x1,
  _crt_exit_no_cleanup = 0x2,
};

/* 51 */
enum _crt_exit_return_mode
{
  _crt_exit_terminate_process = 0x0,
  _crt_exit_return_to_caller = 0x1,
};

/* 52 */
enum _crt_argv_mode
{
  _crt_argv_no_arguments = 0x0,
  _crt_argv_unexpanded_arguments = 0x1,
  _crt_argv_expanded_arguments = 0x2,
};

/* 53 */
enum _crt_app_type
{
  _crt_unknown_app = 0x0,
  _crt_console_app = 0x1,
  _crt_gui_app = 0x2,
};

/* 54 */
enum __acrt_fp_class
{
  finite = 0x0,
  infinity = 0x1,
  quiet_nan = 0x2,
  signaling_nan = 0x3,
  indeterminate = 0x4,
};

/* 55 */
enum __scrt_native_startup_state
{
  uninitialized = 0x0,
  initializing = 0x1,
  initialized = 0x2,
};

/* 57 */
union __attribute__((aligned(4))) $2F9EC58EC9314F6C9AF43E98CF85E2FF
{
  unsigned int handle;
  void *ptr;
};

/* 58 */
struct __attribute__((aligned(4))) $76E49E73D22C7EB97CD59DFF8F6549A8
{
  const void *buffer;
  const void *offsets;
};

/* 59 */
union $0FAE717D548792FBF476D9B78C010AEF
{
  $76E49E73D22C7EB97CD59DFF8F6549A8 ptr;
  char buf[8];
};

/* 60 */
struct std::_Nil
{
};

/* 61 */
struct FuncInfo
{
  int magicNumber;
  int maxState;
  void *pUnwindMap;
  int nTryBlocks;
  void *pTryBlockMap;
  int nIPMapEntries;
  void *pIPtoStateMap;
  void *pESTypeList;
  int EHFlags;
};

/* 62 */
struct UnwindMapEntry
{
  int toState;
  void *action;
};

/* 63 */
struct TryBlockMapEntry
{
  int tryLow;
  int tryHigh;
  int catchHigh;
  int nCatches;
  void *pHandlerArray;
};

/* 64 */
struct HandlerType
{
  int adjectives;
  void *pType;
  int dispCatchObj;
  void *addressOfHandler;
};

/* 257 */
struct __attribute__((aligned(4))) std::_Container_base12
{
  std::_Container_proxy *_Myproxy;
};

/* 65 */
struct __attribute__((aligned(4))) std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >
{
  std::_Container_base12 _Myhead;
  unsigned int _Mysize;
};

/* 380 */
struct __attribute__((aligned(4))) std::_Container_proxy
{
  std::_Container_base12 *_Mycont;
  std::_Iterator_base12 *_Myfirstiter;
};

/* 265 */
struct __attribute__((aligned(4))) std::_Iterator_base12
{
  std::_Container_proxy *_Myproxy;
  std::_Iterator_base12 *_Mynextiter;
};

/* 66 */
struct __attribute__((aligned(4))) std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>
{
  std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > _Myval2;
};

/* 67 */
struct __attribute__((aligned(4))) std::_Compressed_pair<std::less<ArmVM::PipeThread *>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>,1>
{
  std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1> _Myval2;
};

/* 68 */
struct __attribute__((aligned(4))) std::_Tree_comp_alloc<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> >
{
  std::_Compressed_pair<std::less<ArmVM::PipeThread *>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<ArmVM::PipeThread *,void *> > >,std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,1>,1> _Mypair;
};

/* 69 */
struct __attribute__((aligned(4))) std::_Tree<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> >
{
  std::_Tree_comp_alloc<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> > baseclass_0;
};

/* 70 */
struct __attribute__((aligned(4))) std::set<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *> >
{
  std::_Tree<std::_Tset_traits<ArmVM::PipeThread *,std::less<ArmVM::PipeThread *>,std::allocator<ArmVM::PipeThread *>,0> > baseclass_0;
};

/* 71 */
struct __attribute__((aligned(4))) std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,std::_Iterator_base0>
{
  void *_Ptr;
};

/* 72 */
struct __attribute__((aligned(4))) std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > >
{
  std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,std::_Iterator_base0> baseclass_0;
};

/* 73 */
struct __attribute__((aligned(4))) std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
  void *_Myostr;
};

/* 74 */
struct __attribute__((aligned(4))) std::basic_ostream<char,std::char_traits<char> >::sentry
{
  std::basic_ostream<char,std::char_traits<char> >::_Sentry_base baseclass_0;
  bool _Ok;
};

/* 75 */
struct __attribute__((aligned(4))) ArmVM::base_struct_msg
{
  unsigned int pid;
  unsigned int tid;
  unsigned int uid;
  unsigned int ext_len;
};

/* 76 */
struct __attribute__((aligned(4))) google::CheckOpString
{
  void *str_;
};

/* 77 */
struct __attribute__((aligned(4))) ArmVM::struct_mmap_info
{
  unsigned int map_size;
  void *map_addr;
};

/* 78 */
struct __attribute__((aligned(4))) ArmVM::struct_ioctl_info
{
  unsigned int ioctl_code;
  unsigned int arg;
};

/* 79 */
struct __attribute__((aligned(4))) ArmVM::binder_write_read
{
  int write_size;
  int write_consumed;
  unsigned int write_buffer;
  int read_size;
  int read_consumed;
  unsigned int read_buffer;
};

/* 80 */
struct __attribute__((aligned(4))) _EXCEPTION_RECORD
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int ExceptionInformation[15];
};

/* 81 */
struct __attribute__((aligned(4))) _FLOATING_SAVE_AREA
{
  unsigned int ControlWord;
  unsigned int StatusWord;
  unsigned int TagWord;
  unsigned int ErrorOffset;
  unsigned int ErrorSelector;
  unsigned int DataOffset;
  unsigned int DataSelector;
  char RegisterArea[80];
  unsigned int Spare0;
};

/* 82 */
struct __attribute__((aligned(4))) _CONTEXT
{
  unsigned int ContextFlags;
  unsigned int Dr0;
  unsigned int Dr1;
  unsigned int Dr2;
  unsigned int Dr3;
  unsigned int Dr6;
  unsigned int Dr7;
  _FLOATING_SAVE_AREA FloatSave;
  unsigned int SegGs;
  unsigned int SegFs;
  unsigned int SegEs;
  unsigned int SegDs;
  unsigned int _Edi;
  unsigned int _Esi;
  unsigned int _Ebx;
  unsigned int _Edx;
  unsigned int _Ecx;
  unsigned int _Eax;
  unsigned int _Ebp;
  unsigned int _Eip;
  unsigned int SegCs;
  unsigned int EFlags;
  unsigned int _Esp;
  unsigned int SegSs;
  char ExtendedRegisters[512];
};

/* 83 */
struct __attribute__((aligned(4))) _EXCEPTION_POINTERS
{
  _EXCEPTION_RECORD *ExceptionRecord;
  _CONTEXT *ContextRecord;
};

/* 84 */
union __attribute__((aligned(8))) FT
{
  unsigned __int64 ft_scalar;
  _FILETIME ft_struct;
};

/* 86 */
struct __attribute__((aligned(4))) _onexit_table_t
{
  void (__cdecl **_first)();
  void (__cdecl **_last)();
  void (__cdecl **_end)();
};

/* 87 */
struct __attribute__((aligned(4))) _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  void *ScopeTable;
  DWORD TryLevel;
};

/* 88 */
struct __attribute__((aligned(4))) CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 89 */
struct __attribute__((aligned(4))) __std_exception_data
{
  const char *_What;
  bool _DoFree;
};

/* 90 */
struct __attribute__((aligned(4))) FrameInfo
{
  void *pExceptionObject;
  FrameInfo *pNext;
};

/* 91 */
struct __attribute__((aligned(4))) EHExceptionRecord::EHParameters
{
  unsigned int magicNumber;
  void *pExceptionObject;
  void *pThrowInfo;
};

/* 92 */
struct __attribute__((aligned(4))) EHExceptionRecord
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  EHExceptionRecord::EHParameters params;
};

/* 93 */
struct __attribute__((aligned(4))) __vcrt_ptd
{
  unsigned int _NLG_dwCode;
  void (__cdecl *_unexpected)();
  void *_translator;
  void *_purecall;
  void *_curexception;
  void *_curcontext;
  int _ProcessingThrow;
  void *_curexcspec;
  int _cxxReThrow;
  void *_pFrameInfoChain;
};

/* 94 */
struct __attribute__((aligned(4))) _HeapManager
{
  void *(__cdecl *pOpNew)(unsigned int);
  void (__cdecl *pOpDelete)(void *);
  void *head;
  void *tail;
  unsigned int blockLeft;
};

/* 95 */
struct __attribute__((aligned(4))) CatchGuardRN
{
  void *pNext;
  void *pFrameHandler;
  unsigned int RandomCookie;
  void *pFuncInfo;
  void *pRN;
  int CatchDepth;
};

/* 96 */
struct __attribute__((aligned(4))) TranslatorGuardRN
{
  void *pNext;
  void *pFrameHandler;
  unsigned int RandomCookie;
  void *pFuncInfo;
  void *pRN;
  int CatchDepth;
  void *pMarkerRN;
  void *_ESP;
  void *_EBP;
  int DidUnwind;
};

/* 97 */
struct __attribute__((aligned(8))) _exception
{
  int type;
  char *name;
  double arg1;
  double arg2;
  long double retval;
};

/* 98 */
struct __attribute__((aligned(4))) _FPIEEE_EXCEPTION_FLAGS
{
  __int32 _bf0;
};

/* 99 */
struct __attribute__((aligned(2))) _FP80
{
  unsigned __int16 W[5];
};

/* 100 */
struct __attribute__((aligned(4))) _FP128
{
  unsigned int W[4];
};

/* 101 */
struct __attribute__((aligned(4))) _I64
{
  unsigned int W[2];
};

/* 102 */
struct __attribute__((aligned(4))) _U64
{
  unsigned int W[2];
};

/* 103 */
struct __attribute__((aligned(2))) _BCD80
{
  unsigned __int16 W[5];
};

/* 104 */
struct __attribute__((aligned(4))) _U32ARRAY
{
  unsigned int W[4];
};

/* 105 */
struct __attribute__((aligned(8))) _FPQ64
{
  __int64 W[2];
};

/* 106 */
union __attribute__((aligned(8))) $A29487D7856F9D52B62F7F0CCF38DDE9
{
  float Fp32Value;
  long double Fp64Value;
  _FP80 Fp80Value;
  _FP128 Fp128Value;
  __int16 I16Value;
  int I32Value;
  _I64 I64Value;
  unsigned __int16 U16Value;
  unsigned int U32Value;
  _U64 U64Value;
  _BCD80 Bcd80Value;
  char *StringValue;
  int CompareValue;
  _U32ARRAY U32ArrayValue;
  __int64 Q64Value;
  _FPQ64 Fpq64Value;
};

/* 780 */
union __attribute__((aligned(8))) $98F0E3D4AB8DBDB62B135BC69E08813A
{
  float Fp32Value;
  long double Fp64Value;
  _FP80 Fp80Value;
  _FP128 Fp128Value;
  __int16 I16Value;
  int I32Value;
  _I64 I64Value;
  unsigned __int16 U16Value;
  unsigned int U32Value;
  _U64 U64Value;
  _BCD80 Bcd80Value;
  char *StringValue;
  int CompareValue;
  _U32ARRAY U32ArrayValue;
  __int64 Q64Value;
  _FPQ64 Fpq64Value;
};

/* 107 */
struct __attribute__((aligned(16))) _FPIEEE_VALUE
{
  $98F0E3D4AB8DBDB62B135BC69E08813A Value;
  __int32 _bf10;
};

/* 108 */
struct __attribute__((aligned(16))) _FPIEEE_RECORD
{
  __int32 _bf0;
  _FPIEEE_EXCEPTION_FLAGS Cause;
  _FPIEEE_EXCEPTION_FLAGS Enable;
  _FPIEEE_EXCEPTION_FLAGS Status;
  _FPIEEE_VALUE Operand1;
  _FPIEEE_VALUE Operand2;
  _FPIEEE_VALUE Result;
};

/* 109 */
struct __attribute__((aligned(4))) __crt_locale_pointers
{
  __crt_locale_data *locinfo;
  __crt_multibyte_data *mbcinfo;
};

/* 151 */
struct __attribute__((aligned(4))) __crt_locale_data_public
{
  const unsigned __int16 *_locale_pctype;
  int _locale_mb_cur_max;
  unsigned int _locale_lc_codepage;
};

/* 152 */
struct __attribute__((aligned(4))) __crt_locale_refcount
{
  char *locale;
  wchar_t *wlocale;
  int *refcount;
  int *wrefcount;
};

/* 153 */
struct __attribute__((aligned(4))) __crt_locale_data
{
  __crt_locale_data_public _public;
  int refcount;
  unsigned int lc_collate_cp;
  unsigned int lc_time_cp;
  int lc_clike;
  __crt_locale_refcount lc_category[6];
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  lconv *lconv;
  int *ctype1_refcount;
  unsigned __int16 *ctype1;
  const char *pclmap;
  const char *pcumap;
  __crt_lc_time_data *lc_time_curr;
  wchar_t *locale_name[6];
};

/* 154 */
struct __crt_multibyte_data
{
  int refcount;
  int mbcodepage;
  int ismbcodepage;
  unsigned __int16 mbulinfo[6];
  char mbctype[257];
  char mbcasemap[256];
  const wchar_t *mblocalename;
};

/* 139 */
struct lconv
{
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
  wchar_t *_W_decimal_point;
  wchar_t *_W_thousands_sep;
  wchar_t *_W_int_curr_symbol;
  wchar_t *_W_currency_symbol;
  wchar_t *_W_mon_decimal_point;
  wchar_t *_W_mon_thousands_sep;
  wchar_t *_W_positive_sign;
  wchar_t *_W_negative_sign;
};

/* 160 */
struct __crt_lc_time_data
{
  char *wday_abbr[7];
  char *wday[7];
  char *month_abbr[12];
  char *month[12];
  char *ampm[2];
  char *ww_sdatefmt;
  char *ww_ldatefmt;
  char *ww_timefmt;
  int ww_caltype;
  int refcount;
  wchar_t *_W_wday_abbr[7];
  wchar_t *_W_wday[7];
  wchar_t *_W_month_abbr[12];
  wchar_t *_W_month[12];
  wchar_t *_W_ampm[2];
  wchar_t *_W_ww_sdatefmt;
  wchar_t *_W_ww_ldatefmt;
  wchar_t *_W_ww_timefmt;
  wchar_t *_W_ww_locale_name;
};

/* 110 */
struct __attribute__((aligned(4))) _LocaleUpdate
{
  void *_ptd;
  __crt_locale_pointers _locale_pointers;
  bool _updated;
};

/* 111 */
struct __attribute__((aligned(4))) fenv_get_set
{
  unsigned int _Fe_ctl;
  unsigned int _Fe_stat;
  unsigned int _Fe_pad[5];
};

/* 112 */
struct __attribute__((aligned(4))) __crt_state_management::dual_state_global<int (__cdecl*)(_exception *)>
{
  int (__cdecl *_value[1])(_exception *);
};

/* 113 */
struct __attribute__((aligned(4))) fenv_t
{
  unsigned int _Fe_ctl;
  unsigned int _Fe_stat;
};

/* 114 */
struct __attribute__((aligned(4))) __crt_stdio_stream
{
  __crt_stdio_stream_data *_stream;
};

/* 148 */
struct _iobuf
{
  void *_Placeholder;
};

/* 149 */
union __attribute__((aligned(4))) $203B8869A37B333161EE04A31AF8E2BE
{
  _iobuf _public_file;
  char *_ptr;
};

/* 150 */
struct __attribute__((aligned(4))) __crt_stdio_stream_data
{
  $203B8869A37B333161EE04A31AF8E2BE ___u0;
  char *_base;
  int _cnt;
  int _flags;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
  _RTL_CRITICAL_SECTION _lock;
};

/* 115 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<char,__crt_internal_free_policy>
{
  char *_p;
};

/* 116 */
struct __attribute__((aligned(4))) __acrt_stdio_temporary_buffering_guard
{
  _iobuf *_stream;
  bool _flag;
};

/* 117 */
union __attribute__((aligned(4))) $147BBAAC6F057C74482616A6F88094DB
{
  char *_narrow_string;
  wchar_t *_wide_string;
};

/* 118 */
struct __attribute__((aligned(4))) __crt_stdio_output::formatting_buffer
{
  char _member_buffer[1024];
  unsigned int _dynamic_buffer_size;
  __crt_unique_heap_ptr<char,__crt_internal_free_policy> _dynamic_buffer;
};

/* 119 */
struct __attribute__((aligned(8))) __crt_stdio_output::common_data<char>
{
  unsigned __int64 _options;
  __crt_locale_pointers *_locale;
  int *_cached_errno;
  const char *_format_it;
  char *_valist_it;
  int _characters_written;
  __crt_stdio_output::state _state;
  unsigned int _flags;
  int _field_width;
  int _precision;
  __crt_stdio_output::length_modifier _length;
  bool _suppress_output;
  char _format_char;
  $147BBAAC6F057C74482616A6F88094DB ___u13;
  int _string_length;
  bool _string_is_wide;
  __crt_stdio_output::formatting_buffer _buffer;
};

/* 120 */
struct __attribute__((aligned(4))) __crt_stdio_output::stream_output_adapter<char>
{
  __crt_stdio_stream _stream;
};

/* 121 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_adapter_data<char,__crt_stdio_output::stream_output_adapter<char> >
{
  __crt_stdio_output::common_data<char> baseclass_0;
  __crt_stdio_output::stream_output_adapter<char> _output_adapter;
};

/* 122 */
struct __attribute__((aligned(8))) __crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> >
{
  __crt_stdio_output::output_adapter_data<char,__crt_stdio_output::stream_output_adapter<char> > baseclass_0;
  int _current_pass;
};

/* 123 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> > >
{
  __crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> > baseclass_0;
};

/* 124 */
struct __attribute__((aligned(8))) _CRT_DOUBLE
{
  long double x;
};

/* 125 */
struct __attribute__((aligned(4))) __crt_unique_handle_t<__crt_hmodule_traits>
{
  HINSTANCE__ *_handle;
};

/* 126 */
struct __attribute__((aligned(4))) argument_list<char>
{
  char **_first;
  char **_last;
  char **_end;
};

/* 127 */
struct __attribute__((aligned(4))) _WIN32_FIND_DATAA
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int dwReserved0;
  unsigned int dwReserved1;
  char cFileName[260];
  char cAlternateFileName[14];
};

/* 128 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<char *,__crt_internal_free_policy>
{
  char **_p;
};

/* 129 */
struct __attribute__((aligned(4))) __crt_state_management::dual_state_global<void (__cdecl*)(int)>
{
  void (__cdecl *_value[1])(int);
};

/* 130 */
struct __attribute__((aligned(4))) __crt_state_management::dual_state_global<void (__cdecl*)(wchar_t const *,wchar_t const *,wchar_t const *,unsigned int,unsigned int)>
{
  void (__cdecl *_value[1])(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, unsigned int);
};

/* 131 */
struct __attribute__((aligned(4))) _cpinfo
{
  unsigned int MaxCharSize;
  char DefaultChar[2];
  char LeadByte[12];
};

/* 132 */
struct __attribute__((aligned(4))) write_result
{
  unsigned int error_code;
  unsigned int char_count;
  unsigned int lf_count;
};

/* 133 */
struct __attribute__((aligned(4))) _STARTUPINFOW
{
  unsigned int cb;
  wchar_t *lpReserved;
  wchar_t *lpDesktop;
  wchar_t *lpTitle;
  unsigned int dwX;
  unsigned int dwY;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwXCountChars;
  unsigned int dwYCountChars;
  unsigned int dwFillAttribute;
  unsigned int dwFlags;
  unsigned __int16 wShowWindow;
  unsigned __int16 cbReserved2;
  char *lpReserved2;
  void *hStdInput;
  void *hStdOutput;
  void *hStdError;
};

/* 134 */
struct __attribute__((aligned(4))) __crt_state_management::dual_state_global<long>
{
  int _value[1];
};

/* 135 */
struct __attribute__((aligned(4))) __crt_state_management::dual_state_global<int (__cdecl*)(unsigned int)>
{
  int (__cdecl *_value[1])(unsigned int);
};

/* 136 */
struct __attribute__((aligned(4))) _strflt
{
  int sign;
  int decpt;
  char *mantissa;
};

/* 137 */
struct __attribute__((aligned(4))) scoped_fp_state_reset
{
  fenv_t _environment;
  bool _requires_reset;
};

/* 138 */
struct __attribute__((aligned(4))) __crt_strtox::c_string_character_source<char>
{
  const char *_p;
  const char **_end;
};

/* 140 */
struct __attribute__((aligned(4))) __crt_state_management::dual_state_global<char * *>
{
  char **_value[1];
};

/* 141 */
struct binder_transaction_log_entry
{
  int debug_id;
  int call_type;
  int from_proc;
  int from_thread;
  int target_handle;
  int to_proc;
  int to_thread;
  int to_node;
  int data_size;
  int offsets_size;
};

/* 142 */
struct binder_transaction_log
{
  int next;
  int full;
  binder_transaction_log_entry entry[32];
};

/* 143 */
struct __attribute__((aligned(4))) __crt_state_management::dual_state_global<wchar_t * *>
{
  wchar_t **_value[1];
};

/* 144 */
struct __attribute__((aligned(4))) _IMAGE_DOS_HEADER
{
  unsigned __int16 e_magic;
  unsigned __int16 e_cblp;
  unsigned __int16 e_cp;
  unsigned __int16 e_crlc;
  unsigned __int16 e_cparhdr;
  unsigned __int16 e_minalloc;
  unsigned __int16 e_maxalloc;
  unsigned __int16 e_ss;
  unsigned __int16 e_sp;
  unsigned __int16 e_csum;
  unsigned __int16 e_ip;
  unsigned __int16 e_cs;
  unsigned __int16 e_lfarlc;
  unsigned __int16 e_ovno;
  unsigned __int16 e_res[4];
  unsigned __int16 e_oemid;
  unsigned __int16 e_oeminfo;
  unsigned __int16 e_res2[10];
  int e_lfanew;
};

/* 145 */
struct __attribute__((aligned(4))) __crt_state_management::dual_state_global<__crt_locale_data *>
{
  __crt_locale_data *_value[1];
};

/* 147 */
union __attribute__((aligned(8))) _dbl
{
  int lng[2];
  long double dbl;
};

/* 155 */
struct __attribute__((aligned(4))) std::locale::id
{
  unsigned int _Id;
};

/* 156 */
struct __attribute__((aligned(4))) _IMAGE_LOAD_CONFIG_DIRECTORY32
{
  unsigned int Size;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int GlobalFlagsClear;
  unsigned int GlobalFlagsSet;
  unsigned int CriticalSectionDefaultTimeout;
  unsigned int DeCommitFreeBlockThreshold;
  unsigned int DeCommitTotalFreeThreshold;
  unsigned int LockPrefixTable;
  unsigned int MaximumAllocationSize;
  unsigned int VirtualMemoryThreshold;
  unsigned int ProcessHeapFlags;
  unsigned int ProcessAffinityMask;
  unsigned __int16 CSDVersion;
  unsigned __int16 Reserved1;
  unsigned int EditList;
  unsigned int SecurityCookie;
  unsigned int SEHandlerTable;
  unsigned int SEHandlerCount;
  unsigned int GuardCFCheckFunctionPointer;
  unsigned int Reserved2;
  unsigned int GuardCFFunctionTable;
  unsigned int GuardCFFunctionCount;
  unsigned int GuardFlags;
};

/* 157 */
struct __attribute__((aligned(4))) _NLG_INFO
{
  unsigned int dwSig;
  unsigned int uoffDestination;
  unsigned int dwCode;
  unsigned int uoffFramePointer;
};

/* 158 */
struct __attribute__((aligned(8))) __crt_lowio_handle_data
{
  _RTL_CRITICAL_SECTION lock;
  int osfhnd;
  __attribute__((aligned(8))) __int64 startpos;
  char osfile;
  _BYTE textmode[1];
  char _pipe_lookahead[3];
  __int8 _bf2d;
  char dbcsBuffer;
};

/* 159 */
struct __attribute__((aligned(4))) __crt_signal_action_t
{
  unsigned int _exception_number;
  int _signal_number;
  void (__cdecl *_action)(int);
};

/* 161 */
struct __attribute__((aligned(4))) _SINGLE_LIST_ENTRY
{
  _SINGLE_LIST_ENTRY *Next;
};

/* 162 */
struct __attribute__((aligned(4))) $B4AD88E0C92B4EA31AC7984D1C6144B5
{
  _SINGLE_LIST_ENTRY Next;
  unsigned __int16 Depth;
  unsigned __int16 CpuId;
};

/* 782 */
struct __attribute__((aligned(4))) $1394F7ADFE0FA40BE002A2F71F8DC39C
{
  _SINGLE_LIST_ENTRY Next;
  unsigned __int16 Depth;
  unsigned __int16 CpuId;
};

/* 163 */
union __attribute__((aligned(8))) _SLIST_HEADER
{
  unsigned __int64 Alignment;
  $1394F7ADFE0FA40BE002A2F71F8DC39C __s1;
};

/* 164 */
struct __attribute__((aligned(8))) __type_info_node
{
  _SLIST_HEADER _Header;
};

/* 165 */
struct __attribute__((aligned(4))) GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  char Data4[8];
};

/* 166 */
struct __attribute__((aligned(4))) _EH4_SCOPETABLE_RECORD
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 167 */
struct __attribute__((aligned(4))) _EH4_SCOPETABLE
{
  DWORD GSCookieOffset;
  DWORD GSCookieXOROffset;
  DWORD EHCookieOffset;
  DWORD EHCookieXOROffset;
  struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
};

/* 168 */
struct __attribute__((aligned(4))) std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > >,bool>
{
  std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> > > first;
  bool second;
};

/* 411 */
struct std::exceptionVtbl;

/* 169 */
struct __attribute__((aligned(4))) std::exception
{
  std::exceptionVtbl *vfptr;
  __std_exception_data _Data;
};

/* 170 */
struct __attribute__((aligned(4))) std::bad_alloc
{
  std::exception baseclass_0;
};

/* 171 */
struct __attribute__((aligned(4))) std::bad_array_new_length
{
  std::bad_alloc baseclass_0;
};

/* 172 */
struct __attribute__((aligned(4))) _s__ThrowInfo
{
  unsigned int attributes;
  void (__cdecl *pmfnUnwind)(void *);
  int (__cdecl *pForwardCompat)();
  void *pCatchableTypeArray;
};

/* 173 */
struct __attribute__((aligned(4))) std::logic_error
{
  std::exception baseclass_0;
};

/* 174 */
struct __attribute__((aligned(4))) std::length_error
{
  std::logic_error baseclass_0;
};

/* 175 */
struct __attribute__((aligned(4))) std::out_of_range
{
  std::logic_error baseclass_0;
};

/* 176 */
struct __attribute__((aligned(4))) std::bad_exception
{
  std::exception baseclass_0;
};

/* 177 */
struct __attribute__((aligned(4))) __std_type_info_data
{
  const char *_UndecoratedName;
  const char _DecoratedName[1];
};

/* 178 */
struct __attribute__((aligned(4))) __acrt_lock_stream_and_call::__l3::<lambda_db08b09ef7aa9d4f8620ce68402612bc>
{
  _iobuf *const stream;
};

/* 179 */
struct __attribute__((aligned(4))) __acrt_lock_stream_and_call::__l4::<lambda_3ae262bc35d4ba6a3825c4f6bcaaf95c>
{
  _iobuf *const stream;
};

/* 180 */
struct __crt_seh_guarded_call<int>
{
};

/* 181 */
struct __attribute__((aligned(4))) common_vfprintf::__l11::<lambda_4f2c1eaeead2a5fc776db5b62ea0fb9b>
{
  _iobuf *const *stream;
  __crt_locale_pointers *const *locale;
  const unsigned __int64 *options;
  const char *const *format;
  char *const *arglist;
};

/* 182 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l3::<lambda_995298e7d72eb4c2aab26c0585b3abe5>
{
  __acrt_lock_id lock_id;
};

/* 183 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l4::<lambda_293819299cbf9a7022e18b56a874bb5c>
{
  __acrt_lock_id lock_id;
};

/* 184 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l3::<lambda_800076c951b434888f4765a74a194fcc>
{
  __acrt_lock_id lock_id;
};

/* 185 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l4::<lambda_6dbb1268764f43b569ce7b67e331d33a>
{
  __acrt_lock_id lock_id;
};

/* 186 */
struct __attribute__((aligned(4))) _execute_onexit_table::__l22::<lambda_275893d493268fdec8709772e3fcec0e>
{
  _onexit_table_t *const *table;
};

/* 187 */
struct __attribute__((aligned(4))) _register_onexit_function::__l23::<lambda_4e60a939b0d047cfe11ddc22648dfba9>
{
  _onexit_table_t *const *table;
  int (__cdecl *const *function)();
};

/* 188 */
struct __attribute__((aligned(4))) __acrt_initializer
{
  bool (__cdecl *_initialize)();
  bool (__cdecl *_uninitialize)(bool);
};

/* 189 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l3::<lambda_51b6e8b1eb166f2a3faf91f424b38130>
{
  __acrt_lock_id lock_id;
};

/* 190 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l4::<lambda_0b5a4a3e68152e1d9b943535f5f47bed>
{
  __acrt_lock_id lock_id;
};

/* 191 */
struct __crt_seh_guarded_call<void>
{
};

/* 192 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l3::<lambda_3518db117f0e7cdb002338c5d3c47b6c>
{
  __acrt_lock_id lock_id;
};

/* 193 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l4::<lambda_abdedf541bb04549bc734292b4a045d4>
{
  __acrt_lock_id lock_id;
};

/* 194 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l3::<lambda_5b71d36f03204c0beab531769a5b5694>
{
  __acrt_lock_id lock_id;
};

/* 195 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l4::<lambda_8f9ce462984622f9bf76b59e2aaaf805>
{
  __acrt_lock_id lock_id;
};

/* 196 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l3::<lambda_9df27f884b057bc3edfc946cb5b7cf47>
{
  __acrt_lock_id lock_id;
};

/* 197 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l4::<lambda_cc0d902bcbbeb830f749456577db4721>
{
  __acrt_lock_id lock_id;
};

/* 198 */
struct __attribute__((aligned(4))) construct_ptd::__l3::<lambda_e69574bed617af4e071282c136b37893>
{
  void *ptd;
};

/* 199 */
struct __attribute__((aligned(4))) construct_ptd::__l4::<lambda_b2ea41f6bbb362cd97d94c6828d90b61>
{
  void *ptd;
  __crt_locale_data **const *locale_data;
};

/* 200 */
struct __attribute__((aligned(4))) destroy_ptd::__l15::<lambda_6250bd4b2a391816dd638c3bf72b0bcb>
{
  void *ptd;
};

/* 201 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l3::<lambda_a048d3beccc847880fc8490e18b82769>
{
  __acrt_lock_id lock_id;
};

/* 202 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l4::<lambda_f7496a158712204296dd6628a163878e>
{
  __acrt_lock_id lock_id;
};

/* 203 */
struct __crt_seh_guarded_call<void (__cdecl*)(int)>
{
};

/* 204 */
struct __acrt_get_sigabrt_handler::__l3::<lambda_ec61778202f4f5fc7e7711acc23c3bca>
{
};

/* 205 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l3::<lambda_978dc153c237d78434369da87b74ff60>
{
  __acrt_lock_id lock_id;
};

/* 206 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l4::<lambda_4a8533e2866a575feecb8298ce776b0d>
{
  __acrt_lock_id lock_id;
};

/* 207 */
struct __attribute__((aligned(4))) __acrt_lowio_lock_fh_and_call::__l3::<lambda_61cee617f5178ae960314fd4d05640a0>
{
  const int fh;
};

/* 208 */
struct __attribute__((aligned(4))) __acrt_lowio_lock_fh_and_call::__l4::<lambda_9cd88cf8ad10232537feb2133f08c833>
{
  const int fh;
};

/* 209 */
struct __attribute__((aligned(4))) _commit::__l20::<lambda_6978c1fb23f02e42e1d9e99668cc68aa>
{
  const int *fh;
};

/* 210 */
struct __attribute__((aligned(4))) __crt_strtox::big_integer
{
  unsigned int _used;
  unsigned int _data[115];
};

/* 211 */
struct __attribute__((aligned(4))) __acrt_lowio_lock_fh_and_call::__l3::<lambda_123407a5e2ac06da108355a851863b7a>
{
  const int fh;
};

/* 212 */
struct __attribute__((aligned(4))) __acrt_lowio_lock_fh_and_call::__l4::<lambda_ae55bdf541ad94d75914d381c370e64d>
{
  const int fh;
};

/* 213 */
struct __attribute__((aligned(4))) _close::__l20::<lambda_2fe9b910cf3cbf4a0ab98a02ba45b3ec>
{
  const int *fh;
};

/* 214 */
struct LONG_DOUBLE_12
{
  _TBYTE value;
  char padding[2];
};

/* 215 */
enum _RTC_ErrorNumber
{
  _RTC_CHKSTK = 0x0,
  _RTC_CVRT_LOSS_INFO = 0x1,
  _RTC_CORRUPT_STACK = 0x2,
  _RTC_UNINIT_LOCAL_USE = 0x3,
  _RTC_CORRUPTED_ALLOCA = 0x4,
  _RTC_ILLEGAL = 0x5,
};

/* 216 */
enum std::regex_constants::error_type
{
  error_collate = 0x0,
  error_ctype = 0x1,
  error_escape = 0x2,
  error_backref = 0x3,
  error_brack = 0x4,
  error_paren = 0x5,
  error_brace = 0x6,
  error_badbrace = 0x7,
  error_range = 0x8,
  error_space = 0x9,
  error_badrepeat = 0xA,
  error_complexity = 0xB,
  error_stack = 0xC,
  error_parse = 0xD,
  error_syntax = 0xE,
};

/* 217 */
enum _FILE_INFO_BY_HANDLE_CLASS
{
  FileBasicInfo = 0x0,
  FileStandardInfo = 0x1,
  FileNameInfo = 0x2,
  FileRenameInfo = 0x3,
  FileDispositionInfo = 0x4,
  FileAllocationInfo = 0x5,
  FileEndOfFileInfo = 0x6,
  FileStreamInfo = 0x7,
  FileCompressionInfo = 0x8,
  FileAttributeTagInfo = 0x9,
  FileIdBothDirectoryInfo = 0xA,
  FileIdBothDirectoryRestartInfo = 0xB,
  FileIoPriorityHintInfo = 0xC,
  FileRemoteProtocolInfo = 0xD,
  FileFullDirectoryInfo = 0xE,
  FileFullDirectoryRestartInfo = 0xF,
  FileStorageInfo = 0x10,
  FileAlignmentInfo = 0x11,
  FileIdInfo = 0x12,
  FileIdExtdDirectoryInfo = 0x13,
  FileIdExtdDirectoryRestartInfo = 0x14,
  MaximumFileInfoByHandleClass = 0x15,
};

/* 218 */
enum __vcrt_lock_id
{
  __vcrt_undname_lock = 0x0,
  __vcrt_lock_count = 0x1,
};

/* 219 */
enum _EVENT_INFO_CLASS
{
  EventProviderBinaryTrackInfo = 0x0,
  MaxEventInfo = 0x1,
};

/* 220 */
enum DNameStatus
{
  DN_valid = 0x0,
  DN_truncated = 0x1,
  DN_invalid = 0x2,
  DN_error = 0x3,
};

/* 221 */
enum Tokens
{
  TOK_basedLp = 0x0,
  TOK_cdecl = 0x1,
  TOK_pascal = 0x2,
  TOK_stdcall = 0x3,
  TOK_thiscall = 0x4,
  TOK_fastcall = 0x5,
  TOK_vectorcall = 0x6,
  TOK_cocall = 0x7,
  TOK_eabi = 0x8,
  TOK_ptr64 = 0x9,
  TOK_restrict = 0xA,
  TOK_unaligned = 0xB,
  TOK_restrictSpecLp = 0xC,
  TOK__last = 0xD,
};

/* 222 */
enum __crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> >::pass
{
};

/* 223 */
enum __crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::pass
{
};

/* 224 */
enum __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::pass
{
};

/* 225 */
enum __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::mode
{
  unknown = 0x0,
  nonpositional = 0x1,
  positional = 0x2,
};

/* 226 */
enum __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::parameter_type
{
  unused = 0x0,
  int32 = 0x1,
  int64 = 0x2,
  pointer = 0x3,
  real64 = 0x4,
};

/* 227 */
enum __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::pass
{
};

/* 228 */
enum __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::mode
{
};

/* 229 */
enum __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::parameter_type
{
};

/* 230 */
enum __crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::pass
{
};

/* 231 */
enum __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::pass
{
};

/* 232 */
enum __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::mode
{
};

/* 233 */
enum __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::parameter_type
{
};

/* 234 */
enum __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::pass
{
};

/* 235 */
enum __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::mode
{
};

/* 236 */
enum __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::parameter_type
{
};

/* 237 */
enum __crt_lowio_text_mode
{
  ansi = 0x0,
  utf8 = 0x1,
  utf16le = 0x2,
};

/* 238 */
enum RO_INIT_TYPE
{
  RO_INIT_SINGLETHREADED = 0x0,
  RO_INIT_MULTITHREADED = 0x1,
};

/* 239 */
enum HEAP_INFORMATION_CLASS
{
  HeapCompatibilityInformation = 0x0,
  HeapEnableTerminationOnCorruption = 0x1,
};

/* 240 */
enum FINDEX_INFO_LEVELS
{
  FindExInfoStandard = 0x0,
  FindExInfoMaxInfoLevel = 0x1,
};

/* 241 */
enum FINDEX_SEARCH_OPS
{
  FindExSearchNameMatch = 0x0,
  FindExSearchLimitToDirectories = 0x1,
  FindExSearchLimitToDevices = 0x2,
  FindExSearchMaxSearchOp = 0x3,
};

/* 242 */
enum _FINDEX_INFO_LEVELS
{
};

/* 243 */
enum _FINDEX_SEARCH_OPS
{
};

/* 244 */
struct std::_Zero_then_variadic_args_t
{
};

/* 245 */
struct __attribute__((aligned(4))) google::base::CheckOpMessageBuilder
{
  void *stream_;
};

/* 246 */
struct std::integral_constant<bool,1>
{
};

/* 247 */
struct std::_Really_trivial_ptr_iterator_tag
{
};

/* 248 */
struct std::_Trivially_copyable_ptr_iterator_tag
{
};

/* 249 */
struct std::_General_ptr_iterator_tag
{
};

/* 250 */
struct std::_Wrap_alloc<std::allocator<std::_Container_proxy> >
{
};

/* 251 */
struct std::allocator<std::_Container_proxy>
{
};

/* 252 */
struct __attribute__((aligned(4))) std::_Lockit
{
  int _Locktype;
};

/* 253 */
struct __attribute__((aligned(4))) ArmVM::base_msg
{
  ArmVM::ENUM_CALL_TYPE call_type;
  unsigned int pid;
  unsigned int tid;
  unsigned int uid;
  unsigned int ext_len;
};

/* 254 */
struct __attribute__((aligned(4))) ArmVM::struct_open_msg
{
  ArmVM::base_msg msg;
  unsigned int fd;
};

/* 255 */
struct __attribute__((aligned(4))) ArmVM::struct_close_msg
{
  ArmVM::base_msg msg;
};

/* 256 */
struct __attribute__((aligned(4))) ArmVM::struct_mmap_msg
{
  ArmVM::base_msg msg;
  ArmVM::struct_mmap_info map_info;
};

/* 258 */
struct __attribute__((aligned(4))) std::_Vector_val<std::_Simple_types<unsigned char> >
{
  std::_Container_base12 baseclass_0;
  char *_Myfirst;
  char *_Mylast;
  char *_Myend;
};

/* 259 */
struct __attribute__((aligned(4))) std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>
{
  std::_Vector_val<std::_Simple_types<unsigned char> > _Myval2;
};

/* 260 */
struct __attribute__((aligned(4))) std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
{
  std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1> _Mypair;
};

/* 261 */
struct __attribute__((aligned(4))) std::vector<unsigned char,std::allocator<unsigned char> >
{
  std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > > baseclass_0;
};

/* 262 */
struct __attribute__((aligned(4))) ArmVM::struct_ioctl_msg
{
  ArmVM::base_msg msg;
  ArmVM::struct_ioctl_info ioctl_info;
  ArmVM::binder_write_read bwr;
};

/* 263 */
struct __attribute__((aligned(4))) _STARTUPINFOA
{
  unsigned int cb;
  char *lpReserved;
  char *lpDesktop;
  char *lpTitle;
  unsigned int dwX;
  unsigned int dwY;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwXCountChars;
  unsigned int dwYCountChars;
  unsigned int dwFillAttribute;
  unsigned int dwFlags;
  unsigned __int16 wShowWindow;
  unsigned __int16 cbReserved2;
  char *lpReserved2;
  void *hStdInput;
  void *hStdOutput;
  void *hStdError;
};

/* 264 */
struct std::_One_then_variadic_args_t
{
};

/* 266 */
struct __attribute__((aligned(4))) std::_Iterator012<std::bidirectional_iterator_tag,ArmVM::PipeThread *,int,ArmVM::PipeThread * const *,ArmVM::PipeThread * const &,std::_Iterator_base12>
{
  std::_Iterator_base12 baseclass_0;
};

/* 267 */
struct __attribute__((aligned(4))) std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<ArmVM::PipeThread *> >,std::_Iterator_base12>
{
  std::_Iterator012<std::bidirectional_iterator_tag,ArmVM::PipeThread *,int,ArmVM::PipeThread * const *,ArmVM::PipeThread * const &,std::_Iterator_base12> baseclass_0;
  void *_Ptr;
};

/* 268 */
struct std::integral_constant<bool,0>
{
};

/* 269 */
union __attribute__((aligned(4))) std::_String_val<std::_Simple_types<wchar_t> >::_Bxty
{
  wchar_t _Buf[8];
  wchar_t *_Ptr;
  char _Alias[8];
};

/* 270 */
struct __attribute__((aligned(4))) std::_String_val<std::_Simple_types<wchar_t> >
{
  std::_Container_base12 baseclass_0;
  std::_String_val<std::_Simple_types<wchar_t> >::_Bxty _Bx;
  unsigned int _Mysize;
  unsigned int _Myres;
};

/* 271 */
struct __attribute__((aligned(4))) std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>
{
  std::_String_val<std::_Simple_types<wchar_t> > _Myval2;
};

/* 272 */
struct __attribute__((aligned(4))) std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
{
  std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1> _Mypair;
};

/* 273 */
struct __attribute__((aligned(4))) std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
{
  std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > > baseclass_0;
};

/* 274 */
struct _PROCESS_INFORMATION
{
  void *hProcess;
  void *hThread;
  unsigned int dwProcessId;
  unsigned int dwThreadId;
};

/* 275 */
struct __attribute__((aligned(4))) $F49258853DEB26A691BF42EC51DEEB49
{
  const char *szName;
  unsigned int dwThreadID;
  unsigned int dwFlags;
};

/* 276 */
struct __attribute__((aligned(4))) $ACC2D7BA72D8B5F31F315901218BB50A
{
  unsigned int dwLevelRequired;
  char *pbDebuggerPresent;
};

/* 277 */
struct __attribute__((aligned(4))) $C98644B53BFCB8058A8635BFBD9C27B0
{
  unsigned int dwRuntimeNumber;
  int bRealBug;
  void *pvReturnAddress;
  char *pbDebuggerPresent;
  const wchar_t *pwRuntimeMessage;
};

/* 278 */
union __attribute__((aligned(4))) $4300C07596126F505AD2E11CC883E7B0
{
  $F49258853DEB26A691BF42EC51DEEB49 SetName;
  $ACC2D7BA72D8B5F31F315901218BB50A DebuggerProbe;
  $C98644B53BFCB8058A8635BFBD9C27B0 RuntimeError;
};

/* 279 */
struct __attribute__((aligned(4))) tagEXCEPTION_VISUALCPP_DEBUG_INFO
{
  unsigned int dwType;
  $4300C07596126F505AD2E11CC883E7B0 ___u1;
};

/* 280 */
struct std::_Init_locks
{
};

/* 281 */
union __attribute__((aligned(16))) __m128i
{
  char m128i_i8[16];
  __int16 m128i_i16[8];
  int m128i_i32[4];
  __int64 m128i_i64[2];
  char m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned int m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

/* 282 */
struct __attribute__((aligned(4))) _s_HandlerType
{
  unsigned int adjectives;
  void *pType;
  int dispCatchObj;
  void *addressOfHandler;
};

/* 283 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<char,__crt_public_free_policy>
{
  char *_p;
};

/* 284 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<void,__crt_internal_free_policy>
{
  void *_p;
};

/* 285 */
struct __attribute__((aligned(4))) scoped_get_last_error_reset
{
  unsigned int _old_last_error;
};

/* 286 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__vcrt_ptd,__crt_internal_free_policy>
{
  __vcrt_ptd *_p;
};

/* 287 */
struct __attribute__((aligned(4))) DName
{
  DNameNode *node;
  __int32 _bf4;
};

/* 291 */
struct __attribute__((aligned(4))) DNameNode
{
  void *vfptr;
};

/* 288 */
struct __attribute__((aligned(4))) $08BD3D891899F43F57F1E55125C55774
{
  __int32 _bf0;
};

/* 289 */
union __attribute__((aligned(4))) TPI_t
{
  unsigned int index_;
  $08BD3D891899F43F57F1E55125C55774 __s1;
};

/* 290 */
struct __attribute__((aligned(4))) Replicator
{
  int index;
  DName *dNameBuffer[10];
};

/* 292 */
struct __attribute__((aligned(4))) DNameStatusNode
{
  DNameNode baseclass_0;
  DNameStatus me;
  int myLen;
};

/* 293 */
struct __attribute__((aligned(4))) UnDecorator
{
  Replicator ArgList;
  Replicator ZNameList;
};

/* 294 */
union __attribute__((aligned(8))) $EE28309FED38FA683D1DCD8E137722F5
{
  float Fp32Value;
  long double Fp64Value;
  _FP80 Fp80Value;
  _FP128 Fp128Value;
  __int16 I16Value;
  int I32Value;
  _I64 I64Value;
  unsigned __int16 U16Value;
  unsigned int U32Value;
  _U64 U64Value;
  _BCD80 Bcd80Value;
  char *StringValue;
  int CompareValue;
  _U32ARRAY U32ArrayValue;
  __int64 Q64Value;
  _FPQ64 Fpq64Value;
};

/* 295 */
union __attribute__((aligned(32))) __m256i
{
  char m256i_i8[32];
  __int16 m256i_i16[16];
  int m256i_i32[8];
  __int64 m256i_i64[4];
  char m256i_u8[32];
  unsigned __int16 m256i_u16[16];
  unsigned int m256i_u32[8];
  unsigned __int64 m256i_u64[4];
};

/* 296 */
struct __crt_simd_cleanup_guard<1>
{
};

/* 297 */
struct __crt_simd_cleanup_guard<0>
{
};

/* 298 */
struct __crt_state_management::scoped_global_state_reset
{
};

/* 299 */
struct __attribute__((aligned(4))) __crt_stdio_output::string_output_adapter_context<char>
{
  char *_buffer;
  unsigned int _buffer_count;
  unsigned int _buffer_used;
  bool _continue_count;
};

/* 300 */
struct __attribute__((aligned(4))) __crt_stdio_output::string_output_adapter<char>
{
  void *_context;
};

/* 301 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_adapter_data<char,__crt_stdio_output::string_output_adapter<char> >
{
  __crt_stdio_output::common_data<char> baseclass_0;
  __crt_stdio_output::string_output_adapter<char> _output_adapter;
};

/* 302 */
struct __attribute__((aligned(8))) __crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> >
{
  __crt_stdio_output::output_adapter_data<char,__crt_stdio_output::string_output_adapter<char> > baseclass_0;
  int _current_pass;
};

/* 303 */
struct __attribute__((aligned(8))) __crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> >
{
  __crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> > baseclass_0;
};

/* 304 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> > >
{
  __crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> > baseclass_0;
};

/* 305 */
struct __attribute__((aligned(4))) __crt_stdio_output::string_output_adapter_context<wchar_t>
{
  wchar_t *_buffer;
  unsigned int _buffer_count;
  unsigned int _buffer_used;
  bool _continue_count;
};

/* 306 */
struct __attribute__((aligned(8))) __crt_stdio_output::common_data<wchar_t>
{
  unsigned __int64 _options;
  __crt_locale_pointers *_locale;
  int *_cached_errno;
  const wchar_t *_format_it;
  char *_valist_it;
  int _characters_written;
  __crt_stdio_output::state _state;
  unsigned int _flags;
  int _field_width;
  int _precision;
  __crt_stdio_output::length_modifier _length;
  bool _suppress_output;
  wchar_t _format_char;
  $147BBAAC6F057C74482616A6F88094DB ___u13;
  int _string_length;
  bool _string_is_wide;
  __crt_stdio_output::formatting_buffer _buffer;
};

/* 307 */
struct __attribute__((aligned(4))) __crt_stdio_output::string_output_adapter<wchar_t>
{
  void *_context;
};

/* 308 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >
{
  __crt_stdio_output::common_data<wchar_t> baseclass_0;
  __crt_stdio_output::string_output_adapter<wchar_t> _output_adapter;
};

/* 309 */
struct __attribute__((aligned(8))) __crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >
{
  __crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > baseclass_0;
  int _current_pass;
};

/* 310 */
struct __attribute__((aligned(8))) __crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >
{
  __crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > baseclass_0;
};

/* 311 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >
{
  __crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > baseclass_0;
};

/* 312 */
struct __attribute__((aligned(4))) __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::parameter_data
{
  int _actual_type;
  char _format_type;
  char *_valist_it;
  __crt_stdio_output::length_modifier _length;
};

/* 313 */
struct __attribute__((aligned(8))) __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >
{
  __crt_stdio_output::format_validation_base<char,__crt_stdio_output::string_output_adapter<char> > baseclass_0;
  int _current_pass;
  int _format_mode;
  const char *_format;
  __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> >::parameter_data _parameters[100];
  int _maximum_index;
  int _type_index;
};

/* 314 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> > >
{
  __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::string_output_adapter<char> > baseclass_0;
};

/* 315 */
struct __attribute__((aligned(4))) __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::parameter_data
{
  int _actual_type;
  wchar_t _format_type;
  char *_valist_it;
  __crt_stdio_output::length_modifier _length;
};

/* 316 */
struct __attribute__((aligned(8))) __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >
{
  __crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > baseclass_0;
  int _current_pass;
  int _format_mode;
  const wchar_t *_format;
  __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> >::parameter_data _parameters[100];
  int _maximum_index;
  int _type_index;
};

/* 317 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >
{
  __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > baseclass_0;
};

/* 318 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<char,__crt_stdio_output::string_output_adapter<char>,__crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> > >
{
  __crt_stdio_output::standard_base<char,__crt_stdio_output::string_output_adapter<char> > baseclass_0;
};

/* 319 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t>,__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > >
{
  __crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::string_output_adapter<wchar_t> > baseclass_0;
};

/* 320 */
struct __attribute__((aligned(4))) __crt_stdio_output::stream_output_adapter<wchar_t>
{
  __crt_stdio_stream _stream;
};

/* 321 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >
{
  __crt_stdio_output::common_data<wchar_t> baseclass_0;
  __crt_stdio_output::stream_output_adapter<wchar_t> _output_adapter;
};

/* 322 */
struct __attribute__((aligned(8))) __crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >
{
  __crt_stdio_output::output_adapter_data<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > baseclass_0;
  int _current_pass;
};

/* 323 */
struct __attribute__((aligned(8))) __crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >
{
  __crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > baseclass_0;
};

/* 324 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >
{
  __crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > baseclass_0;
};

/* 325 */
struct __attribute__((aligned(8))) __crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> >
{
  __crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter<char> > baseclass_0;
};

/* 326 */
struct __attribute__((aligned(4))) __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::parameter_data
{
  int _actual_type;
  char _format_type;
  char *_valist_it;
  __crt_stdio_output::length_modifier _length;
};

/* 327 */
struct __attribute__((aligned(8))) __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >
{
  __crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> > baseclass_0;
  int _current_pass;
  int _format_mode;
  const char *_format;
  __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> >::parameter_data _parameters[100];
  int _maximum_index;
  int _type_index;
};

/* 328 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> > >
{
  __crt_stdio_output::positional_parameter_base<char,__crt_stdio_output::stream_output_adapter<char> > baseclass_0;
};

/* 329 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >
{
  __crt_stdio_output::standard_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > baseclass_0;
};

/* 330 */
struct __attribute__((aligned(4))) __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::parameter_data
{
  int _actual_type;
  wchar_t _format_type;
  char *_valist_it;
  __crt_stdio_output::length_modifier _length;
};

/* 331 */
struct __attribute__((aligned(8))) __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >
{
  __crt_stdio_output::format_validation_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > baseclass_0;
  int _current_pass;
  int _format_mode;
  const wchar_t *_format;
  __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> >::parameter_data _parameters[100];
  int _maximum_index;
  int _type_index;
};

/* 332 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t>,__crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > >
{
  __crt_stdio_output::positional_parameter_base<wchar_t,__crt_stdio_output::stream_output_adapter<wchar_t> > baseclass_0;
};

/* 333 */
struct __attribute__((aligned(8))) __crt_stdio_output::output_processor<char,__crt_stdio_output::stream_output_adapter<char>,__crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> > >
{
  __crt_stdio_output::format_validation_base<char,__crt_stdio_output::stream_output_adapter<char> > baseclass_0;
};

/* 334 */
struct __attribute__((aligned(4))) __crt_errno_guard
{
  int *_errno_address;
  int _stored_errno;
};

/* 335 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<unsigned char,__crt_internal_free_policy>
{
  char *_p;
};

/* 336 */
struct __attribute__((aligned(4))) argument_list<wchar_t>
{
  wchar_t **_first;
  wchar_t **_last;
  wchar_t **_end;
};

/* 337 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<wchar_t,__crt_internal_free_policy>
{
  wchar_t *_p;
};

/* 338 */
struct expand_argument_wildcards::__l3::<lambda_c141fc1027167882accd25626224452e>
{
};

/* 339 */
struct __attribute__((aligned(4))) __crt_unique_handle_t<__crt_findfile_traits>
{
  void *_handle;
};

/* 340 */
struct expand_argument_wildcards::__l3::<lambda_bf9b52a1b7159214c0120e2e7dc7eac6>
{
};

/* 341 */
struct __attribute__((aligned(4))) _WIN32_FIND_DATAW
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int dwReserved0;
  unsigned int dwReserved1;
  wchar_t cFileName[260];
  wchar_t cAlternateFileName[14];
};

/* 342 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<wchar_t *,__crt_internal_free_policy>
{
  wchar_t **_p;
};

/* 343 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__crt_report_hook_node<wchar_t>,__crt_internal_free_policy>
{
  void *_p;
};

/* 344 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__crt_report_hook_node<char>,__crt_internal_free_policy>
{
  void *_p;
};

/* 345 */
struct __attribute__((aligned(4))) message_box_arguments<char>
{
  const char *_caption;
  const char *_text;
  unsigned int _type;
  int _result;
};

/* 346 */
struct __attribute__((aligned(4))) __crt_unique_handle_t<__crt_handle_traits>
{
  void *_handle;
};

/* 347 */
struct __attribute__((aligned(4))) message_box_arguments<wchar_t>
{
  const wchar_t *_caption;
  const wchar_t *_text;
  unsigned int _type;
  int _result;
};

/* 348 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__crt_multibyte_data,__crt_internal_free_policy>
{
  __crt_multibyte_data *_p;
};

/* 349 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__crt_lowio_handle_data,__crt_internal_free_policy>
{
  __crt_lowio_handle_data *_p;
};

/* 350 */
struct __attribute__((aligned(2))) __crt_locale_strings
{
  wchar_t szLanguage[64];
  wchar_t szCountry[64];
  wchar_t szCodePage[16];
  wchar_t szLocaleName[85];
};

/* 351 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__crt_locale_pointers,__crt_internal_free_policy>
{
  __crt_locale_pointers *_p;
};

/* 352 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__crt_locale_data,__crt_internal_free_policy>
{
  __crt_locale_data *_p;
};

/* 353 */
struct __attribute__((aligned(4))) __crt_ctype_compatibility_data
{
  unsigned int id;
  int is_clike;
};

/* 354 */
struct __attribute__((aligned(4))) __crt_scoped_stack_ptr<wchar_t>
{
  wchar_t *const _p;
};

/* 355 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__crt_lc_time_data,__crt_internal_free_policy>
{
  __crt_lc_time_data *_p;
};

/* 356 */
struct __attribute__((aligned(4))) __crt_scoped_stack_ptr_tag<wchar_t>
{
  wchar_t *_p;
};

/* 357 */
struct __attribute__((aligned(4))) __crt_qualified_locale_data_downlevel
{
  int iLcidState;
  unsigned int lcidLanguage;
  unsigned int lcidCountry;
};

/* 358 */
struct __attribute__((aligned(4))) tagUSEROBJECTFLAGS
{
  int fInherit;
  int fReserved;
  unsigned int dwFlags;
};

/* 359 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__acrt_ptd,__crt_internal_free_policy>
{
  void *_p;
};

/* 360 */
struct __attribute__((aligned(4))) __crt_scoped_get_last_error_reset
{
  unsigned int _old_last_error;
};

/* 361 */
struct __attribute__((aligned(2))) $409DFF2A380C4FFE2B587D0390AC124E
{
  unsigned __int16 wProcessorArchitecture;
  unsigned __int16 wReserved;
};

/* 362 */
union __attribute__((aligned(4))) $73046C24F4FC5F58248B06D5FDAB2A98
{
  unsigned int dwOemId;
  $409DFF2A380C4FFE2B587D0390AC124E __s1;
};

/* 363 */
struct __attribute__((aligned(4))) _SYSTEM_INFO
{
  $73046C24F4FC5F58248B06D5FDAB2A98 ___u0;
  unsigned int dwPageSize;
  void *lpMinimumApplicationAddress;
  void *lpMaximumApplicationAddress;
  unsigned int dwActiveProcessorMask;
  unsigned int dwNumberOfProcessors;
  unsigned int dwProcessorType;
  unsigned int dwAllocationGranularity;
  unsigned __int16 wProcessorLevel;
  unsigned __int16 wProcessorRevision;
};

/* 364 */
struct __attribute__((aligned(4))) _CrtMemState
{
  void *pBlockHeader;
  unsigned int lCounts[5];
  unsigned int lSizes[5];
  unsigned int lHighWaterCount;
  unsigned int lTotalCount;
};

/* 365 */
struct __attribute__((aligned(4))) component_buffers<char>
{
  char *_drive;
  unsigned int _drive_count;
  char *_directory;
  unsigned int _directory_count;
  char *_file_name;
  unsigned int _file_name_count;
  char *_extension;
  unsigned int _extension_count;
};

/* 366 */
struct __attribute__((aligned(4))) component_buffers<wchar_t>
{
  wchar_t *_drive;
  unsigned int _drive_count;
  wchar_t *_directory;
  unsigned int _directory_count;
  wchar_t *_file_name;
  unsigned int _file_name_count;
  wchar_t *_extension;
  unsigned int _extension_count;
};

/* 367 */
struct common_splitpath::__l6::<lambda_89bf6c7d200ebdd35efc9e01f25ff60a>
{
};

/* 368 */
struct common_splitpath::__l7::<lambda_90799d8c5786ba041b3216863ff21b9d>
{
};

/* 369 */
struct common_splitpath_s::__l9::<lambda_ab7779844739fab15369d72763ed67dd>
{
};

/* 370 */
struct common_splitpath_s::__l10::<lambda_0a1e3dd207ef52559f7207a49085fc8a>
{
};

/* 371 */
struct common_splitpath_s::__l9::<lambda_784ed6ee23c12b976dd1035fbb94141e>
{
};

/* 372 */
struct common_splitpath_s::__l10::<lambda_f1d7037141e450cf079124977c73fe51>
{
};

/* 373 */
struct common_splitpath::__l6::<lambda_a4b986acc854560fc3a7606b0264cc37>
{
};

/* 374 */
struct common_splitpath::__l7::<lambda_6312fea2aaef510d0417ffae002cffee>
{
};

/* 375 */
struct __attribute__((aligned(2))) __crt_strtox::multiply_by_power_of_ten::__l2::unpack_index
{
  unsigned __int16 _offset;
  char _zeroes;
  char _size;
};

/* 376 */
struct __attribute__((aligned(4))) __crt_strtox::c_string_character_source<wchar_t>
{
  const wchar_t *_p;
  const wchar_t **_end;
};

/* 377 */
struct __attribute__((aligned(4))) _UNICODE_STRING
{
  unsigned __int16 Length;
  unsigned __int16 MaximumLength;
  wchar_t *Buffer;
};

/* 378 */
struct __attribute__((aligned(4))) $649C2944F320CE923A2CB8CA3DD58CA1
{
  _SINGLE_LIST_ENTRY Next;
  unsigned __int16 Depth;
  unsigned __int16 CpuId;
};

/* 379 */
struct __attribute__((aligned(4))) _RTC_framedesc
{
  int varCount;
  void *variables;
};

/* 381 */
struct std::less<ArmVM::PipeThread *>
{
};

/* 382 */
struct __attribute__((aligned(4))) std::bad_function_call
{
  std::exception baseclass_0;
};

/* 383 */
struct __attribute__((aligned(4))) std::invalid_argument
{
  std::logic_error baseclass_0;
};

/* 384 */
struct __attribute__((aligned(4))) std::runtime_error
{
  std::exception baseclass_0;
};

/* 385 */
struct __attribute__((aligned(4))) std::overflow_error
{
  std::runtime_error baseclass_0;
};

/* 386 */
struct __attribute__((aligned(4))) std::regex_error
{
  std::runtime_error baseclass_0;
  std::regex_constants::error_type _Err;
};

/* 387 */
struct __crt_public_free_policy
{
};

/* 388 */
struct __crt_internal_free_policy
{
};

/* 389 */
struct __attribute__((aligned(4))) type_info
{
  void *vfptr;
  __std_type_info_data _Data;
};

/* 390 */
struct __crt_fast_encoded_nullptr_t
{
};

/* 391 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__crt_stdio_stream_data *,__crt_internal_free_policy>
{
  __crt_stdio_stream_data **_p;
};

/* 392 */
struct __crt_char_traits<char>
{
};

/* 393 */
struct __crt_char_traits<wchar_t>
{
};

/* 394 */
struct __crt_call_and_cleanup::__l3::<lambda_507d9fd6b66e39451a8852ba73f804a7>
{
};

/* 395 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<void (__cdecl*)(void),__crt_internal_free_policy>
{
  void (__cdecl **_p)();
};

/* 396 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<long,__crt_internal_free_policy>
{
  int *_p;
};

/* 397 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<unsigned short,__crt_internal_free_policy>
{
  unsigned __int16 *_p;
};

/* 398 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<lconv,__crt_internal_free_policy>
{
  lconv *_p;
};

/* 399 */
struct __attribute__((aligned(4))) __crt_unique_heap_ptr<__crt_stdio_stream_data,__crt_internal_free_policy>
{
  __crt_stdio_stream_data *_p;
};

/* 400 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l3::<lambda_4980db0136e49a56f91ef52c46ca659a>
{
  __acrt_lock_id lock_id;
};

/* 401 */
struct __attribute__((aligned(4))) __acrt_lock_and_call::__l4::<lambda_9c074eaf62197b4fd0274ed9e7824161>
{
  __acrt_lock_id lock_id;
};

/* 402 */
struct __crt_seh_guarded_call<unsigned short>
{
};

/* 403 */
struct __attribute__((aligned(4))) _putwch::__l3::<lambda_6e3e78bb6855d1e4040e022c1b427e22>
{
  const wchar_t *c;
};

/* 405 */
struct ArmVM::ThreadVtbl
{
  void *(__thiscall *__vecDelDtor)(ArmVM::Thread *this, unsigned int);
  int (__thiscall *Main)(ArmVM::Thread *this);
};

/* 752 */
struct __cppobj __attribute__((aligned(4))) ArmVM::Thread
{
  ArmVM::ThreadVtbl *vfptr;
  void *m_thread;
  unsigned int m_threadId;
  bool m_isRunning;
};

/* 406 */
struct ArmVM::BaseIOStreanVtbl;

/* 407 */
struct std::_Facet_baseVtbl;

/* 408 */
struct std::error_condition;

/* 409 */
struct std::error_code;

/* 410 */
struct std::error_categoryVtbl;

/* 412 */
struct std::ios_baseVtbl;

/* 413 */
struct std::ios_base::_Iosarray;

/* 414 */
struct std::ios_base::_Fnarray;

/* 415 */
struct std::nested_exceptionVtbl;

/* 416 */
struct _s__RTTIBaseClassDescriptor2;

/* 417 */
struct _s__RTTIBaseClassArray;

/* 418 */
struct type_infoVtbl;

/* 419 */
struct ArmVM::ThreadUnixVtbl;

/* 420 */
struct google::LogSinkVtbl;

/* 421 */
struct _TEB_ACTIVE_FRAME_CONTEXT;

/* 422 */
struct std::_Node_baseVtbl;

/* 423 */
struct std::_Node_end_rep;

/* 424 */
struct DNameNodeVtbl;

/* 425 */
struct _RTL_BALANCED_NODE;

/* 426 */
struct EnumVtbl;

/* 427 */
struct DbgVtbl;

/* 428 */
struct IPDBErrorVtbl;

/* 429 */
struct DBI;

/* 430 */
struct Mod;

/* 431 */
struct TPI;

/* 432 */
struct TPIVtbl;

/* 433 */
struct EnumLines;

/* 434 */
struct ModVtbl;

/* 435 */
struct GSIVtbl;

/* 436 */
struct SO;

/* 437 */
struct LinkInfoW;

/* 438 */
struct DBIVtbl;

/* 439 */
struct Stream;

/* 440 */
struct StreamVtbl;

/* 441 */
struct _tagSEARCHDEBUGINFO;

/* 442 */
struct Src;

/* 443 */
struct SrcVtbl;

/* 444 */
struct PDBVtbl;

/* 445 */
struct stdext::exceptionVtbl;

/* 446 */
enum BinderDriverReturnProtocol
{
  BR_ERROR = 0x80047200,
  BR_OK = 0x7201,
  BR_TRANSACTION = 0x80287202,
  BR_REPLY = 0x80287203,
  BR_ACQUIRE_RESULT = 0x80047204,
  BR_DEAD_REPLY = 0x7205,
  BR_TRANSACTION_COMPLETE = 0x7206,
  BR_INCREFS = 0x80087207,
  BR_ACQUIRE = 0x80087208,
  BR_RELEASE = 0x80087209,
  BR_DECREFS = 0x8008720A,
  BR_ATTEMPT_ACQUIRE = 0x800C720B,
  BR_NOOP = 0x720C,
  BR_SPAWN_LOOPER = 0x720D,
  BR_FINISHED = 0x720E,
  BR_DEAD_BINDER = 0x8004720F,
  BR_CLEAR_DEATH_NOTIFICATION_DONE = 0x80047210,
  BR_FAILED_REPLY = 0x7211,
};

/* 447 */
enum $41865CB77DA3B5514F065C06BB0AF7CF
{
  BINDER_STAT_PROC = 0x0,
  BINDER_STAT_THREAD = 0x1,
  BINDER_STAT_NODE = 0x2,
  BINDER_STAT_REF = 0x3,
  BINDER_STAT_DEATH = 0x4,
  BINDER_STAT_TRANSACTION = 0x5,
  BINDER_STAT_TRANSACTION_COMPLETE = 0x6,
  BINDER_STAT_COUNT = 0x7,
};

/* 448 */
enum _tagINTERNETFEATURELIST
{
  FEATURE_OBJECT_CACHING = 0x0,
  FEATURE_ZONE_ELEVATION = 0x1,
  FEATURE_MIME_HANDLING = 0x2,
  FEATURE_MIME_SNIFFING = 0x3,
  FEATURE_WINDOW_RESTRICTIONS = 0x4,
  FEATURE_WEBOC_POPUPMANAGEMENT = 0x5,
  FEATURE_BEHAVIORS = 0x6,
  FEATURE_DISABLE_MK_PROTOCOL = 0x7,
  FEATURE_LOCALMACHINE_LOCKDOWN = 0x8,
  FEATURE_SECURITYBAND = 0x9,
  FEATURE_RESTRICT_ACTIVEXINSTALL = 0xA,
  FEATURE_VALIDATE_NAVIGATE_URL = 0xB,
  FEATURE_RESTRICT_FILEDOWNLOAD = 0xC,
  FEATURE_ADDON_MANAGEMENT = 0xD,
  FEATURE_PROTOCOL_LOCKDOWN = 0xE,
  FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 0xF,
  FEATURE_SAFE_BINDTOOBJECT = 0x10,
  FEATURE_UNC_SAVEDFILECHECK = 0x11,
  FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 0x12,
  FEATURE_TABBED_BROWSING = 0x13,
  FEATURE_SSLUX = 0x14,
  FEATURE_DISABLE_NAVIGATION_SOUNDS = 0x15,
  FEATURE_DISABLE_LEGACY_COMPRESSION = 0x16,
  FEATURE_FORCE_ADDR_AND_STATUS = 0x17,
  FEATURE_XMLHTTP = 0x18,
  FEATURE_DISABLE_TELNET_PROTOCOL = 0x19,
  FEATURE_FEEDS = 0x1A,
  FEATURE_BLOCK_INPUT_PROMPTS = 0x1B,
  FEATURE_ENTRY_COUNT = 0x1C,
};

/* 449 */
enum tagCOINITBASE
{
  COINITBASE_MULTITHREADED = 0x0,
};

/* 450 */
enum $7E51177C6562811140D50676AF40BF92
{
  BINDER_LOOPER_STATE_REGISTERED = 0x1,
  BINDER_LOOPER_STATE_ENTERED = 0x2,
  BINDER_LOOPER_STATE_EXITED = 0x4,
  BINDER_LOOPER_STATE_INVALID = 0x8,
  BINDER_LOOPER_STATE_WAITING = 0x10,
  BINDER_LOOPER_STATE_NEED_RETURN = 0x20,
};

/* 451 */
enum BinderDriverCommandProtocol
{
  BC_TRANSACTION = 0x40286300,
  BC_REPLY = 0x40286301,
  BC_ACQUIRE_RESULT = 0x40046302,
  BC_FREE_BUFFER = 0x40046303,
  BC_INCREFS = 0x40046304,
  BC_ACQUIRE = 0x40046305,
  BC_RELEASE = 0x40046306,
  BC_DECREFS = 0x40046307,
  BC_INCREFS_DONE = 0x40086308,
  BC_ACQUIRE_DONE = 0x40086309,
  BC_ATTEMPT_ACQUIRE = 0x4008630A,
  BC_REGISTER_LOOPER = 0x630B,
  BC_ENTER_LOOPER = 0x630C,
  BC_EXIT_LOOPER = 0x630D,
  BC_REQUEST_DEATH_NOTIFICATION = 0x4008630E,
  BC_CLEAR_DEATH_NOTIFICATION = 0x4008630F,
  BC_DEAD_BINDER_DONE = 0x40046310,
};

/* 452 */
enum $16FAF3A3A59F62A979771EF4CD14C16C
{
  BINDER_DEBUG_USER_ERROR = 0x1,
  BINDER_DEBUG_FAILED_TRANSACTION = 0x2,
  BINDER_DEBUG_DEAD_TRANSACTION = 0x4,
  BINDER_DEBUG_OPEN_CLOSE = 0x8,
  BINDER_DEBUG_DEAD_BINDER = 0x10,
  BINDER_DEBUG_DEATH_NOTIFICATION = 0x20,
  BINDER_DEBUG_READ_WRITE = 0x40,
  BINDER_DEBUG_USER_REFS = 0x80,
  BINDER_DEBUG_THREADS = 0x100,
  BINDER_DEBUG_TRANSACTION = 0x200,
  BINDER_DEBUG_TRANSACTION_COMPLETE = 0x400,
  BINDER_DEBUG_FREE_BUFFER = 0x800,
  BINDER_DEBUG_INTERNAL_REFS = 0x1000,
  BINDER_DEBUG_BUFFER_ALLOC = 0x2000,
  BINDER_DEBUG_PRIORITY_CAP = 0x4000,
  BINDER_DEBUG_BUFFER_ALLOC_ASYNC = 0x8000,
};

/* 453 */
enum $4C246F987AAFF474F03D933A00D98D62
{
  BINDER_DEFERRED_PUT_FILES = 0x1,
  BINDER_DEFERRED_FLUSH = 0x2,
  BINDER_DEFERRED_RELEASE = 0x4,
};

/* 454 */
enum $4E50F41F10557E49D7CD087EEDCBF4BE
{
  PTHREAD_MUTEX_FAST_NP = 0x0,
  PTHREAD_MUTEX_RECURSIVE_NP = 0x1,
  PTHREAD_MUTEX_ERRORCHECK_NP = 0x2,
  PTHREAD_MUTEX_TIMED_NP = 0x0,
  PTHREAD_MUTEX_ADAPTIVE_NP = 0x0,
  PTHREAD_MUTEX_NORMAL = 0x0,
  PTHREAD_MUTEX_RECURSIVE = 0x1,
  PTHREAD_MUTEX_ERRORCHECK = 0x2,
  PTHREAD_MUTEX_DEFAULT = 0x0,
};

/* 455 */
enum __MIDL_IUri_0001
{
  Uri_PROPERTY_ABSOLUTE_URI = 0x0,
  Uri_PROPERTY_STRING_START = 0x0,
  Uri_PROPERTY_AUTHORITY = 0x1,
  Uri_PROPERTY_DISPLAY_URI = 0x2,
  Uri_PROPERTY_DOMAIN = 0x3,
  Uri_PROPERTY_EXTENSION = 0x4,
  Uri_PROPERTY_FRAGMENT = 0x5,
  Uri_PROPERTY_HOST = 0x6,
  Uri_PROPERTY_PASSWORD = 0x7,
  Uri_PROPERTY_PATH = 0x8,
  Uri_PROPERTY_PATH_AND_QUERY = 0x9,
  Uri_PROPERTY_QUERY = 0xA,
  Uri_PROPERTY_RAW_URI = 0xB,
  Uri_PROPERTY_SCHEME_NAME = 0xC,
  Uri_PROPERTY_USER_INFO = 0xD,
  Uri_PROPERTY_USER_NAME = 0xE,
  Uri_PROPERTY_STRING_LAST = 0xE,
  Uri_PROPERTY_HOST_TYPE = 0xF,
  Uri_PROPERTY_DWORD_START = 0xF,
  Uri_PROPERTY_PORT = 0x10,
  Uri_PROPERTY_SCHEME = 0x11,
  Uri_PROPERTY_ZONE = 0x12,
  Uri_PROPERTY_DWORD_LAST = 0x12,
};

/* 456 */
enum $39C81EE52269BC5708A12E7ADA666432
{
  SCHED_OTHER = 0x0,
  SCHED_FIFO = 0x1,
  SCHED_RR = 0x2,
  SCHED_MIN = 0x0,
  SCHED_MAX = 0x2,
};

/* 457 */
enum DISPLAYCONFIG_SCANLINE_ORDERING
{
  DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0x0,
  DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 0x1,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 0x2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 0x2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 0x3,
  DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 458 */
enum __MIDL_IUri_0002
{
  Uri_HOST_UNKNOWN = 0x0,
  Uri_HOST_DNS = 0x1,
  Uri_HOST_IPV4 = 0x2,
  Uri_HOST_IPV6 = 0x3,
  Uri_HOST_IDN = 0x4,
};

/* 459 */
enum $A99CC3D3D6CDCF2A8525B50EDEA7C1E0
{
  BINDER_TYPE_BINDER = 0x73622A85,
  BINDER_TYPE_WEAK_BINDER = 0x77622A85,
  BINDER_TYPE_HANDLE = 0x73682A85,
  BINDER_TYPE_WEAK_HANDLE = 0x77682A85,
  BINDER_TYPE_FD = 0x66642A85,
};

/* 460 */
enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0x0,
  PowerUserNotPresent = 0x1,
  PowerUserInactive = 0x2,
  PowerUserMaximum = 0x3,
  PowerUserInvalid = 0x3,
};

/* 461 */
enum $A16D9E3B21DF0C0B34CF36FB71E1BCBE
{
  FLAT_BINDER_FLAG_PRIORITY_MASK = 0xFF,
  FLAT_BINDER_FLAG_ACCEPTS_FDS = 0x100,
};

/* 462 */
enum __MIDL_IGetBindHandle_0001
{
  BINDHANDLETYPES_APPCACHE = 0x0,
  BINDHANDLETYPES_DEPENDENCY = 0x1,
  BINDHANDLETYPES_COUNT = 0x2,
};

/* 463 */
enum $8FFF2F10CD505667A96793BB840C855E
{
  PTW32_FALSE = 0x0,
  PTW32_TRUE = 0x1,
};

/* 464 */
enum transaction_flags
{
  TF_ONE_WAY = 0x1,
  TF_ROOT_OBJECT = 0x4,
  TF_STATUS_CODE = 0x8,
  TF_ACCEPT_FDS = 0x10,
};

/* 465 */
enum $7CDFE018DB98A4F3F082169A249FA53E
{
  __the_value = 0x0,
};

/* 466 */
enum __vc_attributes::event_sourceAttribute::type_e
{
  native = 0x0,
  com = 0x1,
  managed = 0x2,
};

/* 468 */
enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e
{
  eBoolean = 0x0,
  eInteger = 0x1,
  eFloat = 0x2,
  eDouble = 0x3,
};

/* 469 */
enum __vc_attributes::helper_attributes::usageAttribute::usage_e
{
  eAnyUsage = 0x0,
  eCoClassUsage = 0x1,
  eCOMInterfaceUsage = 0x2,
  eInterfaceUsage = 0x6,
  eMemberUsage = 0x8,
  eMethodUsage = 0x10,
  eInterfaceMethodUsage = 0x20,
  eInterfaceMemberUsage = 0x40,
  eCoClassMemberUsage = 0x80,
  eCoClassMethodUsage = 0x100,
  eGlobalMethodUsage = 0x300,
  eGlobalDataUsage = 0x400,
  eClassUsage = 0x800,
  eInterfaceParameterUsage = 0x1000,
  eMethodParameterUsage = 0x3000,
  eIDLModuleUsage = 0x4000,
  eAnonymousUsage = 0x8000,
  eTypedefUsage = 0x10000,
  eUnionUsage = 0x20000,
  eEnumUsage = 0x40000,
  eDefineTagUsage = 0x80000,
  eStructUsage = 0x100000,
  eLocalUsage = 0x200000,
  ePropertyUsage = 0x400000,
  eEventUsage = 0x800000,
  eTemplateUsage = 0x1000000,
  eModuleUsage = 0x1000000,
  eIllegalUsage = 0x2000000,
  eAsynchronousUsage = 0x4000000,
  eAnyIDLUsage = 0x3F7FFF,
};

/* 470 */
enum __vc_attributes::threadingAttribute::threading_e
{
  apartment = 0x1,
  single = 0x2,
  free = 0x3,
  neutral = 0x4,
  both = 0x5,
};

/* 471 */
enum __vc_attributes::aggregatableAttribute::type_e
{
  never = 0x0,
  allowed = 0x1,
  always = 0x2,
};

/* 472 */
typedef __vc_attributes::event_sourceAttribute::type_e __vc_attributes::event_receiverAttribute::type_e;

/* 474 */
enum tagAR_STATE
{
  AR_ENABLED = 0x0,
  AR_DISABLED = 0x1,
  AR_SUPPRESSED = 0x2,
  AR_REMOTESESSION = 0x4,
  AR_MULTIMON = 0x8,
  AR_NOSENSOR = 0x10,
  AR_NOT_SUPPORTED = 0x20,
  AR_DOCKED = 0x40,
  AR_LAPTOP = 0x80,
};

/* 475 */
typedef $7CDFE018DB98A4F3F082169A249FA53E $65AD7847844D2F83A7EE01EA9C62470B;

/* 477 */
enum std::_Codecvt_mode
{
  _Consume_header = 0x4,
  _Generate_header = 0x2,
};

/* 478 */
enum std::float_round_style
{
  round_indeterminate = 0xFFFFFFFF,
  round_toward_zero = 0x0,
  round_to_nearest = 0x1,
  round_toward_infinity = 0x2,
  round_toward_neg_infinity = 0x3,
};

/* 479 */
enum std::float_denorm_style
{
  denorm_indeterminate = 0xFFFFFFFF,
  denorm_absent = 0x0,
  denorm_present = 0x1,
};

/* 480 */
enum std::_Uninitialized
{
  _Noinit = 0x0,
};

/* 481 */
enum $9E02737228DF5060E759F32703142FF5
{
  _BUF_SIZE = 0x8,
};

/* 482 */
enum $B2FB91FA9CC7CF3BD50434AFDECAC47F
{
  _ALLOC_MASK = 0x7,
};

/* 483 */
typedef $9E02737228DF5060E759F32703142FF5 $F0551E099AE6F36F41F19B6664DCAFD9;

/* 484 */
typedef $B2FB91FA9CC7CF3BD50434AFDECAC47F $8B51C3C74DF083A54E50CA72E34056B8;

/* 485 */
enum $0AE1ED1D395576D0F5C137E464D7BFE0
{
  _Openprot = 0x40,
};

/* 486 */
enum std::errc
{
  address_family_not_supported = 0x66,
  address_in_use = 0x64,
  address_not_available = 0x65,
  already_connected = 0x71,
  argument_list_too_long = 0x7,
  argument_out_of_domain = 0x21,
  bad_address = 0xE,
  bad_file_descriptor = 0x9,
  bad_message = 0x68,
  broken_pipe = 0x20,
  connection_aborted = 0x6A,
  connection_already_in_progress = 0x67,
  connection_refused = 0x6B,
  connection_reset = 0x6C,
  cross_device_link = 0x12,
  destination_address_required = 0x6D,
  device_or_resource_busy = 0x10,
  directory_not_empty = 0x29,
  executable_format_error = 0x8,
  file_exists = 0x11,
  file_too_large = 0x1B,
  filename_too_long = 0x26,
  function_not_supported = 0x28,
  host_unreachable = 0x6E,
  identifier_removed = 0x6F,
  illegal_byte_sequence = 0x2A,
  inappropriate_io_control_operation = 0x19,
  interrupted = 0x4,
  invalid_argument = 0x16,
  invalid_seek = 0x1D,
  io_error = 0x5,
  is_a_directory = 0x15,
  message_size = 0x73,
  network_down = 0x74,
  network_reset = 0x75,
  network_unreachable = 0x76,
  no_buffer_space = 0x77,
  no_child_process = 0xA,
  no_link = 0x79,
  no_lock_available = 0x27,
  no_message_available = 0x78,
  no_message = 0x7A,
  no_protocol_option = 0x7B,
  no_space_on_device = 0x1C,
  no_stream_resources = 0x7C,
  no_such_device_or_address = 0x6,
  no_such_device = 0x13,
  no_such_file_or_directory = 0x2,
  no_such_process = 0x3,
  not_a_directory = 0x14,
  not_a_socket = 0x80,
  not_a_stream = 0x7D,
  not_connected = 0x7E,
  not_enough_memory = 0xC,
  not_supported = 0x81,
  operation_canceled = 0x69,
  operation_in_progress = 0x70,
  operation_not_permitted = 0x1,
  operation_not_supported = 0x82,
  operation_would_block = 0x8C,
  owner_dead = 0x85,
  permission_denied = 0xD,
  protocol_error = 0x86,
  protocol_not_supported = 0x87,
  read_only_file_system = 0x1E,
  resource_deadlock_would_occur = 0x24,
  resource_unavailable_try_again = 0xB,
  result_out_of_range = 0x22,
  state_not_recoverable = 0x7F,
  stream_timeout = 0x89,
  text_file_busy = 0x8B,
  timed_out = 0x8A,
  too_many_files_open_in_system = 0x17,
  too_many_files_open = 0x18,
  too_many_links = 0x1F,
  too_many_symbolic_link_levels = 0x72,
  value_too_large = 0x84,
  wrong_protocol_type = 0x88,
};

/* 487 */
enum std::io_errc
{
  stream = 0x1,
};

/* 488 */
enum std::ios_base::event
{
  erase_event = 0x0,
  imbue_event = 0x1,
  copyfmt_event = 0x2,
};

/* 489 */
enum $3765A173ADD7CE92B6314F58D2CDA9A2
{
  alnum = 0x107,
  alpha = 0x103,
  cntrl = 0x20,
  digit = 0x4,
  graph = 0x117,
  lower = 0x2,
  print = 0x1D7,
  punct = 0x10,
  space = 0x48,
  upper = 0x1,
  xdigit = 0x80,
  blank = 0x48,
};

/* 490 */
enum $888A787B611AC58B01C1CD6E1DF87400
{
  _Future_addr = 0x1,
  _Generic_addr = 0x3,
  _Iostream_addr = 0x5,
  _System_addr = 0x7,
};

/* 491 */
enum $C7A66656BD20095141AF9DA597C58E36
{
  ok = 0x0,
  partial = 0x1,
  error = 0x2,
  noconv = 0x3,
};

/* 492 */
enum ArmVM::PipeOperationStream::PipeOperationStreamError
{
  ERR_INVALID_SOCKET = 0xFFFFFC18,
};

/* 493 */
enum $9ADEBD8A921918A39AFE0B81FE4AC4B2
{
  _Multi = 0x0,
};

/* 494 */
typedef $9ADEBD8A921918A39AFE0B81FE4AC4B2 $58DE2DA9E8DDE5DA2E2F36082422D5FD;

/* 495 */
enum ArmVM::ENUM_BINDER_TABLE
{
  kBINDER_WRITE_READ = 0xC0186201,
  kBINDER_SET_IDLE_TIMEOUT = 0x40046203,
  kBINDER_SET_MAX_THREADS = 0x40046205,
  kBINDER_SET_IDLE_PRIORITY = 0x40046206,
  kBINDER_SET_CONTEXT_MGR = 0x40046207,
  kBINDER_SET_CONTEXT_MGR_1 = 0x80046207,
  kBINDER_THREAD_EXIT = 0x40046208,
  kBINDER_VERSION = 0xC0046209,
};

/* 496 */
enum $DBDE8AE3BE3572C1105E906E611275D1
{
  _Allocated = 0x1,
  _Constant = 0x2,
  _Noread = 0x4,
  _Append = 0x8,
  _Atend = 0x10,
};

/* 497 */
enum $D78A09537603E058867F494A102DE664
{
  _MINSIZE = 0x20,
};

/* 498 */
enum $8DE97E81010A5DEE4765A09CFC7C1B80
{
  kNoLogPrefix = 0xFFFFFFFF,
};

/* 499 */
typedef int $80B40C51F983DF6470D1FE94B60AC2DA;

/* 500 */
enum ISA_AVAILABILITY
{
  __ISA_AVAILABLE_X86 = 0x0,
  __ISA_AVAILABLE_SSE2 = 0x1,
  __ISA_AVAILABLE_SSE42 = 0x2,
  __ISA_AVAILABLE_AVX = 0x3,
  __ISA_AVAILABLE_ENFSTRG = 0x4,
  __ISA_AVAILABLE_AVX2 = 0x5,
  __ISA_AVAILABLE_ARMNT = 0x0,
  __ISA_AVAILABLE_NEON = 0x1,
  __ISA_AVAILABLE_NEON_ARM64 = 0x2,
};

/* 501 */
enum $E9FC1C076C7FA1154C372E26E0451AEA
{
  __crt_maximum_pointer_shift = 0x20,
};

/* 502 */
enum std::_Node_flags
{
  _Fl_none = 0x0,
  _Fl_negate = 0x1,
  _Fl_greedy = 0x2,
  _Fl_final = 0x4,
  _Fl_longest = 0x8,
};

/* 503 */
enum std::_Node_type
{
  _N_none = 0x0,
  _N_nop = 0x1,
  _N_bol = 0x2,
  _N_eol = 0x3,
  _N_wbound = 0x4,
  _N_dot = 0x5,
  _N_str = 0x6,
  _N_class = 0x7,
  _N_group = 0x8,
  _N_end_group = 0x9,
  _N_assert = 0xA,
  _N_neg_assert = 0xB,
  _N_end_assert = 0xC,
  _N_capture = 0xD,
  _N_end_capture = 0xE,
  _N_back = 0xF,
  _N_if = 0x10,
  _N_endif = 0x11,
  _N_rep = 0x12,
  _N_end_rep = 0x13,
  _N_begin = 0x14,
  _N_end = 0x15,
};

/* 504 */
enum std::_Regex_traits_base::_Char_class_type
{
  _Ch_none = 0x0,
  _Ch_alnum = 0x107,
  _Ch_alpha = 0x103,
  _Ch_cntrl = 0x20,
  _Ch_digit = 0x4,
  _Ch_graph = 0x117,
  _Ch_lower = 0x2,
  _Ch_print = 0x1D7,
  _Ch_punct = 0x10,
  _Ch_space = 0x48,
  _Ch_upper = 0x1,
  _Ch_xdigit = 0x80,
  _Ch_blank = 0x48,
};

/* 505 */
typedef $3765A173ADD7CE92B6314F58D2CDA9A2 $E0E5A63BEEC24A40788161BF85A9B058;

/* 506 */
enum std::time_base::dateorder
{
  no_order = 0x0,
  dmy = 0x1,
  mdy = 0x2,
  ymd = 0x3,
  ydm = 0x4,
};

/* 507 */
enum std::regex_constants::syntax_option_type
{
  ECMAScript = 0x1,
  basic = 0x2,
  extended = 0x4,
  awk = 0x8,
  grep = 0x10,
  egrep = 0x20,
  _Gmask = 0x3F,
  icase = 0x100,
  nosubs = 0x200,
  optimize = 0x400,
  collate = 0x800,
};

/* 508 */
enum _FP_OPERATION_CODE
{
  _FpCodeUnspecified = 0x0,
  _FpCodeAdd = 0x1,
  _FpCodeSubtract = 0x2,
  _FpCodeMultiply = 0x3,
  _FpCodeDivide = 0x4,
  _FpCodeSquareRoot = 0x5,
  _FpCodeRemainder = 0x6,
  _FpCodeCompare = 0x7,
  _FpCodeConvert = 0x8,
  _FpCodeRound = 0x9,
  _FpCodeTruncate = 0xA,
  _FpCodeFloor = 0xB,
  _FpCodeCeil = 0xC,
  _FpCodeAcos = 0xD,
  _FpCodeAsin = 0xE,
  _FpCodeAtan = 0xF,
  _FpCodeAtan2 = 0x10,
  _FpCodeCabs = 0x11,
  _FpCodeCos = 0x12,
  _FpCodeCosh = 0x13,
  _FpCodeExp = 0x14,
  _FpCodeFabs = 0x15,
  _FpCodeFmod = 0x16,
  _FpCodeFrexp = 0x17,
  _FpCodeHypot = 0x18,
  _FpCodeLdexp = 0x19,
  _FpCodeLog = 0x1A,
  _FpCodeLog10 = 0x1B,
  _FpCodeModf = 0x1C,
  _FpCodePow = 0x1D,
  _FpCodeSin = 0x1E,
  _FpCodeSinh = 0x1F,
  _FpCodeTan = 0x20,
  _FpCodeTanh = 0x21,
  _FpCodeY0 = 0x22,
  _FpCodeY1 = 0x23,
  _FpCodeYn = 0x24,
  _FpCodeLogb = 0x25,
  _FpCodeNextafter = 0x26,
  _FpCodeNegate = 0x27,
  _FpCodeFmin = 0x28,
  _FpCodeFmax = 0x29,
  _FpCodeConvertTrunc = 0x2A,
  _XMMIAddps = 0x2B,
  _XMMIAddss = 0x2C,
  _XMMISubps = 0x2D,
  _XMMISubss = 0x2E,
  _XMMIMulps = 0x2F,
  _XMMIMulss = 0x30,
  _XMMIDivps = 0x31,
  _XMMIDivss = 0x32,
  _XMMISqrtps = 0x33,
  _XMMISqrtss = 0x34,
  _XMMIMaxps = 0x35,
  _XMMIMaxss = 0x36,
  _XMMIMinps = 0x37,
  _XMMIMinss = 0x38,
  _XMMICmpps = 0x39,
  _XMMICmpss = 0x3A,
  _XMMIComiss = 0x3B,
  _XMMIUComiss = 0x3C,
  _XMMICvtpi2ps = 0x3D,
  _XMMICvtsi2ss = 0x3E,
  _XMMICvtps2pi = 0x3F,
  _XMMICvtss2si = 0x40,
  _XMMICvttps2pi = 0x41,
  _XMMICvttss2si = 0x42,
  _XMMIAddsubps = 0x43,
  _XMMIHaddps = 0x44,
  _XMMIHsubps = 0x45,
  _XMMIRoundps = 0x46,
  _XMMIRoundss = 0x47,
  _XMMIDpps = 0x48,
  _XMMI2Addpd = 0x49,
  _XMMI2Addsd = 0x4A,
  _XMMI2Subpd = 0x4B,
  _XMMI2Subsd = 0x4C,
  _XMMI2Mulpd = 0x4D,
  _XMMI2Mulsd = 0x4E,
  _XMMI2Divpd = 0x4F,
  _XMMI2Divsd = 0x50,
  _XMMI2Sqrtpd = 0x51,
  _XMMI2Sqrtsd = 0x52,
  _XMMI2Maxpd = 0x53,
  _XMMI2Maxsd = 0x54,
  _XMMI2Minpd = 0x55,
  _XMMI2Minsd = 0x56,
  _XMMI2Cmppd = 0x57,
  _XMMI2Cmpsd = 0x58,
  _XMMI2Comisd = 0x59,
  _XMMI2UComisd = 0x5A,
  _XMMI2Cvtpd2pi = 0x5B,
  _XMMI2Cvtsd2si = 0x5C,
  _XMMI2Cvttpd2pi = 0x5D,
  _XMMI2Cvttsd2si = 0x5E,
  _XMMI2Cvtps2pd = 0x5F,
  _XMMI2Cvtss2sd = 0x60,
  _XMMI2Cvtpd2ps = 0x61,
  _XMMI2Cvtsd2ss = 0x62,
  _XMMI2Cvtdq2ps = 0x63,
  _XMMI2Cvttps2dq = 0x64,
  _XMMI2Cvtps2dq = 0x65,
  _XMMI2Cvttpd2dq = 0x66,
  _XMMI2Cvtpd2dq = 0x67,
  _XMMI2Addsubpd = 0x68,
  _XMMI2Haddpd = 0x69,
  _XMMI2Hsubpd = 0x6A,
  _XMMI2Roundpd = 0x6B,
  _XMMI2Roundsd = 0x6C,
  _XMMI2Dppd = 0x6D,
};

/* 509 */
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 0x1,
  JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 0x2,
  JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 0x4,
  JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 0x7,
};

/* 510 */
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 0x1,
  JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 0x1,
};

/* 511 */
enum _FPIEEE_FORMAT
{
  _FpFormatFp32 = 0x0,
  _FpFormatFp64 = 0x1,
  _FpFormatFp80 = 0x2,
  _FpFormatFp128 = 0x3,
  _FpFormatI16 = 0x4,
  _FpFormatI32 = 0x5,
  _FpFormatI64 = 0x6,
  _FpFormatU16 = 0x7,
  _FpFormatU32 = 0x8,
  _FpFormatU64 = 0x9,
  _FpFormatBcd80 = 0xA,
  _FpFormatCompare = 0xB,
  _FpFormatString = 0xC,
};

/* 512 */
enum TrustLevel
{
  BaseTrust = 0x0,
  PartialTrust = 0x1,
  FullTrust = 0x2,
};

/* 513 */
enum __crt_state_management::global_state_index
{
  program_state_index = 0x0,
  state_index_count = 0x1,
};

/* 514 */
enum _FPIEEE_ROUNDING_MODE
{
  _FpRoundNearest = 0x0,
  _FpRoundMinusInfinity = 0x1,
  _FpRoundPlusInfinity = 0x2,
  _FpRoundChopped = 0x3,
};

/* 515 */
enum _FPIEEE_PRECISION
{
  _FpPrecisionFull = 0x0,
  _FpPrecision53 = 0x1,
  _FpPrecision24 = 0x2,
};

/* 516 */
enum $C97936907F2E9B3338E0794C9EC46DF1
{
  pack_size = 0x20,
};

/* 517 */
enum $DB172DDDE5F27D82E90C8DEA3DB4FE04
{
  element_size = 0x1,
  elements_per_pack = 0x10,
};

/* 518 */
typedef $DB172DDDE5F27D82E90C8DEA3DB4FE04 $967735B7F6542CDAB59CCAE3D7885E54;

/* 519 */
typedef $C97936907F2E9B3338E0794C9EC46DF1 $5CF7DBC53F6F32D69DAB37F667FD2A10;

/* 520 */
enum __crt_simd_isa
{
  sse2 = 0x0,
  avx2 = 0x1,
};

/* 521 */
typedef MACRO__IOREAD $B3C4F2FB26B07EF1D23D08AB45FC61E6;

/* 522 */
enum $C97727942FFF695511CC5A9A536FF8B2
{
  FOPEN = 0x1,
  FEOFLAG = 0x2,
  FCRLF = 0x4,
  FPIPE = 0x8,
  FNOINHERIT = 0x10,
  FAPPEND = 0x20,
  FDEV = 0x40,
  FTEXT = 0x80,
};

/* 523 */
enum __crt_stdio_output::FLAG
{
  FL_SIGN = 0x1,
  FL_SIGNSP = 0x2,
  FL_LEFT = 0x4,
  FL_LEADZERO = 0x8,
  FL_SIGNED = 0x10,
  FL_ALTERNATE = 0x20,
  FL_NEGATIVE = 0x40,
  FL_FORCEOCTAL = 0x80,
};

/* 524 */
enum $31F4AE57909C71802BB619CAB83033DA
{
  member_buffer_size = 0x400,
  maximum_precision = 0x200,
};

/* 525 */
typedef $80B40C51F983DF6470D1FE94B60AC2DA MULTICAST_MODE_TYPE;

/* 526 */
typedef $3765A173ADD7CE92B6314F58D2CDA9A2 __crt_stdio_output::character_type;

/* 527 */
enum $F4B69C7BEC7FF395B8587B2B11206DC2
{
  mantissa_bits = 0x35,
  exponent_bits = 0xB,
  maximum_binary_exponent = 0x3FF,
  minimum_binary_exponent = 0xFFFFFC02,
  exponent_bias = 0x3FF,
};

/* 528 */
enum $69A6FE18FC3F31E7EC35A0F7A3615857
{
  exponent_mask = 0x7FF,
  normal_mantissa_mask = 0xFFFFFFFF,
  denormal_mantissa_mask = 0xFFFFFFFF,
  special_nan_mantissa_mask = 0x0,
};

/* 529 */
typedef $F4B69C7BEC7FF395B8587B2B11206DC2 $4F8920A4A41098E9B028CEC92197A983;

/* 530 */
typedef $69A6FE18FC3F31E7EC35A0F7A3615857 $A15C22A9078F845A4F065AEEF86032E4;

/* 531 */
enum $1E007D60BF1FBD65FD8FF5F337DCE184
{
  initial_table_count = 0x20,
  minimum_table_increment = 0x4,
  maximum_table_increment = 0x200,
};

/* 532 */
enum _PS_WAKE_REASON
{
  PsWakeReasonUser = 0x0,
  PsWakeReasonExecutionRequired = 0x1,
  PsWakeReasonKernel = 0x2,
  PsWakeReasonInstrumentation = 0x3,
  PsWakeReasonPreserveProcess = 0x4,
  PsMaxWakeReasons = 0x5,
};

/* 533 */
enum SE_WS_APPX_SIGNATURE_ORIGIN
{
  SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0x0,
  SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 0x1,
  SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 0x2,
  SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 0x3,
  SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 0x4,
};

/* 534 */
enum _RTL_RESOURCE_POLICY_FLAGS
{
  RTL_RESOURCE_POLICY_FLAGS_NONE = 0x0,
};

/* 535 */
enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 0x1,
  NtProductLanManNt = 0x2,
  NtProductServer = 0x3,
};

/* 536 */
enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0x0,
  NEC98x86 = 0x1,
  EndAlternatives = 0x2,
};

/* 537 */
enum _KSPIN_LOCK_QUEUE_NUMBER
{
  LockQueueUnusedSpare0 = 0x0,
  LockQueueUnusedSpare1 = 0x1,
  LockQueueUnusedSpare2 = 0x2,
  LockQueueUnusedSpare3 = 0x3,
  LockQueueVacbLock = 0x4,
  LockQueueMasterLock = 0x5,
  LockQueueNonPagedPoolLock = 0x6,
  LockQueueIoCancelLock = 0x7,
  LockQueueWorkQueueLock = 0x8,
  LockQueueIoVpbLock = 0x9,
  LockQueueIoDatabaseLock = 0xA,
  LockQueueIoCompletionLock = 0xB,
  LockQueueNtfsStructLock = 0xC,
  LockQueueAfdWorkQueueLock = 0xD,
  LockQueueBcbLock = 0xE,
  LockQueueUnusedSpare15 = 0xF,
  LockQueueUnusedSpare16 = 0x10,
  LockQueueMaximumLock = 0x11,
};

/* 538 */
typedef __crt_stdio_output::FLAG $CB840D3AB6A8444486D394F8CE659C13;

/* 539 */
enum SLD_STATUS
{
  SLD_OK = 0x0,
  SLD_NODIGITS = 0x1,
  SLD_UNDERFLOW = 0x2,
  SLD_OVERFLOW = 0x3,
};

/* 540 */
enum $3143A7E76DC998FE4865D06FD624AE89
{
  value = 0x1,
};

/* 541 */
typedef $3143A7E76DC998FE4865D06FD624AE89 $F9AF551EA4EDF7DA3F11B1C468C927D1;

/* 542 */
enum $6203ABD29D98E2165EF90E496859D9C8
{
  maximum_bits = 0xE4A,
  element_bits = 0x20,
  element_count = 0x73,
};

/* 543 */
typedef int $53091E8B7324FD0E85FFE62254BC5002;

/* 544 */
typedef $53091E8B7324FD0E85FFE62254BC5002 ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

/* 545 */
typedef int $0FC989869F227A36D749990E523E5F04;

/* 546 */
enum EPrintPropertyType
{
  kPropertyTypeString = 0x1,
  kPropertyTypeInt32 = 0x2,
  kPropertyTypeInt64 = 0x3,
  kPropertyTypeByte = 0x4,
  kPropertyTypeTime = 0x5,
  kPropertyTypeDevMode = 0x6,
  kPropertyTypeSD = 0x7,
  kPropertyTypeNotificationReply = 0x8,
  kPropertyTypeNotificationOptions = 0x9,
  kPropertyTypeBuffer = 0xA,
};

/* 547 */
enum EXCEPTION_DEBUGGER_ENUM
{
  EXCEPTION_DEBUGGER_NAME_THREAD = 0x1000,
  EXCEPTION_DEBUGGER_PROBE = 0x1001,
  EXCEPTION_DEBUGGER_RUNTIMECHECK = 0x1002,
  EXCEPTION_DEBUGGER_FIBER = 0x1003,
  EXCEPTION_DEBUGGER_HANDLECHECK = 0x1004,
  EXCEPTION_DEBUGGER_MAX = 0x1004,
};

/* 548 */
enum LEAF_ENUM_e
{
  LF_MODIFIER_16t = 0x1,
  LF_POINTER_16t = 0x2,
  LF_ARRAY_16t = 0x3,
  LF_CLASS_16t = 0x4,
  LF_STRUCTURE_16t = 0x5,
  LF_UNION_16t = 0x6,
  LF_ENUM_16t = 0x7,
  LF_PROCEDURE_16t = 0x8,
  LF_MFUNCTION_16t = 0x9,
  LF_VTSHAPE = 0xA,
  LF_COBOL0_16t = 0xB,
  LF_COBOL1 = 0xC,
  LF_BARRAY_16t = 0xD,
  LF_LABEL = 0xE,
  LF_NULL = 0xF,
  LF_NOTTRAN = 0x10,
  LF_DIMARRAY_16t = 0x11,
  LF_VFTPATH_16t = 0x12,
  LF_PRECOMP_16t = 0x13,
  LF_ENDPRECOMP = 0x14,
  LF_OEM_16t = 0x15,
  LF_TYPESERVER_ST = 0x16,
  LF_SKIP_16t = 0x200,
  LF_ARGLIST_16t = 0x201,
  LF_DEFARG_16t = 0x202,
  LF_LIST = 0x203,
  LF_FIELDLIST_16t = 0x204,
  LF_DERIVED_16t = 0x205,
  LF_BITFIELD_16t = 0x206,
  LF_METHODLIST_16t = 0x207,
  LF_DIMCONU_16t = 0x208,
  LF_DIMCONLU_16t = 0x209,
  LF_DIMVARU_16t = 0x20A,
  LF_DIMVARLU_16t = 0x20B,
  LF_REFSYM = 0x20C,
  LF_BCLASS_16t = 0x400,
  LF_VBCLASS_16t = 0x401,
  LF_IVBCLASS_16t = 0x402,
  LF_ENUMERATE_ST = 0x403,
  LF_FRIENDFCN_16t = 0x404,
  LF_INDEX_16t = 0x405,
  LF_MEMBER_16t = 0x406,
  LF_STMEMBER_16t = 0x407,
  LF_METHOD_16t = 0x408,
  LF_NESTTYPE_16t = 0x409,
  LF_VFUNCTAB_16t = 0x40A,
  LF_FRIENDCLS_16t = 0x40B,
  LF_ONEMETHOD_16t = 0x40C,
  LF_VFUNCOFF_16t = 0x40D,
  LF_TI16_MAX = 0x1000,
  LF_MODIFIER = 0x1001,
  LF_POINTER = 0x1002,
  LF_ARRAY_ST = 0x1003,
  LF_CLASS_ST = 0x1004,
  LF_STRUCTURE_ST = 0x1005,
  LF_UNION_ST = 0x1006,
  LF_ENUM_ST = 0x1007,
  LF_PROCEDURE = 0x1008,
  LF_MFUNCTION = 0x1009,
  LF_COBOL0 = 0x100A,
  LF_BARRAY = 0x100B,
  LF_DIMARRAY_ST = 0x100C,
  LF_VFTPATH = 0x100D,
  LF_PRECOMP_ST = 0x100E,
  LF_OEM = 0x100F,
  LF_ALIAS_ST = 0x1010,
  LF_OEM2 = 0x1011,
  LF_SKIP = 0x1200,
  LF_ARGLIST = 0x1201,
  LF_DEFARG_ST = 0x1202,
  LF_FIELDLIST = 0x1203,
  LF_DERIVED = 0x1204,
  LF_BITFIELD = 0x1205,
  LF_METHODLIST = 0x1206,
  LF_DIMCONU = 0x1207,
  LF_DIMCONLU = 0x1208,
  LF_DIMVARU = 0x1209,
  LF_DIMVARLU = 0x120A,
  LF_BCLASS = 0x1400,
  LF_VBCLASS = 0x1401,
  LF_IVBCLASS = 0x1402,
  LF_FRIENDFCN_ST = 0x1403,
  LF_INDEX = 0x1404,
  LF_MEMBER_ST = 0x1405,
  LF_STMEMBER_ST = 0x1406,
  LF_METHOD_ST = 0x1407,
  LF_NESTTYPE_ST = 0x1408,
  LF_VFUNCTAB = 0x1409,
  LF_FRIENDCLS = 0x140A,
  LF_ONEMETHOD_ST = 0x140B,
  LF_VFUNCOFF = 0x140C,
  LF_NESTTYPEEX_ST = 0x140D,
  LF_MEMBERMODIFY_ST = 0x140E,
  LF_MANAGED_ST = 0x140F,
  LF_ST_MAX = 0x1500,
  LF_TYPESERVER = 0x1501,
  LF_ENUMERATE = 0x1502,
  LF_ARRAY = 0x1503,
  LF_CLASS = 0x1504,
  LF_STRUCTURE = 0x1505,
  LF_UNION = 0x1506,
  LF_ENUM = 0x1507,
  LF_DIMARRAY = 0x1508,
  LF_PRECOMP = 0x1509,
  LF_ALIAS = 0x150A,
  LF_DEFARG = 0x150B,
  LF_FRIENDFCN = 0x150C,
  LF_MEMBER = 0x150D,
  LF_STMEMBER = 0x150E,
  LF_METHOD = 0x150F,
  LF_NESTTYPE = 0x1510,
  LF_ONEMETHOD = 0x1511,
  LF_NESTTYPEEX = 0x1512,
  LF_MEMBERMODIFY = 0x1513,
  LF_MANAGED = 0x1514,
  LF_TYPESERVER2 = 0x1515,
  LF_STRIDED_ARRAY = 0x1516,
  LF_HLSL = 0x1517,
  LF_MODIFIER_EX = 0x1518,
  LF_INTERFACE = 0x1519,
  LF_BINTERFACE = 0x151A,
  LF_VECTOR = 0x151B,
  LF_MATRIX = 0x151C,
  LF_VFTABLE = 0x151D,
  LF_ENDOFLEAFRECORD = 0x151D,
  LF_TYPE_LAST = 0x151E,
  LF_TYPE_MAX = 0x151D,
  LF_FUNC_ID = 0x1601,
  LF_MFUNC_ID = 0x1602,
  LF_BUILDINFO = 0x1603,
  LF_SUBSTR_LIST = 0x1604,
  LF_STRING_ID = 0x1605,
  LF_UDT_SRC_LINE = 0x1606,
  LF_UDT_MOD_SRC_LINE = 0x1607,
  LF_CLASS2 = 0x1608,
  LF_STRUCTURE2 = 0x1609,
  LF_UNION2 = 0x160A,
  LF_INTERFACE2 = 0x160B,
  LF_ID_LAST = 0x160C,
  LF_ID_MAX = 0x160B,
  LF_NUMERIC = 0x8000,
  LF_CHAR = 0x8000,
  LF_SHORT = 0x8001,
  LF_USHORT = 0x8002,
  LF_LONG = 0x8003,
  LF_ULONG = 0x8004,
  LF_REAL32 = 0x8005,
  LF_REAL64 = 0x8006,
  LF_REAL80 = 0x8007,
  LF_REAL128 = 0x8008,
  LF_QUADWORD = 0x8009,
  LF_UQUADWORD = 0x800A,
  LF_REAL48 = 0x800B,
  LF_COMPLEX32 = 0x800C,
  LF_COMPLEX64 = 0x800D,
  LF_COMPLEX80 = 0x800E,
  LF_COMPLEX128 = 0x800F,
  LF_VARSTRING = 0x8010,
  LF_OCTWORD = 0x8017,
  LF_UOCTWORD = 0x8018,
  LF_DECIMAL = 0x8019,
  LF_DATE = 0x801A,
  LF_UTF8STRING = 0x801B,
  LF_REAL16 = 0x801C,
  LF_PAD0 = 0xF0,
  LF_PAD1 = 0xF1,
  LF_PAD2 = 0xF2,
  LF_PAD3 = 0xF3,
  LF_PAD4 = 0xF4,
  LF_PAD5 = 0xF5,
  LF_PAD6 = 0xF6,
  LF_PAD7 = 0xF7,
  LF_PAD8 = 0xF8,
  LF_PAD9 = 0xF9,
  LF_PAD10 = 0xFA,
  LF_PAD11 = 0xFB,
  LF_PAD12 = 0xFC,
  LF_PAD13 = 0xFD,
  LF_PAD14 = 0xFE,
  LF_PAD15 = 0xFF,
};

/* 549 */
enum $DEB5B5BE307D61B7F110344B5463CDC9
{
  wtiSymsNB09 = 0x0,
  wtiSymsNB10 = 0x1,
};

/* 550 */
typedef int IA64_REG_INDEX;

/* 551 */
enum VerDataBlob
{
  vdbOne = 0x1,
  vdbXdataCur = 0x1,
  vdbPdataCur = 0x1,
};

/* 552 */
enum VerLinkInfo
{
  vliOne = 0x1,
  vliTwo = 0x2,
  vliCur = 0x2,
};

/* 553 */
enum CodeViewInfo::BinaryAnnotationOpcode
{
  BA_OP_Invalid = 0x0,
  BA_OP_CodeOffset = 0x1,
  BA_OP_ChangeCodeOffsetBase = 0x2,
  BA_OP_ChangeCodeOffset = 0x3,
  BA_OP_ChangeCodeLength = 0x4,
  BA_OP_ChangeFile = 0x5,
  BA_OP_ChangeLineOffset = 0x6,
  BA_OP_ChangeLineEndDelta = 0x7,
  BA_OP_ChangeRangeKind = 0x8,
  BA_OP_ChangeColumnStart = 0x9,
  BA_OP_ChangeColumnEndDelta = 0xA,
  BA_OP_ChangeCodeOffsetAndLineOffset = 0xB,
  BA_OP_ChangeCodeLengthAndCodeOffset = 0xC,
  BA_OP_ChangeColumnEnd = 0xD,
};

/* 554 */
enum SYM_ENUM_e
{
  S_COMPILE = 0x1,
  S_REGISTER_16t = 0x2,
  S_CONSTANT_16t = 0x3,
  S_UDT_16t = 0x4,
  S_SSEARCH = 0x5,
  S_END = 0x6,
  S_SKIP = 0x7,
  S_CVRESERVE = 0x8,
  S_OBJNAME_ST = 0x9,
  S_ENDARG = 0xA,
  S_COBOLUDT_16t = 0xB,
  S_MANYREG_16t = 0xC,
  S_RETURN = 0xD,
  S_ENTRYTHIS = 0xE,
  S_BPREL16 = 0x100,
  S_LDATA16 = 0x101,
  S_GDATA16 = 0x102,
  S_PUB16 = 0x103,
  S_LPROC16 = 0x104,
  S_GPROC16 = 0x105,
  S_THUNK16 = 0x106,
  S_BLOCK16 = 0x107,
  S_WITH16 = 0x108,
  S_LABEL16 = 0x109,
  S_CEXMODEL16 = 0x10A,
  S_VFTABLE16 = 0x10B,
  S_REGREL16 = 0x10C,
  S_BPREL32_16t = 0x200,
  S_LDATA32_16t = 0x201,
  S_GDATA32_16t = 0x202,
  S_PUB32_16t = 0x203,
  S_LPROC32_16t = 0x204,
  S_GPROC32_16t = 0x205,
  S_THUNK32_ST = 0x206,
  S_BLOCK32_ST = 0x207,
  S_WITH32_ST = 0x208,
  S_LABEL32_ST = 0x209,
  S_CEXMODEL32 = 0x20A,
  S_VFTABLE32_16t = 0x20B,
  S_REGREL32_16t = 0x20C,
  S_LTHREAD32_16t = 0x20D,
  S_GTHREAD32_16t = 0x20E,
  S_SLINK32 = 0x20F,
  S_LPROCMIPS_16t = 0x300,
  S_GPROCMIPS_16t = 0x301,
  S_PROCREF_ST = 0x400,
  S_DATAREF_ST = 0x401,
  S_ALIGN = 0x402,
  S_LPROCREF_ST = 0x403,
  S_OEM = 0x404,
  S_TI16_MAX = 0x1000,
  S_REGISTER_ST = 0x1001,
  S_CONSTANT_ST = 0x1002,
  S_UDT_ST = 0x1003,
  S_COBOLUDT_ST = 0x1004,
  S_MANYREG_ST = 0x1005,
  S_BPREL32_ST = 0x1006,
  S_LDATA32_ST = 0x1007,
  S_GDATA32_ST = 0x1008,
  S_PUB32_ST = 0x1009,
  S_LPROC32_ST = 0x100A,
  S_GPROC32_ST = 0x100B,
  S_VFTABLE32 = 0x100C,
  S_REGREL32_ST = 0x100D,
  S_LTHREAD32_ST = 0x100E,
  S_GTHREAD32_ST = 0x100F,
  S_LPROCMIPS_ST = 0x1010,
  S_GPROCMIPS_ST = 0x1011,
  S_FRAMEPROC = 0x1012,
  S_COMPILE2_ST = 0x1013,
  S_MANYREG2_ST = 0x1014,
  S_LPROCIA64_ST = 0x1015,
  S_GPROCIA64_ST = 0x1016,
  S_LOCALSLOT_ST = 0x1017,
  S_PARAMSLOT_ST = 0x1018,
  S_ANNOTATION = 0x1019,
  S_GMANPROC_ST = 0x101A,
  S_LMANPROC_ST = 0x101B,
  S_RESERVED1 = 0x101C,
  S_RESERVED2 = 0x101D,
  S_RESERVED3 = 0x101E,
  S_RESERVED4 = 0x101F,
  S_LMANDATA_ST = 0x1020,
  S_GMANDATA_ST = 0x1021,
  S_MANFRAMEREL_ST = 0x1022,
  S_MANREGISTER_ST = 0x1023,
  S_MANSLOT_ST = 0x1024,
  S_MANMANYREG_ST = 0x1025,
  S_MANREGREL_ST = 0x1026,
  S_MANMANYREG2_ST = 0x1027,
  S_MANTYPREF = 0x1028,
  S_UNAMESPACE_ST = 0x1029,
  S_ST_MAX = 0x1100,
  S_OBJNAME = 0x1101,
  S_THUNK32 = 0x1102,
  S_BLOCK32 = 0x1103,
  S_WITH32 = 0x1104,
  S_LABEL32 = 0x1105,
  S_REGISTER = 0x1106,
  S_CONSTANT = 0x1107,
  S_UDT = 0x1108,
  S_COBOLUDT = 0x1109,
  S_MANYREG = 0x110A,
  S_BPREL32 = 0x110B,
  S_LDATA32 = 0x110C,
  S_GDATA32 = 0x110D,
  S_PUB32 = 0x110E,
  S_LPROC32 = 0x110F,
  S_GPROC32 = 0x1110,
  S_REGREL32 = 0x1111,
  S_LTHREAD32 = 0x1112,
  S_GTHREAD32 = 0x1113,
  S_LPROCMIPS = 0x1114,
  S_GPROCMIPS = 0x1115,
  S_COMPILE2 = 0x1116,
  S_MANYREG2 = 0x1117,
  S_LPROCIA64 = 0x1118,
  S_GPROCIA64 = 0x1119,
  S_LOCALSLOT = 0x111A,
  S_SLOT = 0x111A,
  S_PARAMSLOT = 0x111B,
  S_LMANDATA = 0x111C,
  S_GMANDATA = 0x111D,
  S_MANFRAMEREL = 0x111E,
  S_MANREGISTER = 0x111F,
  S_MANSLOT = 0x1120,
  S_MANMANYREG = 0x1121,
  S_MANREGREL = 0x1122,
  S_MANMANYREG2 = 0x1123,
  S_UNAMESPACE = 0x1124,
  S_PROCREF = 0x1125,
  S_DATAREF = 0x1126,
  S_LPROCREF = 0x1127,
  S_ANNOTATIONREF = 0x1128,
  S_TOKENREF = 0x1129,
  S_GMANPROC = 0x112A,
  S_LMANPROC = 0x112B,
  S_TRAMPOLINE = 0x112C,
  S_MANCONSTANT = 0x112D,
  S_ATTR_FRAMEREL = 0x112E,
  S_ATTR_REGISTER = 0x112F,
  S_ATTR_REGREL = 0x1130,
  S_ATTR_MANYREG = 0x1131,
  S_SEPCODE = 0x1132,
  S_LOCAL_2005 = 0x1133,
  S_DEFRANGE_2005 = 0x1134,
  S_DEFRANGE2_2005 = 0x1135,
  S_SECTION = 0x1136,
  S_COFFGROUP = 0x1137,
  S_EXPORT = 0x1138,
  S_CALLSITEINFO = 0x1139,
  S_FRAMECOOKIE = 0x113A,
  S_DISCARDED = 0x113B,
  S_COMPILE3 = 0x113C,
  S_ENVBLOCK = 0x113D,
  S_LOCAL = 0x113E,
  S_DEFRANGE = 0x113F,
  S_DEFRANGE_SUBFIELD = 0x1140,
  S_DEFRANGE_REGISTER = 0x1141,
  S_DEFRANGE_FRAMEPOINTER_REL = 0x1142,
  S_DEFRANGE_SUBFIELD_REGISTER = 0x1143,
  S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE = 0x1144,
  S_DEFRANGE_REGISTER_REL = 0x1145,
  S_LPROC32_ID = 0x1146,
  S_GPROC32_ID = 0x1147,
  S_LPROCMIPS_ID = 0x1148,
  S_GPROCMIPS_ID = 0x1149,
  S_LPROCIA64_ID = 0x114A,
  S_GPROCIA64_ID = 0x114B,
  S_BUILDINFO = 0x114C,
  S_INLINESITE = 0x114D,
  S_INLINESITE_END = 0x114E,
  S_PROC_ID_END = 0x114F,
  S_DEFRANGE_HLSL = 0x1150,
  S_GDATA_HLSL = 0x1151,
  S_LDATA_HLSL = 0x1152,
  S_FILESTATIC = 0x1153,
  S_LOCAL_DPC_GROUPSHARED = 0x1154,
  S_LPROC32_DPC = 0x1155,
  S_LPROC32_DPC_ID = 0x1156,
  S_DEFRANGE_DPC_PTR_TAG = 0x1157,
  S_DPC_SYM_TAG_MAP = 0x1158,
  S_ARMSWITCHTABLE = 0x1159,
  S_CALLEES = 0x115A,
  S_CALLERS = 0x115B,
  S_POGODATA = 0x115C,
  S_INLINESITE2 = 0x115D,
  S_HEAPALLOCSITE = 0x115E,
  S_MOD_TYPEREF = 0x115F,
  S_REF_MINIPDB = 0x1160,
  S_PDBMAP = 0x1161,
  S_GDATA_HLSL32 = 0x1162,
  S_LDATA_HLSL32 = 0x1163,
  S_GDATA_HLSL32_EX = 0x1164,
  S_LDATA_HLSL32_EX = 0x1165,
  S_RECTYPE_MAX = 0x1166,
  S_RECTYPE_LAST = 0x1165,
  S_RECTYPE_PAD = 0x1266,
};

/* 555 */
enum CV_CPU_TYPE_e
{
  CV_CFL_8080 = 0x0,
  CV_CFL_8086 = 0x1,
  CV_CFL_80286 = 0x2,
  CV_CFL_80386 = 0x3,
  CV_CFL_80486 = 0x4,
  CV_CFL_PENTIUM = 0x5,
  CV_CFL_PENTIUMII = 0x6,
  CV_CFL_PENTIUMPRO = 0x6,
  CV_CFL_PENTIUMIII = 0x7,
  CV_CFL_MIPS = 0x10,
  CV_CFL_MIPSR4000 = 0x10,
  CV_CFL_MIPS16 = 0x11,
  CV_CFL_MIPS32 = 0x12,
  CV_CFL_MIPS64 = 0x13,
  CV_CFL_MIPSI = 0x14,
  CV_CFL_MIPSII = 0x15,
  CV_CFL_MIPSIII = 0x16,
  CV_CFL_MIPSIV = 0x17,
  CV_CFL_MIPSV = 0x18,
  CV_CFL_M68000 = 0x20,
  CV_CFL_M68010 = 0x21,
  CV_CFL_M68020 = 0x22,
  CV_CFL_M68030 = 0x23,
  CV_CFL_M68040 = 0x24,
  CV_CFL_ALPHA = 0x30,
  CV_CFL_ALPHA_21064 = 0x30,
  CV_CFL_ALPHA_21164 = 0x31,
  CV_CFL_ALPHA_21164A = 0x32,
  CV_CFL_ALPHA_21264 = 0x33,
  CV_CFL_ALPHA_21364 = 0x34,
  CV_CFL_PPC601 = 0x40,
  CV_CFL_PPC603 = 0x41,
  CV_CFL_PPC604 = 0x42,
  CV_CFL_PPC620 = 0x43,
  CV_CFL_PPCFP = 0x44,
  CV_CFL_PPCBE = 0x45,
  CV_CFL_SH3 = 0x50,
  CV_CFL_SH3E = 0x51,
  CV_CFL_SH3DSP = 0x52,
  CV_CFL_SH4 = 0x53,
  CV_CFL_SHMEDIA = 0x54,
  CV_CFL_ARM3 = 0x60,
  CV_CFL_ARM4 = 0x61,
  CV_CFL_ARM4T = 0x62,
  CV_CFL_ARM5 = 0x63,
  CV_CFL_ARM5T = 0x64,
  CV_CFL_ARM6 = 0x65,
  CV_CFL_ARM_XMAC = 0x66,
  CV_CFL_ARM_WMMX = 0x67,
  CV_CFL_ARM7 = 0x68,
  CV_CFL_OMNI = 0x70,
  CV_CFL_IA64 = 0x80,
  CV_CFL_IA64_1 = 0x80,
  CV_CFL_IA64_2 = 0x81,
  CV_CFL_CEE = 0x90,
  CV_CFL_AM33 = 0xA0,
  CV_CFL_M32R = 0xB0,
  CV_CFL_TRICORE = 0xC0,
  CV_CFL_X64 = 0xD0,
  CV_CFL_AMD64 = 0xD0,
  CV_CFL_EBC = 0xE0,
  CV_CFL_THUMB = 0xF0,
  CV_CFL_ARMNT = 0xF4,
  CV_CFL_ARM64 = 0xF6,
  CV_CFL_D3D11_SHADER = 0x100,
};

/* 556 */
enum CV_armswitchtype
{
  CV_SWT_INT1 = 0x0,
  CV_SWT_UINT1 = 0x1,
  CV_SWT_INT2 = 0x2,
  CV_SWT_UINT2 = 0x3,
  CV_SWT_INT4 = 0x4,
  CV_SWT_UINT4 = 0x5,
  CV_SWT_POINTER = 0x6,
  CV_SWT_UINT1SHL1 = 0x7,
  CV_SWT_UINT2SHL1 = 0x8,
  CV_SWT_INT1SHL1 = 0x9,
  CV_SWT_INT2SHL1 = 0xA,
  CV_SWT_TBB = 0x7,
  CV_SWT_TBH = 0x8,
};

/* 557 */
enum PDBINTV
{
  PDBIntv110 = 0x1329141,
  PDBIntv80 = 0x131A5B5,
  PDBIntv70 = 0x131314E,
  PDBIntv70Dep = 0x1312E96,
  PDBIntv69 = 0x13107EF,
  PDBIntv61 = 0x130E272,
  PDBIntv50a = 0x130B844,
  PDBIntv60 = 0x130B844,
  PDBIntv50 = 0x13092B6,
  PDBIntv41 = 0xE0D5C,
  PDBIntv = 0x1329141,
};

/* 558 */
enum PDBIMPV
{
  PDBImpvVC2 = 0x13048EA,
  PDBImpvVC4 = 0x1306C1F,
  PDBImpvVC41 = 0x1306CDE,
  PDBImpvVC50 = 0x13091F3,
  PDBImpvVC98 = 0x130BA2C,
  PDBImpvVC70 = 0x1312E94,
  PDBImpvVC70Dep = 0x131084C,
  PDBImpvVC80 = 0x131A5B5,
  PDBImpvVC110 = 0x1329141,
  PDBImpvVC140 = 0x13351DC,
  PDBImpv = 0x1329141,
};

/* 559 */
enum PDBConsts
{
  niNil = 0x0,
  PDB_MAX_PATH = 0x104,
  cbErrMax = 0x400,
};

/* 560 */
enum PDBErrors
{
  EC_OK = 0x0,
  EC_USAGE = 0x1,
  EC_OUT_OF_MEMORY = 0x2,
  EC_FILE_SYSTEM = 0x3,
  EC_NOT_FOUND = 0x4,
  EC_INVALID_SIG = 0x5,
  EC_INVALID_AGE = 0x6,
  EC_PRECOMP_REQUIRED = 0x7,
  EC_OUT_OF_TI = 0x8,
  EC_NOT_IMPLEMENTED = 0x9,
  EC_V1_PDB = 0xA,
  EC_UNKNOWN_FORMAT = 0xA,
  EC_FORMAT = 0xB,
  EC_LIMIT = 0xC,
  EC_CORRUPT = 0xD,
  EC_TI16 = 0xE,
  EC_ACCESS_DENIED = 0xF,
  EC_ILLEGAL_TYPE_EDIT = 0x10,
  EC_INVALID_EXECUTABLE = 0x11,
  EC_DBG_NOT_FOUND = 0x12,
  EC_NO_DEBUG_INFO = 0x13,
  EC_INVALID_EXE_TIMESTAMP = 0x14,
  EC_CORRUPT_TYPEPOOL = 0x15,
  EC_DEBUG_INFO_NOT_IN_PDB = 0x16,
  EC_RPC = 0x17,
  EC_UNKNOWN = 0x18,
  EC_BAD_CACHE_PATH = 0x19,
  EC_CACHE_FULL = 0x1A,
  EC_TOO_MANY_MOD_ADDTYPE = 0x1B,
  EC_MINI_PDB = 0x1C,
  EC_MAX = 0x1D,
};

/* 561 */
enum CV_BuildInfo_e
{
  CV_BuildInfo_CurrentDirectory = 0x0,
  CV_BuildInfo_BuildTool = 0x1,
  CV_BuildInfo_SourceFile = 0x2,
  CV_BuildInfo_ProgramDatabaseFile = 0x3,
  CV_BuildInfo_CommandArguments = 0x4,
  CV_BUILDINFO_KNOWN = 0x5,
};

/* 562 */
enum POVC
{
  povcNotifyDebugDir = 0x0,
  povcNotifyOpenDBG = 0x1,
  povcNotifyOpenPDB = 0x2,
  povcReserved = 0x3,
  povcReadExecutableAt = 0x4,
  povcReadExecutableAtRVA = 0x5,
  povcRestrictRegistry = 0x6,
  povcRestrictSymsrv = 0x7,
  povcRestrictSystemRoot = 0x8,
  povcNotifyMiscPath = 0x9,
  povcReadMiscDebugData = 0xA,
  povcReadCodeViewDebugData = 0xB,
  povcRestrictOriginalPath = 0xC,
  povcRestrictReferencePath = 0xD,
  povcRestrictDBG = 0xE,
};

/* 563 */
enum $CE6596862686D9A9689A72870FF2DFF8
{
  intv = 0x1329141,
};

/* 564 */
typedef $CE6596862686D9A9689A72870FF2DFF8 $913E58BF5C00DFE8E3FDA2B7E0280E74;

/* 565 */
enum DOVC
{
  dovcNotePdbUsed = 0x0,
  dovcNoteTypeMismatch = 0x1,
  dovcTmdTypeFilter = 0x2,
};

/* 566 */
enum DBGTYPE
{
  dbgtypeFPO = 0x0,
  dbgtypeException = 0x1,
  dbgtypeFixup = 0x2,
  dbgtypeOmapToSrc = 0x3,
  dbgtypeOmapFromSrc = 0x4,
  dbgtypeSectionHdr = 0x5,
  dbgtypeTokenRidMap = 0x6,
  dbgtypeXdata = 0x7,
  dbgtypePdata = 0x8,
  dbgtypeNewFPO = 0x9,
  dbgtypeSectionHdrOrig = 0xA,
  dbgtypeMax = 0xB,
};

/* 567 */
enum PCC
{
  pccFilterPublics = 0x0,
  pccFilterAnnotations = 0x1,
  pccFilterStreamNames = 0x2,
  pccFilterCustomModSyms = 0x3,
  pccFilterModTypes = 0x4,
  pccFilterPdbMappings = 0x5,
  pccReportMissingPDB = 0x6,
  pccReportProgress = 0x7,
};

/* 568 */
enum wrapEncodedKERNEL32Functions
{
  eFlsAlloc = 0x0,
  eFlsFree = 0x1,
  eFlsGetValue = 0x2,
  eFlsSetValue = 0x3,
  eInitializeCriticalSectionEx = 0x4,
  eInitOnceExecuteOnce = 0x5,
  eCreateEventExW = 0x6,
  eCreateSemaphoreW = 0x7,
  eCreateSemaphoreExW = 0x8,
  eCreateThreadpoolTimer = 0x9,
  eSetThreadpoolTimer = 0xA,
  eWaitForThreadpoolTimerCallbacks = 0xB,
  eCloseThreadpoolTimer = 0xC,
  eCreateThreadpoolWait = 0xD,
  eSetThreadpoolWait = 0xE,
  eCloseThreadpoolWait = 0xF,
  eFlushProcessWriteBuffers = 0x10,
  eFreeLibraryWhenCallbackReturns = 0x11,
  eGetCurrentProcessorNumber = 0x12,
  eCreateSymbolicLinkW = 0x13,
  eGetCurrentPackageId = 0x14,
  eGetTickCount64 = 0x15,
  eGetFileInformationByHandleEx = 0x16,
  eSetFileInformationByHandle = 0x17,
  eGetSystemTimePreciseAsFileTime = 0x18,
  eInitializeConditionVariable = 0x19,
  eWakeConditionVariable = 0x1A,
  eWakeAllConditionVariable = 0x1B,
  eSleepConditionVariableCS = 0x1C,
  eInitializeSRWLock = 0x1D,
  eAcquireSRWLockExclusive = 0x1E,
  eTryAcquireSRWLockExclusive = 0x1F,
  eReleaseSRWLockExclusive = 0x20,
  eSleepConditionVariableSRW = 0x21,
  eCreateThreadpoolWork = 0x22,
  eSubmitThreadpoolWork = 0x23,
  eCloseThreadpoolWork = 0x24,
  eCompareStringEx = 0x25,
  eGetLocaleInfoEx = 0x26,
  eLCMapStringEx = 0x27,
  eMaxKernel32Function = 0x28,
};

/* 573 */
typedef $0FC989869F227A36D749990E523E5F04 POWER_ACTION;

/* 574 */
typedef IA64_REG_INDEX CV_HREG_e;

/* 575 */
struct $983F061E0B702DD8AE0B4B955735A6A3
{
  unsigned int Lo;
  int Hi;
};

/* 576 */
union tagCY
{
  tagCY::$983F061E0B702DD8AE0B4B955735A6A3 __s0;
  __int64 int64;
};

/* 577 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  char Data4[8];
};

/* 578 */
struct __cppobj IUnknown
{
  IUnknownVtbl *vfptr;
};

/* 579 */
struct IUnknownVtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
};

/* 580 */
struct __cppobj IDispatch : IUnknown
{
};

/* 581 */
struct tagSAFEARRAYBOUND
{
  unsigned int cElements;
  int lLbound;
};

/* 582 */
struct tagSAFEARRAY
{
  unsigned __int16 cDims;
  unsigned __int16 fFeatures;
  unsigned int cbElements;
  unsigned int cLocks;
  void *pvData;
  tagSAFEARRAYBOUND rgsabound[1];
};

/* 583 */
struct $E2F13C0D8C7A5E44CBEA2DDC2BADB614
{
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  __int64 llVal;
};

/* 584 */
struct $5CC4D6FD2BF4E5B80FE1FD714DCA0CFA
{
  char scale;
  char sign;
};

/* 585 */
union $1485DE0EF8807A9865446C88688BD59B
{
  $5CC4D6FD2BF4E5B80FE1FD714DCA0CFA __s0;
  unsigned __int16 signscale;
};

/* 586 */
struct $A04CD8C0331024E133CCEC4B0AB36956
{
  unsigned int Lo32;
  unsigned int Mid32;
};

/* 587 */
union $AA657128B7094477907559EEE5CE7DF7
{
  $A04CD8C0331024E133CCEC4B0AB36956 __s0;
  unsigned __int64 Lo64;
};

/* 588 */
struct tagDEC
{
  unsigned __int16 wReserved;
  $1485DE0EF8807A9865446C88688BD59B ___u1;
  unsigned int Hi32;
  $AA657128B7094477907559EEE5CE7DF7 ___u3;
};

/* 589 */
struct $594A44AA32997B5E0CD7BAB36AE7FFA3
{
  _BYTE gap0[8];
  int lVal;
  IRecordInfo *pRecInfo;
};

/* 634 */
struct __cppobj IRecordInfo : IUnknown
{
};

/* 590 */
struct $F28A51B4B40B0D33C72915D739D42B4B
{
  _BYTE gap0[8];
  char bVal;
};

/* 591 */
struct $31126B8528A05AF3606C6D495FD178E8
{
  _BYTE gap0[8];
  __int16 iVal;
};

/* 592 */
struct $50230A970D9734D4E9774CFC619DF0F6
{
  _BYTE gap0[8];
  float fltVal;
};

/* 593 */
struct $4C0EC2258454B893CE739DAE89D8DB7B
{
  _BYTE gap0[8];
  long double dblVal;
};

/* 594 */
struct $6DB36323059316E675433BB10D285009
{
  _BYTE gap0[8];
  __int16 boolVal;
};

/* 595 */
struct $8E3C8731874D1B3BC66617C4DD3163A6
{
  _BYTE gap0[8];
  int scode;
};

/* 596 */
struct $F45985FE772BFBDBFBC7877C6B603E69
{
  _BYTE gap0[8];
  tagCY cyVal;
};

/* 597 */
struct $E94952165EEA9EEA990FEB33603E1B19
{
  _BYTE gap0[8];
  long double date;
};

/* 598 */
struct $7B1C2AA558A72DB3909F7F0B6C8C78B2
{
  _BYTE gap0[8];
  wchar_t *bstrVal;
};

/* 599 */
struct $A10816552800D2A514B7976995B9F9B9
{
  _BYTE gap0[8];
  IUnknown *punkVal;
};

/* 600 */
struct $B89F6A7E94F0927D54170392522A1415
{
  _BYTE gap0[8];
  IDispatch *pdispVal;
};

/* 601 */
struct $140129CB058BA7EFBC2D411C30CFBD34
{
  _BYTE gap0[8];
  tagSAFEARRAY *parray;
};

/* 602 */
struct $166B1F81F6EA96F97683A65F38FB1A59
{
  _BYTE gap0[8];
  char *pbVal;
};

/* 603 */
struct $76732A64405C0E287FCB302687644550
{
  _BYTE gap0[8];
  __int16 *piVal;
};

/* 604 */
struct $E5FC128E66C26C95254032BA69D36E74
{
  _BYTE gap0[8];
  int *plVal;
};

/* 605 */
struct $E9CDCC48CD0BB58E8F361AA17BFDA76E
{
  _BYTE gap0[8];
  __int64 *pllVal;
};

/* 606 */
struct $BF8CC88CDF129BD6E4FA4ABA13F521AD
{
  _BYTE gap0[8];
  float *pfltVal;
};

/* 607 */
struct $2CABE618CF1C2625A4479554E4967E0A
{
  _BYTE gap0[8];
  long double *pdblVal;
};

/* 608 */
struct $AAA92DA1D6E1B0E8462F69216B62027C
{
  _BYTE gap0[8];
  __int16 *pboolVal;
};

/* 609 */
struct $F7167AE7A8ABA03C094C204FB1564A28
{
  _BYTE gap0[8];
  int *pscode;
};

/* 610 */
struct $7D7BD2B619E72DC6D1FB5F720E366D97
{
  _BYTE gap0[8];
  tagCY *pcyVal;
};

/* 611 */
struct $6857AE69DB7C952EEFD665431A7B503A
{
  _BYTE gap0[8];
  long double *pdate;
};

/* 612 */
struct $BE56ADCB97A5F80C4E840DC3FCEE04D4
{
  _BYTE gap0[8];
  wchar_t **pbstrVal;
};

/* 613 */
struct $4DB26F3641711EA188EB1A6C00F8DC76
{
  _BYTE gap0[8];
  IUnknown **ppunkVal;
};

/* 614 */
struct $04E306AB19BDBE2C9512AD8D1500A2CA
{
  _BYTE gap0[8];
  IDispatch **ppdispVal;
};

/* 615 */
struct $CE51A97B3FE1677A2C99841D5D15FD26
{
  _BYTE gap0[8];
  tagSAFEARRAY **pparray;
};

/* 616 */
struct $FCFC33D3CB930EBB1586A1FF204B1FCA
{
  _BYTE gap0[8];
  tagVARIANT *pvarVal;
};

/* 617 */
struct $6C39A09D97B880131B2C5BB4943CBB45
{
  _BYTE gap0[8];
  void *byref;
};

/* 618 */
struct $E898A5260D8380431CCAA47FCC291563
{
  _BYTE gap0[8];
  char cVal;
};

/* 619 */
struct $48802A31D3D0701BC13CEF9CEA041E7B
{
  _BYTE gap0[8];
  unsigned __int16 uiVal;
};

/* 620 */
struct $B644145F46FF1F932B106BFA6CC3F6D9
{
  _BYTE gap0[8];
  unsigned int ulVal;
};

/* 621 */
struct $EA00B0D50EAA1933F67C45009B664198
{
  _BYTE gap0[8];
  unsigned __int64 ullVal;
};

/* 622 */
struct $5CA90CF57237397281FB12BFD52C1905
{
  _BYTE gap0[8];
  int intVal;
};

/* 623 */
struct $E7F48E2F4EAA3149E57D87E5D1B2C6B8
{
  _BYTE gap0[8];
  unsigned int uintVal;
};

/* 624 */
struct $6169F49F66A275BDAF126872559B48EF
{
  _BYTE gap0[8];
  tagDEC *pdecVal;
};

/* 625 */
struct $E1D71D20C3D01115E20D79FAE9629CE8
{
  _BYTE gap0[8];
  char *pcVal;
};

/* 626 */
struct $5669F5A4AD19EF2CB42A5602080CB0A6
{
  _BYTE gap0[8];
  unsigned __int16 *puiVal;
};

/* 627 */
struct $886F8AE9D7C8B1B861B6CA58D67B682A
{
  _BYTE gap0[8];
  unsigned int *pulVal;
};

/* 628 */
struct $ADBB94A21537A8461C6168A5B871A740
{
  _BYTE gap0[8];
  unsigned __int64 *pullVal;
};

/* 629 */
struct $CDA73A427DD2A30CDA26CA3394C33CF0
{
  _BYTE gap0[8];
  int *pintVal;
};

/* 630 */
struct $2516E53E690D8CC5659AAB7EDC49E664
{
  _BYTE gap0[8];
  unsigned int *puintVal;
};

/* 631 */
struct $17B4421FDC73B39569D8A12F584CB67F
{
  _BYTE gap0[8];
  void *pvRecord;
};

/* 632 */
union $2E2286526614D8FF96454370D7C4F60B
{
  $E2F13C0D8C7A5E44CBEA2DDC2BADB614 __s0;
  tagDEC decVal;
  $594A44AA32997B5E0CD7BAB36AE7FFA3 __s2;
  $F28A51B4B40B0D33C72915D739D42B4B __s3;
  $31126B8528A05AF3606C6D495FD178E8 __s4;
  $50230A970D9734D4E9774CFC619DF0F6 __s5;
  $4C0EC2258454B893CE739DAE89D8DB7B __s6;
  $6DB36323059316E675433BB10D285009 __s7;
  $8E3C8731874D1B3BC66617C4DD3163A6 __s8;
  $F45985FE772BFBDBFBC7877C6B603E69 __s9;
  $E94952165EEA9EEA990FEB33603E1B19 __s10;
  $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s11;
  $A10816552800D2A514B7976995B9F9B9 __s12;
  $B89F6A7E94F0927D54170392522A1415 __s13;
  $140129CB058BA7EFBC2D411C30CFBD34 __s14;
  $166B1F81F6EA96F97683A65F38FB1A59 __s15;
  $76732A64405C0E287FCB302687644550 __s16;
  $E5FC128E66C26C95254032BA69D36E74 __s17;
  $E9CDCC48CD0BB58E8F361AA17BFDA76E __s18;
  $BF8CC88CDF129BD6E4FA4ABA13F521AD __s19;
  $2CABE618CF1C2625A4479554E4967E0A __s20;
  $AAA92DA1D6E1B0E8462F69216B62027C __s21;
  $F7167AE7A8ABA03C094C204FB1564A28 __s22;
  $7D7BD2B619E72DC6D1FB5F720E366D97 __s23;
  $6857AE69DB7C952EEFD665431A7B503A __s24;
  $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s25;
  $4DB26F3641711EA188EB1A6C00F8DC76 __s26;
  $04E306AB19BDBE2C9512AD8D1500A2CA __s27;
  $CE51A97B3FE1677A2C99841D5D15FD26 __s28;
  $FCFC33D3CB930EBB1586A1FF204B1FCA __s29;
  $6C39A09D97B880131B2C5BB4943CBB45 __s30;
  $E898A5260D8380431CCAA47FCC291563 __s31;
  $48802A31D3D0701BC13CEF9CEA041E7B __s32;
  $B644145F46FF1F932B106BFA6CC3F6D9 __s33;
  $EA00B0D50EAA1933F67C45009B664198 __s34;
  $5CA90CF57237397281FB12BFD52C1905 __s35;
  $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s36;
  $6169F49F66A275BDAF126872559B48EF __s37;
  $E1D71D20C3D01115E20D79FAE9629CE8 __s38;
  $5669F5A4AD19EF2CB42A5602080CB0A6 __s39;
  $886F8AE9D7C8B1B861B6CA58D67B682A __s40;
  $ADBB94A21537A8461C6168A5B871A740 __s41;
  $CDA73A427DD2A30CDA26CA3394C33CF0 __s42;
  $2516E53E690D8CC5659AAB7EDC49E664 __s43;
  $17B4421FDC73B39569D8A12F584CB67F __s44;
};

/* 633 */
struct tagVARIANT
{
  $2E2286526614D8FF96454370D7C4F60B ___u0;
};

/* 635 */
struct tagPARAMDESCEX
{
  unsigned int cBytes;
  tagVARIANT varDefaultValue;
};

/* 636 */
struct __attribute__((aligned(4))) tagPARAMDESC
{
  tagPARAMDESCEX *pparamdescex;
  unsigned __int16 wParamFlags;
};

/* 637 */
union $192C0446B9C02F5E98B593E7BA6AE64F
{
  tagTYPEDESC *lptdesc;
  tagARRAYDESC *lpadesc;
  unsigned int hreftype;
};

/* 638 */
struct __attribute__((aligned(4))) tagTYPEDESC
{
  $192C0446B9C02F5E98B593E7BA6AE64F ___u0;
  unsigned __int16 vt;
};

/* 639 */
struct __attribute__((packed)) __attribute__((aligned(4))) tagARRAYDESC
{
  tagTYPEDESC tdescElem;
  unsigned __int16 cDims;
  __attribute__((aligned(4))) tagSAFEARRAYBOUND rgbounds[1];
};

/* 640 */
struct __attribute__((aligned(4))) tagIDLDESC
{
  unsigned int dwReserved;
  unsigned __int16 wIDLFlags;
};

/* 641 */
union $69FC5A25D4C600D1ED52B99CAFA5AC3B
{
  tagIDLDESC idldesc;
  tagPARAMDESC paramdesc;
};

/* 642 */
struct tagELEMDESC
{
  tagTYPEDESC tdesc;
  $69FC5A25D4C600D1ED52B99CAFA5AC3B ___u1;
};

/* 643 */
struct __attribute__((aligned(4))) tagFUNCDESC
{
  int memid;
  int *lprgscode;
  tagELEMDESC *lprgelemdescParam;
  tagFUNCKIND funckind;
  tagINVOKEKIND invkind;
  tagCALLCONV callconv;
  __int16 cParams;
  __int16 cParamsOpt;
  __int16 oVft;
  __int16 cScodes;
  tagELEMDESC elemdescFunc;
  unsigned __int16 wFuncFlags;
};

/* 644 */
union $599D56BE353A9EFB82919C47579A3EAD
{
  unsigned int oInst;
  tagVARIANT *lpvarValue;
};

/* 645 */
struct tagVARDESC
{
  int memid;
  wchar_t *lpstrSchema;
  $599D56BE353A9EFB82919C47579A3EAD ___u2;
  tagELEMDESC elemdescVar;
  unsigned __int16 wVarFlags;
  tagVARKIND varkind;
};

/* 646 */
struct __cppobj ITypeComp : IUnknown
{
};

/* 647 */
union tagBINDPTR
{
  tagFUNCDESC *lpfuncdesc;
  tagVARDESC *lpvardesc;
  ITypeComp *lptcomp;
};

/* 648 */
struct __attribute__((aligned(4))) tagTLIBATTR
{
  _GUID guid;
  unsigned int lcid;
  tagSYSKIND syskind;
  unsigned __int16 wMajorVerNum;
  unsigned __int16 wMinorVerNum;
  unsigned __int16 wLibFlags;
};

/* 649 */
struct $B950AFB169DC87688B328897744C612F
{
  unsigned int LowPart;
  unsigned int HighPart;
};

/* 650 */
union _ULARGE_INTEGER
{
  $B950AFB169DC87688B328897744C612F __s0;
  $B950AFB169DC87688B328897744C612F u;
  unsigned __int64 QuadPart;
};

/* 651 */
struct tagSTATSTG
{
  wchar_t *pwcsName;
  unsigned int type;
  _ULARGE_INTEGER cbSize;
  _FILETIME mtime;
  _FILETIME ctime;
  _FILETIME atime;
  unsigned int grfMode;
  unsigned int grfLocksSupported;
  _GUID clsid;
  unsigned int grfStateBits;
  unsigned int reserved;
};

/* 652 */
struct __cppobj IEnumSTATSTG : IUnknown
{
};

/* 653 */
struct __cppobj ITypeInfo : IUnknown
{
};

/* 654 */
struct tagEXCEPINFO
{
  unsigned __int16 wCode;
  unsigned __int16 wReserved;
  wchar_t *bstrSource;
  wchar_t *bstrDescription;
  wchar_t *bstrHelpFile;
  unsigned int dwHelpContext;
  void *pvReserved;
  HRESULT (__stdcall *pfnDeferredFillIn)(tagEXCEPINFO *);
  int scode;
};

/* 655 */
struct tagCAUL
{
  unsigned int cElems;
  unsigned int *pElems;
};

/* 656 */
struct tagCABSTR
{
  unsigned int cElems;
  wchar_t **pElems;
};

/* 657 */
struct __cppobj ISequentialStream : IUnknown
{
};

/* 658 */
struct tagBSTRBLOB
{
  unsigned int cbSize;
  char *pData;
};

/* 659 */
struct tagTYPEATTR
{
  _GUID guid;
  unsigned int lcid;
  unsigned int dwReserved;
  int memidConstructor;
  int memidDestructor;
  wchar_t *lpstrSchema;
  unsigned int cbSizeInstance;
  tagTYPEKIND typekind;
  unsigned __int16 cFuncs;
  unsigned __int16 cVars;
  unsigned __int16 cImplTypes;
  unsigned __int16 cbSizeVft;
  unsigned __int16 cbAlignment;
  unsigned __int16 wTypeFlags;
  unsigned __int16 wMajorVerNum;
  unsigned __int16 wMinorVerNum;
  tagTYPEDESC tdescAlias;
  tagIDLDESC idldescType;
};

/* 660 */
struct __cppobj __attribute__((aligned(4))) __vc_attributes::event_sourceAttribute
{
  __vc_attributes::event_sourceAttribute::type_e type;
  __vc_attributes::event_sourceAttribute::optimize_e optimize;
  bool decorate;
};

/* 661 */
struct __cppobj __vc_attributes::helper_attributes::v1_alttypeAttribute
{
  __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
};

/* 662 */
struct __cppobj __vc_attributes::helper_attributes::usageAttribute
{
  unsigned int value;
};

/* 663 */
struct __cppobj __vc_attributes::threadingAttribute
{
  __vc_attributes::threadingAttribute::threading_e value;
};

/* 664 */
struct __cppobj __vc_attributes::aggregatableAttribute
{
  __vc_attributes::aggregatableAttribute::type_e type;
};

/* 665 */
struct __cppobj __attribute__((aligned(4))) __vc_attributes::event_receiverAttribute
{
  __vc_attributes::event_receiverAttribute::type_e type;
  bool layout_dependent;
};

/* 666 */
struct __cppobj __vc_attributes::moduleAttribute
{
  __vc_attributes::moduleAttribute::type_e type;
  const char *name;
  const char *version;
  const char *uuid;
  int lcid;
  bool control;
  const char *helpstring;
  int helpstringcontext;
  const char *helpstringdll;
  const char *helpfile;
  int helpcontext;
  bool hidden;
  bool restricted;
  const char *custom;
  const char *resource_name;
};

/* 667 */
struct tagCADBL
{
  unsigned int cElems;
  long double *pElems;
};

/* 668 */
struct tagCALPSTR
{
  unsigned int cElems;
  char **pElems;
};

/* 669 */
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

/* 670 */
struct tagCLIPDATA
{
  unsigned int cbSize;
  int ulClipFmt;
  char *pClipData;
};

/* 671 */
struct tagCACLIPDATA
{
  unsigned int cElems;
  tagCLIPDATA *pElems;
};

/* 672 */
struct tagCAFILETIME
{
  unsigned int cElems;
  _FILETIME *pElems;
};

/* 673 */
struct tagCALPWSTR
{
  unsigned int cElems;
  wchar_t **pElems;
};

/* 674 */
struct tagCAL
{
  unsigned int cElems;
  int *pElems;
};

/* 675 */
struct tagCABSTRBLOB
{
  unsigned int cElems;
  tagBSTRBLOB *pElems;
};

/* 676 */
struct binder_ref_death
{
  binder_work work;
  void *cookie;
};

/* 677 */
struct tagCAFLT
{
  unsigned int cElems;
  float *pElems;
};

/* 678 */
struct tagCAH
{
  unsigned int cElems;
  _LARGE_INTEGER *pElems;
};

/* 679 */
struct tagCAUI
{
  unsigned int cElems;
  unsigned __int16 *pElems;
};

/* 680 */
struct tagCAUH
{
  unsigned int cElems;
  _ULARGE_INTEGER *pElems;
};

/* 681 */
struct tagCADATE
{
  unsigned int cElems;
  long double *pElems;
};

/* 682 */
struct tagBLOB
{
  unsigned int cbSize;
  char *pBlobData;
};

/* 683 */
struct __cppobj IStream : ISequentialStream
{
};

/* 684 */
struct __cppobj IStorage : IUnknown
{
};

/* 685 */
struct tagVersionedStream
{
  _GUID guidVersion;
  IStream *pStream;
};

/* 686 */
struct tagCAC
{
  unsigned int cElems;
  char *pElems;
};

/* 687 */
struct tagCAUB
{
  unsigned int cElems;
  char *pElems;
};

/* 688 */
struct tagCAI
{
  unsigned int cElems;
  __int16 *pElems;
};

/* 689 */
struct tagCABOOL
{
  unsigned int cElems;
  __int16 *pElems;
};

/* 690 */
struct tagCASCODE
{
  unsigned int cElems;
  int *pElems;
};

/* 691 */
struct tagCACY
{
  unsigned int cElems;
  tagCY *pElems;
};

/* 692 */
struct tagCACLSID
{
  unsigned int cElems;
  _GUID *pElems;
};

/* 693 */
struct __attribute__((packed)) __attribute__((aligned(1))) $5DF3780F58367B9F2537DF425A8A812E
{
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  char cVal;
};

/* 694 */
struct $6D336DA143C556260FF80C12817B08DB
{
  _BYTE gap0[8];
  int lVal;
};

/* 695 */
struct $8336883A25EC4123D0009C6EE8AB4FF6
{
  _BYTE gap0[8];
  _LARGE_INTEGER hVal;
};

/* 696 */
struct $48517EA9B6E134714CE3E85179EF8B5A
{
  _BYTE gap0[8];
  _ULARGE_INTEGER uhVal;
};

/* 697 */
struct $BFC4423A02BC30EE95984A052E2BEA69
{
  _BYTE gap0[8];
  _FILETIME filetime;
};

/* 698 */
struct $5D51E98B2C210C6363C6703441007720
{
  _BYTE gap0[8];
  _GUID *puuid;
};

/* 699 */
struct $D7936AEA0DAE8E53D2594076B13834B5
{
  _BYTE gap0[8];
  tagCLIPDATA *pclipdata;
};

/* 700 */
struct $978E99F8547CD98592F71C677EF8EE36
{
  _BYTE gap0[8];
  tagBSTRBLOB bstrblobVal;
};

/* 701 */
struct $0B0802B47794C82F0DF29B2841EB1975
{
  _BYTE gap0[8];
  tagBLOB blob;
};

/* 702 */
struct $17BA733FE6B8BEB3CC80B954432F0727
{
  _BYTE gap0[8];
  char *pszVal;
};

/* 703 */
struct $A123DDE5155BABE8656CED1ACF96B10E
{
  _BYTE gap0[8];
  wchar_t *pwszVal;
};

/* 704 */
struct $5594DD42C8D8E15A1F566AFDC255F352
{
  _BYTE gap0[8];
  IStream *pStream;
};

/* 705 */
struct $261506E430FD5A2CFD4187416CA59279
{
  _BYTE gap0[8];
  IStorage *pStorage;
};

/* 706 */
struct $FE9ABEB81310E5ED6172B34762FCAA42
{
  _BYTE gap0[8];
  tagVersionedStream *pVersionedStream;
};

/* 707 */
struct $42A44A36432C7029A0FF84D56417885A
{
  _BYTE gap0[8];
  tagCAC cac;
};

/* 708 */
struct $4A9929DCF142F8770C278FA5A56D6A6B
{
  _BYTE gap0[8];
  tagCAUB caub;
};

/* 709 */
struct $00944EFF16FC9C00FA0DAD352E146A00
{
  _BYTE gap0[8];
  tagCAI cai;
};

/* 710 */
struct $8DBEC31C172773F28F931EAF98B01DC3
{
  _BYTE gap0[8];
  tagCAUI caui;
};

/* 711 */
struct $DE569CA2026E56A1C53211C916571DB9
{
  _BYTE gap0[8];
  tagCAL cal;
};

/* 712 */
struct $C01F0577071613BF0314073C89E9B8F3
{
  _BYTE gap0[8];
  tagCAUL caul;
};

/* 713 */
struct $FD8DF1B7E4E98C05FEF35408342D38D4
{
  _BYTE gap0[8];
  tagCAH cah;
};

/* 714 */
struct $8914AFDFC5D0EF8F4F268EC040C8B4E3
{
  _BYTE gap0[8];
  tagCAUH cauh;
};

/* 715 */
struct $F56CBA5B0F3ED8DE27526D7050627D36
{
  _BYTE gap0[8];
  tagCAFLT caflt;
};

/* 716 */
struct $FD23A11FC4ADEA185ED95C1595335554
{
  _BYTE gap0[8];
  tagCADBL cadbl;
};

/* 717 */
struct $B108E8168A3C5285768081F11767E73E
{
  _BYTE gap0[8];
  tagCABOOL cabool;
};

/* 718 */
struct $CF1A3E8689F8CC25A3B0C23037BFA041
{
  _BYTE gap0[8];
  tagCASCODE cascode;
};

/* 719 */
struct $55E05E7827973042641A78122AF23EAC
{
  _BYTE gap0[8];
  tagCACY cacy;
};

/* 720 */
struct $C65AB96E42077D22E0B7680CBF82B6BD
{
  _BYTE gap0[8];
  tagCADATE cadate;
};

/* 721 */
struct $FF1990441A24923FBBD733D3F1796F85
{
  _BYTE gap0[8];
  tagCAFILETIME cafiletime;
};

/* 722 */
struct $6984669075447D5799FC50808BBD47CC
{
  _BYTE gap0[8];
  tagCACLSID cauuid;
};

/* 723 */
struct $D94664388E336DA32E7BD837A8F3CFFF
{
  _BYTE gap0[8];
  tagCACLIPDATA caclipdata;
};

/* 724 */
struct $43B08F55F75D6D67D122A567AA645D5D
{
  _BYTE gap0[8];
  tagCABSTR cabstr;
};

/* 725 */
struct $F3CC3411164F0AF281A03090890BB16A
{
  _BYTE gap0[8];
  tagCABSTRBLOB cabstrblob;
};

/* 726 */
struct $7AF7C3952410B391B4A1DE89E57CB5F7
{
  _BYTE gap0[8];
  tagCALPSTR calpstr;
};

/* 727 */
struct $AA664E4A5DCA6ABE9094AE875F555532
{
  _BYTE gap0[8];
  tagCALPWSTR calpwstr;
};

/* 728 */
struct tagCAPROPVARIANT
{
  unsigned int cElems;
  tagPROPVARIANT *pElems;
};

/* 729 */
struct $7749A8368A2064331176013E8A54EB43
{
  _BYTE gap0[8];
  tagCAPROPVARIANT capropvar;
};

/* 730 */
struct $04BE784DECC027E28BF27439C894AAFA
{
  _BYTE gap0[8];
  tagPROPVARIANT *pvarVal;
};

/* 731 */
union $5D7988CDFD824C317F439B211E47ED04
{
  $5DF3780F58367B9F2537DF425A8A812E __s0;
  tagDEC decVal;
  $F28A51B4B40B0D33C72915D739D42B4B __s2;
  $31126B8528A05AF3606C6D495FD178E8 __s3;
  $48802A31D3D0701BC13CEF9CEA041E7B __s4;
  $6D336DA143C556260FF80C12817B08DB __s5;
  $B644145F46FF1F932B106BFA6CC3F6D9 __s6;
  $5CA90CF57237397281FB12BFD52C1905 __s7;
  $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s8;
  $8336883A25EC4123D0009C6EE8AB4FF6 __s9;
  $48517EA9B6E134714CE3E85179EF8B5A __s10;
  $50230A970D9734D4E9774CFC619DF0F6 __s11;
  $4C0EC2258454B893CE739DAE89D8DB7B __s12;
  $6DB36323059316E675433BB10D285009 __s13;
  $8E3C8731874D1B3BC66617C4DD3163A6 __s14;
  $F45985FE772BFBDBFBC7877C6B603E69 __s15;
  $E94952165EEA9EEA990FEB33603E1B19 __s16;
  $BFC4423A02BC30EE95984A052E2BEA69 __s17;
  $5D51E98B2C210C6363C6703441007720 __s18;
  $D7936AEA0DAE8E53D2594076B13834B5 __s19;
  $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s20;
  $978E99F8547CD98592F71C677EF8EE36 __s21;
  $0B0802B47794C82F0DF29B2841EB1975 __s22;
  $17BA733FE6B8BEB3CC80B954432F0727 __s23;
  $A123DDE5155BABE8656CED1ACF96B10E __s24;
  $A10816552800D2A514B7976995B9F9B9 __s25;
  $B89F6A7E94F0927D54170392522A1415 __s26;
  $5594DD42C8D8E15A1F566AFDC255F352 __s27;
  $261506E430FD5A2CFD4187416CA59279 __s28;
  $FE9ABEB81310E5ED6172B34762FCAA42 __s29;
  $140129CB058BA7EFBC2D411C30CFBD34 __s30;
  $42A44A36432C7029A0FF84D56417885A __s31;
  $4A9929DCF142F8770C278FA5A56D6A6B __s32;
  $00944EFF16FC9C00FA0DAD352E146A00 __s33;
  $8DBEC31C172773F28F931EAF98B01DC3 __s34;
  $DE569CA2026E56A1C53211C916571DB9 __s35;
  $C01F0577071613BF0314073C89E9B8F3 __s36;
  $FD8DF1B7E4E98C05FEF35408342D38D4 __s37;
  $8914AFDFC5D0EF8F4F268EC040C8B4E3 __s38;
  $F56CBA5B0F3ED8DE27526D7050627D36 __s39;
  $FD23A11FC4ADEA185ED95C1595335554 __s40;
  $B108E8168A3C5285768081F11767E73E __s41;
  $CF1A3E8689F8CC25A3B0C23037BFA041 __s42;
  $55E05E7827973042641A78122AF23EAC __s43;
  $C65AB96E42077D22E0B7680CBF82B6BD __s44;
  $FF1990441A24923FBBD733D3F1796F85 __s45;
  $6984669075447D5799FC50808BBD47CC __s46;
  $D94664388E336DA32E7BD837A8F3CFFF __s47;
  $43B08F55F75D6D67D122A567AA645D5D __s48;
  $F3CC3411164F0AF281A03090890BB16A __s49;
  $7AF7C3952410B391B4A1DE89E57CB5F7 __s50;
  $AA664E4A5DCA6ABE9094AE875F555532 __s51;
  $7749A8368A2064331176013E8A54EB43 __s52;
  $E1D71D20C3D01115E20D79FAE9629CE8 __s53;
  $166B1F81F6EA96F97683A65F38FB1A59 __s54;
  $76732A64405C0E287FCB302687644550 __s55;
  $5669F5A4AD19EF2CB42A5602080CB0A6 __s56;
  $E5FC128E66C26C95254032BA69D36E74 __s57;
  $886F8AE9D7C8B1B861B6CA58D67B682A __s58;
  $CDA73A427DD2A30CDA26CA3394C33CF0 __s59;
  $2516E53E690D8CC5659AAB7EDC49E664 __s60;
  $BF8CC88CDF129BD6E4FA4ABA13F521AD __s61;
  $2CABE618CF1C2625A4479554E4967E0A __s62;
  $AAA92DA1D6E1B0E8462F69216B62027C __s63;
  $6169F49F66A275BDAF126872559B48EF __s64;
  $F7167AE7A8ABA03C094C204FB1564A28 __s65;
  $7D7BD2B619E72DC6D1FB5F720E366D97 __s66;
  $6857AE69DB7C952EEFD665431A7B503A __s67;
  $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s68;
  $4DB26F3641711EA188EB1A6C00F8DC76 __s69;
  $04E306AB19BDBE2C9512AD8D1500A2CA __s70;
  $CE51A97B3FE1677A2C99841D5D15FD26 __s71;
  $04BE784DECC027E28BF27439C894AAFA __s72;
};

/* 732 */
struct tagPROPVARIANT
{
  $5D7988CDFD824C317F439B211E47ED04 ___u0;
};

/* 734 */
struct tagDISPPARAMS
{
  tagVARIANT *rgvarg;
  int *rgdispidNamedArgs;
  unsigned int cArgs;
  unsigned int cNamedArgs;
};

/* 735 */
union union_u2
{
  void *binder;
  int handle;
};

/* 736 */
struct __attribute__((aligned(4))) flat_binder_object
{
  unsigned int type;
  unsigned int flags;
  union_u2 union_u2;
  flat_binder_object *cookie;
};

/* 737 */
struct __cppobj ITypeLib : IUnknown
{
};

/* 738 */
struct $8C32E5D3ED1763EA38B94549972C5F20
{
  unsigned __int32 LongFunction : 1;
  unsigned __int32 Persistent : 1;
  unsigned __int32 Private : 30;
};

/* 739 */
union $3D84E517373EAAB1954448FA378129EE
{
  unsigned int Flags;
  $8C32E5D3ED1763EA38B94549972C5F20 s;
};

/* 740 */
struct _TP_CALLBACK_ENVIRON_V3;

/* 742 */
struct stat
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 743 */
struct __attribute__((aligned(8))) timespec
{
  __int64 tv_sec;
  int tv_nsec;
};

/* 744 */
struct binder_version
{
  int protocol_version;
};

/* 745 */
struct _Mbstatet
{
  unsigned int _Wchar;
  unsigned __int16 _Byte;
  unsigned __int16 _State;
};

/* 746 */
struct file
{
  void *private_data;
  void *f_flags;
};

/* 747 */
struct _ldiv_t
{
  int quot;
  int rem;
};

/* 748 */
struct _stat64i32
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 749 */
struct _lldiv_t
{
  __int64 quot;
  __int64 rem;
};

/* 750 */
struct binder_ref
{
  int debug_id;
  rb_node rb_node_desc;
  rb_node rb_node_node;
  hlist_node node_entry;
  binder_proc *proc;
  binder_node *node;
  unsigned int desc;
  int strong;
  int weak;
  binder_ref_death *death;
};

/* 751 */
struct __attribute__((aligned(8))) _timespec64
{
  __int64 tv_sec;
  int tv_nsec;
};

/* 753 */
struct __cppobj ArmVM::BaseIOStrean
{
  ArmVM::BaseIOStreanVtbl *vfptr;
  char *m_buf;
  unsigned int m_bufsize;
  unsigned int m_free;
};

/* 754 */
union $F0464C9A335CDCB631704DE97DC9B49B;

/* 755 */
struct __cppobj ArmVM::PipeThread : ArmVM::Thread
{
  ArmVM::BaseIOStrean *m_stream;
  bool m_finished;
};

/* 756 */
struct _SECURITY_ATTRIBUTES
{
  unsigned int nLength;
  void *lpSecurityDescriptor;
  int bInheritHandle;
};

/* 757 */
struct ArmVM::PipeOperationStream;

/* 758 */
struct __cppobj ArmVM::PipeServer : ArmVM::Thread
{
  ArmVM::PipeOperationStream *m_listenSock;
  bool m_exiting;
};

/* 759 */
struct _TypeDescriptor
{
  const void *pVFTable;
  void *spare;
  char name[];
};

/* 760 */
struct _PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};

/* 761 */
struct _s__CatchableType
{
  unsigned int properties;
  _TypeDescriptor *pType;
  _PMD thisDisplacement;
  int sizeOrOffset;
  void (__cdecl *copyFunction)(void *);
};

/* 762 */
struct $_TypeDescriptor$_extraBytes_24
{
  const void *pVFTable;
  void *spare;
  char name[24];
};

/* 763 */
struct _Ctypevec
{
  unsigned int _Page;
  const __int16 *_Table;
  int _Delfl;
  wchar_t *_LocaleName;
};

/* 764 */
struct $_TypeDescriptor$_extraBytes_28
{
  const void *pVFTable;
  void *spare;
  char name[28];
};

/* 765 */
union __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  char m128_i8[16];
  __int16 m128_i16[8];
  int m128_i32[4];
  __int64 m128_i64[2];
  char m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned int m128_u32[4];
};

/* 766 */
struct __attribute__((packed)) __attribute__((aligned(1))) $_TypeDescriptor$_extraBytes_23
{
  const void *pVFTable;
  void *spare;
  char name[23];
};

/* 767 */
struct __attribute__((packed)) __attribute__((aligned(2))) $_TypeDescriptor$_extraBytes_34
{
  const void *pVFTable;
  void *spare;
  char name[34];
};

/* 768 */
struct __attribute__((packed)) __attribute__((aligned(1))) $_TypeDescriptor$_extraBytes_19
{
  const void *pVFTable;
  void *spare;
  char name[19];
};

/* 769 */
struct __attribute__((packed)) __attribute__((aligned(1))) $_TypeDescriptor$_extraBytes_21
{
  const void *pVFTable;
  void *spare;
  char name[21];
};

/* 770 */
struct $_TypeDescriptor$_extraBytes_20
{
  const void *pVFTable;
  void *spare;
  char name[20];
};

/* 771 */
struct $_s__CatchableTypeArray$_extraBytes_20
{
  int nCatchableTypes;
  _s__CatchableType *arrayOfCatchableTypes[5];
};

/* 772 */
struct __cppobj std::_Iterator_base0
{
};

/* 773 */
struct __cppobj std::input_iterator_tag
{
};

/* 774 */
struct __cppobj std::_Mutable_iterator_tag
{
};

/* 775 */
struct __cppobj std::forward_iterator_tag : std::input_iterator_tag, std::_Mutable_iterator_tag
{
  _BYTE gap0[1];
};

/* 776 */
struct __cppobj std::bidirectional_iterator_tag : std::forward_iterator_tag
{
};

/* 777 */
struct __cppobj std::random_access_iterator_tag : std::bidirectional_iterator_tag
{
};

/* 778 */
enum enum_1
{
};

/* 779 */
union __attribute__((aligned(4))) $859530A495F323E34F6FF6F609195F24
{
  $76E49E73D22C7EB97CD59DFF8F6549A8 ptr;
  char buf[8];
};

/* 781 */
struct __attribute__((aligned(4))) FILE
{
  void *_Placeholder;
};

/* 785 */
enum BC_ENUM_TABLE
{
};

